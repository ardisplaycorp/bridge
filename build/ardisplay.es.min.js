function It(R) {
  return R && R.__esModule && Object.prototype.hasOwnProperty.call(R, "default") ? R.default : R;
}
var kt = { exports: {} }, Pt = kt.exports, Et;
function jt() {
  return Et || (Et = 1, function(R, s) {
    (function(d, a) {
      R.exports = a();
    })(Pt, () => (() => {
      var d = { 873: (v, x) => {
        var A, B, U = function() {
          var Y = function(t, o) {
            var i = t, e = dt[o], r = null, l = 0, c = null, p = [], m = {}, S = function(h, f) {
              r = function(u) {
                for (var y = new Array(u), b = 0; b < u; b += 1) {
                  y[b] = new Array(u);
                  for (var k = 0; k < u; k += 1) y[b][k] = null;
                }
                return y;
              }(l = 4 * i + 17), _(0, 0), _(l - 7, 0), _(0, l - 7), z(), C(), M(h, f), i >= 7 && H(h), c == null && (c = V(i, e, p)), F(c, f);
            }, _ = function(h, f) {
              for (var u = -1; u <= 7; u += 1) if (!(h + u <= -1 || l <= h + u)) for (var y = -1; y <= 7; y += 1) f + y <= -1 || l <= f + y || (r[h + u][f + y] = 0 <= u && u <= 6 && (y == 0 || y == 6) || 0 <= y && y <= 6 && (u == 0 || u == 6) || 2 <= u && u <= 4 && 2 <= y && y <= 4);
            }, C = function() {
              for (var h = 8; h < l - 8; h += 1) r[h][6] == null && (r[h][6] = h % 2 == 0);
              for (var f = 8; f < l - 8; f += 1) r[6][f] == null && (r[6][f] = f % 2 == 0);
            }, z = function() {
              for (var h = et.getPatternPosition(i), f = 0; f < h.length; f += 1) for (var u = 0; u < h.length; u += 1) {
                var y = h[f], b = h[u];
                if (r[y][b] == null) for (var k = -2; k <= 2; k += 1) for (var D = -2; D <= 2; D += 1) r[y + k][b + D] = k == -2 || k == 2 || D == -2 || D == 2 || k == 0 && D == 0;
              }
            }, H = function(h) {
              for (var f = et.getBCHTypeNumber(i), u = 0; u < 18; u += 1) {
                var y = !h && (f >> u & 1) == 1;
                r[Math.floor(u / 3)][u % 3 + l - 8 - 3] = y;
              }
              for (u = 0; u < 18; u += 1) y = !h && (f >> u & 1) == 1, r[u % 3 + l - 8 - 3][Math.floor(u / 3)] = y;
            }, M = function(h, f) {
              for (var u = e << 3 | f, y = et.getBCHTypeInfo(u), b = 0; b < 15; b += 1) {
                var k = !h && (y >> b & 1) == 1;
                b < 6 ? r[b][8] = k : b < 8 ? r[b + 1][8] = k : r[l - 15 + b][8] = k;
              }
              for (b = 0; b < 15; b += 1) k = !h && (y >> b & 1) == 1, b < 8 ? r[8][l - b - 1] = k : b < 9 ? r[8][15 - b - 1 + 1] = k : r[8][15 - b - 1] = k;
              r[l - 8][8] = !h;
            }, F = function(h, f) {
              for (var u = -1, y = l - 1, b = 7, k = 0, D = et.getMaskFunction(f), E = l - 1; E > 0; E -= 2) for (E == 6 && (E -= 1); ; ) {
                for (var T = 0; T < 2; T += 1) if (r[y][E - T] == null) {
                  var j = !1;
                  k < h.length && (j = (h[k] >>> b & 1) == 1), D(y, E - T) && (j = !j), r[y][E - T] = j, (b -= 1) == -1 && (k += 1, b = 7);
                }
                if ((y += u) < 0 || l <= y) {
                  y -= u, u = -u;
                  break;
                }
              }
            }, V = function(h, f, u) {
              for (var y = ct.getRSBlocks(h, f), b = mt(), k = 0; k < u.length; k += 1) {
                var D = u[k];
                b.put(D.getMode(), 4), b.put(D.getLength(), et.getLengthInBits(D.getMode(), h)), D.write(b);
              }
              var E = 0;
              for (k = 0; k < y.length; k += 1) E += y[k].dataCount;
              if (b.getLengthInBits() > 8 * E) throw "code length overflow. (" + b.getLengthInBits() + ">" + 8 * E + ")";
              for (b.getLengthInBits() + 4 <= 8 * E && b.put(0, 4); b.getLengthInBits() % 8 != 0; ) b.putBit(!1);
              for (; !(b.getLengthInBits() >= 8 * E || (b.put(236, 8), b.getLengthInBits() >= 8 * E)); ) b.put(17, 8);
              return function(T, j) {
                for (var O = 0, X = 0, G = 0, W = new Array(j.length), Q = new Array(j.length), L = 0; L < j.length; L += 1) {
                  var ht = j[L].dataCount, ft = j[L].totalCount - ht;
                  X = Math.max(X, ht), G = Math.max(G, ft), W[L] = new Array(ht);
                  for (var N = 0; N < W[L].length; N += 1) W[L][N] = 255 & T.getBuffer()[N + O];
                  O += ht;
                  var nt = et.getErrorCorrectPolynomial(ft), ot = rt(W[L], nt.getLength() - 1).mod(nt);
                  for (Q[L] = new Array(nt.getLength() - 1), N = 0; N < Q[L].length; N += 1) {
                    var at = N + ot.getLength() - Q[L].length;
                    Q[L][N] = at >= 0 ? ot.getAt(at) : 0;
                  }
                }
                var _t = 0;
                for (N = 0; N < j.length; N += 1) _t += j[N].totalCount;
                var yt = new Array(_t), st = 0;
                for (N = 0; N < X; N += 1) for (L = 0; L < j.length; L += 1) N < W[L].length && (yt[st] = W[L][N], st += 1);
                for (N = 0; N < G; N += 1) for (L = 0; L < j.length; L += 1) N < Q[L].length && (yt[st] = Q[L][N], st += 1);
                return yt;
              }(b, y);
            };
            m.addData = function(h, f) {
              var u = null;
              switch (f = f || "Byte") {
                case "Numeric":
                  u = Mt(h);
                  break;
                case "Alphanumeric":
                  u = At(h);
                  break;
                case "Byte":
                  u = ut(h);
                  break;
                case "Kanji":
                  u = wt(h);
                  break;
                default:
                  throw "mode:" + f;
              }
              p.push(u), c = null;
            }, m.isDark = function(h, f) {
              if (h < 0 || l <= h || f < 0 || l <= f) throw h + "," + f;
              return r[h][f];
            }, m.getModuleCount = function() {
              return l;
            }, m.make = function() {
              if (i < 1) {
                for (var h = 1; h < 40; h++) {
                  for (var f = ct.getRSBlocks(h, e), u = mt(), y = 0; y < p.length; y++) {
                    var b = p[y];
                    u.put(b.getMode(), 4), u.put(b.getLength(), et.getLengthInBits(b.getMode(), h)), b.write(u);
                  }
                  var k = 0;
                  for (y = 0; y < f.length; y++) k += f[y].dataCount;
                  if (u.getLengthInBits() <= 8 * k) break;
                }
                i = h;
              }
              S(!1, function() {
                for (var D = 0, E = 0, T = 0; T < 8; T += 1) {
                  S(!0, T);
                  var j = et.getLostPoint(m);
                  (T == 0 || D > j) && (D = j, E = T);
                }
                return E;
              }());
            }, m.createTableTag = function(h, f) {
              h = h || 2;
              var u = "";
              u += '<table style="', u += " border-width: 0px; border-style: none;", u += " border-collapse: collapse;", u += " padding: 0px; margin: " + (f = f === void 0 ? 4 * h : f) + "px;", u += '">', u += "<tbody>";
              for (var y = 0; y < m.getModuleCount(); y += 1) {
                u += "<tr>";
                for (var b = 0; b < m.getModuleCount(); b += 1) u += '<td style="', u += " border-width: 0px; border-style: none;", u += " border-collapse: collapse;", u += " padding: 0px; margin: 0px;", u += " width: " + h + "px;", u += " height: " + h + "px;", u += " background-color: ", u += m.isDark(y, b) ? "#000000" : "#ffffff", u += ";", u += '"/>';
                u += "</tr>";
              }
              return (u += "</tbody>") + "</table>";
            }, m.createSvgTag = function(h, f, u, y) {
              var b = {};
              typeof arguments[0] == "object" && (h = (b = arguments[0]).cellSize, f = b.margin, u = b.alt, y = b.title), h = h || 2, f = f === void 0 ? 4 * h : f, (u = typeof u == "string" ? { text: u } : u || {}).text = u.text || null, u.id = u.text ? u.id || "qrcode-description" : null, (y = typeof y == "string" ? { text: y } : y || {}).text = y.text || null, y.id = y.text ? y.id || "qrcode-title" : null;
              var k, D, E, T, j = m.getModuleCount() * h + 2 * f, O = "";
              for (T = "l" + h + ",0 0," + h + " -" + h + ",0 0,-" + h + "z ", O += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"', O += b.scalable ? "" : ' width="' + j + 'px" height="' + j + 'px"', O += ' viewBox="0 0 ' + j + " " + j + '" ', O += ' preserveAspectRatio="xMinYMin meet"', O += y.text || u.text ? ' role="img" aria-labelledby="' + q([y.id, u.id].join(" ").trim()) + '"' : "", O += ">", O += y.text ? '<title id="' + q(y.id) + '">' + q(y.text) + "</title>" : "", O += u.text ? '<description id="' + q(u.id) + '">' + q(u.text) + "</description>" : "", O += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>', O += '<path d="', D = 0; D < m.getModuleCount(); D += 1) for (E = D * h + f, k = 0; k < m.getModuleCount(); k += 1) m.isDark(D, k) && (O += "M" + (k * h + f) + "," + E + T);
              return (O += '" stroke="transparent" fill="black"/>') + "</svg>";
            }, m.createDataURL = function(h, f) {
              h = h || 2, f = f === void 0 ? 4 * h : f;
              var u = m.getModuleCount() * h + 2 * f, y = f, b = u - f;
              return n(u, u, function(k, D) {
                if (y <= k && k < b && y <= D && D < b) {
                  var E = Math.floor((k - y) / h), T = Math.floor((D - y) / h);
                  return m.isDark(T, E) ? 0 : 1;
                }
                return 1;
              });
            }, m.createImgTag = function(h, f, u) {
              h = h || 2, f = f === void 0 ? 4 * h : f;
              var y = m.getModuleCount() * h + 2 * f, b = "";
              return b += "<img", b += ' src="', b += m.createDataURL(h, f), b += '"', b += ' width="', b += y, b += '"', b += ' height="', b += y, b += '"', u && (b += ' alt="', b += q(u), b += '"'), b + "/>";
            };
            var q = function(h) {
              for (var f = "", u = 0; u < h.length; u += 1) {
                var y = h.charAt(u);
                switch (y) {
                  case "<":
                    f += "&lt;";
                    break;
                  case ">":
                    f += "&gt;";
                    break;
                  case "&":
                    f += "&amp;";
                    break;
                  case '"':
                    f += "&quot;";
                    break;
                  default:
                    f += y;
                }
              }
              return f;
            };
            return m.createASCII = function(h, f) {
              if ((h = h || 1) < 2) return function(W) {
                W = W === void 0 ? 2 : W;
                var Q, L, ht, ft, N, nt = 1 * m.getModuleCount() + 2 * W, ot = W, at = nt - W, _t = { "██": "█", "█ ": "▀", " █": "▄", "  ": " " }, yt = { "██": "▀", "█ ": "▀", " █": " ", "  ": " " }, st = "";
                for (Q = 0; Q < nt; Q += 2) {
                  for (ht = Math.floor((Q - ot) / 1), ft = Math.floor((Q + 1 - ot) / 1), L = 0; L < nt; L += 1) N = "█", ot <= L && L < at && ot <= Q && Q < at && m.isDark(ht, Math.floor((L - ot) / 1)) && (N = " "), ot <= L && L < at && ot <= Q + 1 && Q + 1 < at && m.isDark(ft, Math.floor((L - ot) / 1)) ? N += " " : N += "█", st += W < 1 && Q + 1 >= at ? yt[N] : _t[N];
                  st += `
`;
                }
                return nt % 2 && W > 0 ? st.substring(0, st.length - nt - 1) + Array(nt + 1).join("▀") : st.substring(0, st.length - 1);
              }(f);
              h -= 1, f = f === void 0 ? 2 * h : f;
              var u, y, b, k, D = m.getModuleCount() * h + 2 * f, E = f, T = D - f, j = Array(h + 1).join("██"), O = Array(h + 1).join("  "), X = "", G = "";
              for (u = 0; u < D; u += 1) {
                for (b = Math.floor((u - E) / h), G = "", y = 0; y < D; y += 1) k = 1, E <= y && y < T && E <= u && u < T && m.isDark(b, Math.floor((y - E) / h)) && (k = 0), G += k ? j : O;
                for (b = 0; b < h; b += 1) X += G + `
`;
              }
              return X.substring(0, X.length - 1);
            }, m.renderTo2dContext = function(h, f) {
              f = f || 2;
              for (var u = m.getModuleCount(), y = 0; y < u; y++) for (var b = 0; b < u; b++) h.fillStyle = m.isDark(y, b) ? "black" : "white", h.fillRect(y * f, b * f, f, f);
            }, m;
          };
          Y.stringToBytes = (Y.stringToBytesFuncs = { default: function(t) {
            for (var o = [], i = 0; i < t.length; i += 1) {
              var e = t.charCodeAt(i);
              o.push(255 & e);
            }
            return o;
          } }).default, Y.createStringToBytes = function(t, o) {
            var i = function() {
              for (var r = P(t), l = function() {
                var C = r.read();
                if (C == -1) throw "eof";
                return C;
              }, c = 0, p = {}; ; ) {
                var m = r.read();
                if (m == -1) break;
                var S = l(), _ = l() << 8 | l();
                p[String.fromCharCode(m << 8 | S)] = _, c += 1;
              }
              if (c != o) throw c + " != " + o;
              return p;
            }(), e = 63;
            return function(r) {
              for (var l = [], c = 0; c < r.length; c += 1) {
                var p = r.charCodeAt(c);
                if (p < 128) l.push(p);
                else {
                  var m = i[r.charAt(c)];
                  typeof m == "number" ? (255 & m) == m ? l.push(m) : (l.push(m >>> 8), l.push(255 & m)) : l.push(e);
                }
              }
              return l;
            };
          };
          var K, Z, I, $, tt, dt = { L: 1, M: 0, Q: 3, H: 2 }, et = (K = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]], Z = 1335, I = 7973, tt = function(t) {
            for (var o = 0; t != 0; ) o += 1, t >>>= 1;
            return o;
          }, ($ = {}).getBCHTypeInfo = function(t) {
            for (var o = t << 10; tt(o) - tt(Z) >= 0; ) o ^= Z << tt(o) - tt(Z);
            return 21522 ^ (t << 10 | o);
          }, $.getBCHTypeNumber = function(t) {
            for (var o = t << 12; tt(o) - tt(I) >= 0; ) o ^= I << tt(o) - tt(I);
            return t << 12 | o;
          }, $.getPatternPosition = function(t) {
            return K[t - 1];
          }, $.getMaskFunction = function(t) {
            switch (t) {
              case 0:
                return function(o, i) {
                  return (o + i) % 2 == 0;
                };
              case 1:
                return function(o, i) {
                  return o % 2 == 0;
                };
              case 2:
                return function(o, i) {
                  return i % 3 == 0;
                };
              case 3:
                return function(o, i) {
                  return (o + i) % 3 == 0;
                };
              case 4:
                return function(o, i) {
                  return (Math.floor(o / 2) + Math.floor(i / 3)) % 2 == 0;
                };
              case 5:
                return function(o, i) {
                  return o * i % 2 + o * i % 3 == 0;
                };
              case 6:
                return function(o, i) {
                  return (o * i % 2 + o * i % 3) % 2 == 0;
                };
              case 7:
                return function(o, i) {
                  return (o * i % 3 + (o + i) % 2) % 2 == 0;
                };
              default:
                throw "bad maskPattern:" + t;
            }
          }, $.getErrorCorrectPolynomial = function(t) {
            for (var o = rt([1], 0), i = 0; i < t; i += 1) o = o.multiply(rt([1, it.gexp(i)], 0));
            return o;
          }, $.getLengthInBits = function(t, o) {
            if (1 <= o && o < 10) switch (t) {
              case 1:
                return 10;
              case 2:
                return 9;
              case 4:
              case 8:
                return 8;
              default:
                throw "mode:" + t;
            }
            else if (o < 27) switch (t) {
              case 1:
                return 12;
              case 2:
                return 11;
              case 4:
                return 16;
              case 8:
                return 10;
              default:
                throw "mode:" + t;
            }
            else {
              if (!(o < 41)) throw "type:" + o;
              switch (t) {
                case 1:
                  return 14;
                case 2:
                  return 13;
                case 4:
                  return 16;
                case 8:
                  return 12;
                default:
                  throw "mode:" + t;
              }
            }
          }, $.getLostPoint = function(t) {
            for (var o = t.getModuleCount(), i = 0, e = 0; e < o; e += 1) for (var r = 0; r < o; r += 1) {
              for (var l = 0, c = t.isDark(e, r), p = -1; p <= 1; p += 1) if (!(e + p < 0 || o <= e + p)) for (var m = -1; m <= 1; m += 1) r + m < 0 || o <= r + m || p == 0 && m == 0 || c == t.isDark(e + p, r + m) && (l += 1);
              l > 5 && (i += 3 + l - 5);
            }
            for (e = 0; e < o - 1; e += 1) for (r = 0; r < o - 1; r += 1) {
              var S = 0;
              t.isDark(e, r) && (S += 1), t.isDark(e + 1, r) && (S += 1), t.isDark(e, r + 1) && (S += 1), t.isDark(e + 1, r + 1) && (S += 1), S != 0 && S != 4 || (i += 3);
            }
            for (e = 0; e < o; e += 1) for (r = 0; r < o - 6; r += 1) t.isDark(e, r) && !t.isDark(e, r + 1) && t.isDark(e, r + 2) && t.isDark(e, r + 3) && t.isDark(e, r + 4) && !t.isDark(e, r + 5) && t.isDark(e, r + 6) && (i += 40);
            for (r = 0; r < o; r += 1) for (e = 0; e < o - 6; e += 1) t.isDark(e, r) && !t.isDark(e + 1, r) && t.isDark(e + 2, r) && t.isDark(e + 3, r) && t.isDark(e + 4, r) && !t.isDark(e + 5, r) && t.isDark(e + 6, r) && (i += 40);
            var _ = 0;
            for (r = 0; r < o; r += 1) for (e = 0; e < o; e += 1) t.isDark(e, r) && (_ += 1);
            return i + Math.abs(100 * _ / o / o - 50) / 5 * 10;
          }, $), it = function() {
            for (var t = new Array(256), o = new Array(256), i = 0; i < 8; i += 1) t[i] = 1 << i;
            for (i = 8; i < 256; i += 1) t[i] = t[i - 4] ^ t[i - 5] ^ t[i - 6] ^ t[i - 8];
            for (i = 0; i < 255; i += 1) o[t[i]] = i;
            return { glog: function(e) {
              if (e < 1) throw "glog(" + e + ")";
              return o[e];
            }, gexp: function(e) {
              for (; e < 0; ) e += 255;
              for (; e >= 256; ) e -= 255;
              return t[e];
            } };
          }();
          function rt(t, o) {
            if (t.length === void 0) throw t.length + "/" + o;
            var i = function() {
              for (var r = 0; r < t.length && t[r] == 0; ) r += 1;
              for (var l = new Array(t.length - r + o), c = 0; c < t.length - r; c += 1) l[c] = t[c + r];
              return l;
            }(), e = { getAt: function(r) {
              return i[r];
            }, getLength: function() {
              return i.length;
            }, multiply: function(r) {
              for (var l = new Array(e.getLength() + r.getLength() - 1), c = 0; c < e.getLength(); c += 1) for (var p = 0; p < r.getLength(); p += 1) l[c + p] ^= it.gexp(it.glog(e.getAt(c)) + it.glog(r.getAt(p)));
              return rt(l, 0);
            }, mod: function(r) {
              if (e.getLength() - r.getLength() < 0) return e;
              for (var l = it.glog(e.getAt(0)) - it.glog(r.getAt(0)), c = new Array(e.getLength()), p = 0; p < e.getLength(); p += 1) c[p] = e.getAt(p);
              for (p = 0; p < r.getLength(); p += 1) c[p] ^= it.gexp(it.glog(r.getAt(p)) + l);
              return rt(c, 0).mod(r);
            } };
            return e;
          }
          var ct = /* @__PURE__ */ function() {
            var t = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], o = function(e, r) {
              var l = {};
              return l.totalCount = e, l.dataCount = r, l;
            }, i = { getRSBlocks: function(e, r) {
              var l = function(H, M) {
                switch (M) {
                  case dt.L:
                    return t[4 * (H - 1) + 0];
                  case dt.M:
                    return t[4 * (H - 1) + 1];
                  case dt.Q:
                    return t[4 * (H - 1) + 2];
                  case dt.H:
                    return t[4 * (H - 1) + 3];
                  default:
                    return;
                }
              }(e, r);
              if (l === void 0) throw "bad rs block @ typeNumber:" + e + "/errorCorrectionLevel:" + r;
              for (var c = l.length / 3, p = [], m = 0; m < c; m += 1) for (var S = l[3 * m + 0], _ = l[3 * m + 1], C = l[3 * m + 2], z = 0; z < S; z += 1) p.push(o(_, C));
              return p;
            } };
            return i;
          }(), mt = function() {
            var t = [], o = 0, i = { getBuffer: function() {
              return t;
            }, getAt: function(e) {
              var r = Math.floor(e / 8);
              return (t[r] >>> 7 - e % 8 & 1) == 1;
            }, put: function(e, r) {
              for (var l = 0; l < r; l += 1) i.putBit((e >>> r - l - 1 & 1) == 1);
            }, getLengthInBits: function() {
              return o;
            }, putBit: function(e) {
              var r = Math.floor(o / 8);
              t.length <= r && t.push(0), e && (t[r] |= 128 >>> o % 8), o += 1;
            } };
            return i;
          }, Mt = function(t) {
            var o = t, i = { getMode: function() {
              return 1;
            }, getLength: function(l) {
              return o.length;
            }, write: function(l) {
              for (var c = o, p = 0; p + 2 < c.length; ) l.put(e(c.substring(p, p + 3)), 10), p += 3;
              p < c.length && (c.length - p == 1 ? l.put(e(c.substring(p, p + 1)), 4) : c.length - p == 2 && l.put(e(c.substring(p, p + 2)), 7));
            } }, e = function(l) {
              for (var c = 0, p = 0; p < l.length; p += 1) c = 10 * c + r(l.charAt(p));
              return c;
            }, r = function(l) {
              if ("0" <= l && l <= "9") return l.charCodeAt(0) - 48;
              throw "illegal char :" + l;
            };
            return i;
          }, At = function(t) {
            var o = t, i = { getMode: function() {
              return 2;
            }, getLength: function(r) {
              return o.length;
            }, write: function(r) {
              for (var l = o, c = 0; c + 1 < l.length; ) r.put(45 * e(l.charAt(c)) + e(l.charAt(c + 1)), 11), c += 2;
              c < l.length && r.put(e(l.charAt(c)), 6);
            } }, e = function(r) {
              if ("0" <= r && r <= "9") return r.charCodeAt(0) - 48;
              if ("A" <= r && r <= "Z") return r.charCodeAt(0) - 65 + 10;
              switch (r) {
                case " ":
                  return 36;
                case "$":
                  return 37;
                case "%":
                  return 38;
                case "*":
                  return 39;
                case "+":
                  return 40;
                case "-":
                  return 41;
                case ".":
                  return 42;
                case "/":
                  return 43;
                case ":":
                  return 44;
                default:
                  throw "illegal char :" + r;
              }
            };
            return i;
          }, ut = function(t) {
            var o = Y.stringToBytes(t);
            return { getMode: function() {
              return 4;
            }, getLength: function(i) {
              return o.length;
            }, write: function(i) {
              for (var e = 0; e < o.length; e += 1) i.put(o[e], 8);
            } };
          }, wt = function(t) {
            var o = Y.stringToBytesFuncs.SJIS;
            if (!o) throw "sjis not supported.";
            (function() {
              var r = o("友");
              if (r.length != 2 || (r[0] << 8 | r[1]) != 38726) throw "sjis not supported.";
            })();
            var i = o(t), e = { getMode: function() {
              return 8;
            }, getLength: function(r) {
              return ~~(i.length / 2);
            }, write: function(r) {
              for (var l = i, c = 0; c + 1 < l.length; ) {
                var p = (255 & l[c]) << 8 | 255 & l[c + 1];
                if (33088 <= p && p <= 40956) p -= 33088;
                else {
                  if (!(57408 <= p && p <= 60351)) throw "illegal char at " + (c + 1) + "/" + p;
                  p -= 49472;
                }
                p = 192 * (p >>> 8 & 255) + (255 & p), r.put(p, 13), c += 2;
              }
              if (c < l.length) throw "illegal char at " + (c + 1);
            } };
            return e;
          }, xt = function() {
            var t = [], o = { writeByte: function(i) {
              t.push(255 & i);
            }, writeShort: function(i) {
              o.writeByte(i), o.writeByte(i >>> 8);
            }, writeBytes: function(i, e, r) {
              e = e || 0, r = r || i.length;
              for (var l = 0; l < r; l += 1) o.writeByte(i[l + e]);
            }, writeString: function(i) {
              for (var e = 0; e < i.length; e += 1) o.writeByte(i.charCodeAt(e));
            }, toByteArray: function() {
              return t;
            }, toString: function() {
              var i = "";
              i += "[";
              for (var e = 0; e < t.length; e += 1) e > 0 && (i += ","), i += t[e];
              return i + "]";
            } };
            return o;
          }, P = function(t) {
            var o = t, i = 0, e = 0, r = 0, l = { read: function() {
              for (; r < 8; ) {
                if (i >= o.length) {
                  if (r == 0) return -1;
                  throw "unexpected end of file./" + r;
                }
                var p = o.charAt(i);
                if (i += 1, p == "=") return r = 0, -1;
                p.match(/^\s$/) || (e = e << 6 | c(p.charCodeAt(0)), r += 6);
              }
              var m = e >>> r - 8 & 255;
              return r -= 8, m;
            } }, c = function(p) {
              if (65 <= p && p <= 90) return p - 65;
              if (97 <= p && p <= 122) return p - 97 + 26;
              if (48 <= p && p <= 57) return p - 48 + 52;
              if (p == 43) return 62;
              if (p == 47) return 63;
              throw "c:" + p;
            };
            return l;
          }, n = function(t, o, i) {
            for (var e = function(_, C) {
              var z = _, H = C, M = new Array(_ * C), F = { setPixel: function(h, f, u) {
                M[f * z + h] = u;
              }, write: function(h) {
                h.writeString("GIF87a"), h.writeShort(z), h.writeShort(H), h.writeByte(128), h.writeByte(0), h.writeByte(0), h.writeByte(0), h.writeByte(0), h.writeByte(0), h.writeByte(255), h.writeByte(255), h.writeByte(255), h.writeString(","), h.writeShort(0), h.writeShort(0), h.writeShort(z), h.writeShort(H), h.writeByte(0);
                var f = V(2);
                h.writeByte(2);
                for (var u = 0; f.length - u > 255; ) h.writeByte(255), h.writeBytes(f, u, 255), u += 255;
                h.writeByte(f.length - u), h.writeBytes(f, u, f.length - u), h.writeByte(0), h.writeString(";");
              } }, V = function(h) {
                for (var f = 1 << h, u = 1 + (1 << h), y = h + 1, b = q(), k = 0; k < f; k += 1) b.add(String.fromCharCode(k));
                b.add(String.fromCharCode(f)), b.add(String.fromCharCode(u));
                var D, E, T, j = xt(), O = (D = j, E = 0, T = 0, { write: function(Q, L) {
                  if (Q >>> L) throw "length over";
                  for (; E + L >= 8; ) D.writeByte(255 & (Q << E | T)), L -= 8 - E, Q >>>= 8 - E, T = 0, E = 0;
                  T |= Q << E, E += L;
                }, flush: function() {
                  E > 0 && D.writeByte(T);
                } });
                O.write(f, y);
                var X = 0, G = String.fromCharCode(M[X]);
                for (X += 1; X < M.length; ) {
                  var W = String.fromCharCode(M[X]);
                  X += 1, b.contains(G + W) ? G += W : (O.write(b.indexOf(G), y), b.size() < 4095 && (b.size() == 1 << y && (y += 1), b.add(G + W)), G = W);
                }
                return O.write(b.indexOf(G), y), O.write(u, y), O.flush(), j.toByteArray();
              }, q = function() {
                var h = {}, f = 0, u = { add: function(y) {
                  if (u.contains(y)) throw "dup key:" + y;
                  h[y] = f, f += 1;
                }, size: function() {
                  return f;
                }, indexOf: function(y) {
                  return h[y];
                }, contains: function(y) {
                  return h[y] !== void 0;
                } };
                return u;
              };
              return F;
            }(t, o), r = 0; r < o; r += 1) for (var l = 0; l < t; l += 1) e.setPixel(l, r, i(l, r));
            var c = xt();
            e.write(c);
            for (var p = function() {
              var _ = 0, C = 0, z = 0, H = "", M = {}, F = function(q) {
                H += String.fromCharCode(V(63 & q));
              }, V = function(q) {
                if (!(q < 0)) {
                  if (q < 26) return 65 + q;
                  if (q < 52) return q - 26 + 97;
                  if (q < 62) return q - 52 + 48;
                  if (q == 62) return 43;
                  if (q == 63) return 47;
                }
                throw "n:" + q;
              };
              return M.writeByte = function(q) {
                for (_ = _ << 8 | 255 & q, C += 8, z += 1; C >= 6; ) F(_ >>> C - 6), C -= 6;
              }, M.flush = function() {
                if (C > 0 && (F(_ << 6 - C), _ = 0, C = 0), z % 3 != 0) for (var q = 3 - z % 3, h = 0; h < q; h += 1) H += "=";
              }, M.toString = function() {
                return H;
              }, M;
            }(), m = c.toByteArray(), S = 0; S < m.length; S += 1) p.writeByte(m[S]);
            return p.flush(), "data:image/gif;base64," + p;
          };
          return Y;
        }();
        U.stringToBytesFuncs["UTF-8"] = function(Y) {
          return function(K) {
            for (var Z = [], I = 0; I < K.length; I++) {
              var $ = K.charCodeAt(I);
              $ < 128 ? Z.push($) : $ < 2048 ? Z.push(192 | $ >> 6, 128 | 63 & $) : $ < 55296 || $ >= 57344 ? Z.push(224 | $ >> 12, 128 | $ >> 6 & 63, 128 | 63 & $) : (I++, $ = 65536 + ((1023 & $) << 10 | 1023 & K.charCodeAt(I)), Z.push(240 | $ >> 18, 128 | $ >> 12 & 63, 128 | $ >> 6 & 63, 128 | 63 & $));
            }
            return Z;
          }(Y);
        }, (B = typeof (A = function() {
          return U;
        }) == "function" ? A.apply(x, []) : A) === void 0 || (v.exports = B);
      } }, a = {};
      function w(v) {
        var x = a[v];
        if (x !== void 0) return x.exports;
        var A = a[v] = { exports: {} };
        return d[v](A, A.exports, w), A.exports;
      }
      w.n = (v) => {
        var x = v && v.__esModule ? () => v.default : () => v;
        return w.d(x, { a: x }), x;
      }, w.d = (v, x) => {
        for (var A in x) w.o(x, A) && !w.o(v, A) && Object.defineProperty(v, A, { enumerable: !0, get: x[A] });
      }, w.o = (v, x) => Object.prototype.hasOwnProperty.call(v, x);
      var g = {};
      return (() => {
        w.d(g, { default: () => xt });
        const v = (P) => !!P && typeof P == "object" && !Array.isArray(P);
        function x(P, ...n) {
          if (!n.length) return P;
          const t = n.shift();
          return t !== void 0 && v(P) && v(t) ? (P = Object.assign({}, P), Object.keys(t).forEach((o) => {
            const i = P[o], e = t[o];
            Array.isArray(i) && Array.isArray(e) ? P[o] = e : v(i) && v(e) ? P[o] = x(Object.assign({}, i), e) : P[o] = e;
          }), x(P, ...n)) : P;
        }
        function A(P, n) {
          const t = document.createElement("a");
          t.download = n, t.href = P, document.body.appendChild(t), t.click(), document.body.removeChild(t);
        }
        const B = { L: 0.07, M: 0.15, Q: 0.25, H: 0.3 };
        class U {
          constructor({ svg: n, type: t, window: o }) {
            this._svg = n, this._type = t, this._window = o;
          }
          draw(n, t, o, i) {
            let e;
            switch (this._type) {
              case "dots":
                e = this._drawDot;
                break;
              case "classy":
                e = this._drawClassy;
                break;
              case "classy-rounded":
                e = this._drawClassyRounded;
                break;
              case "rounded":
                e = this._drawRounded;
                break;
              case "extra-rounded":
                e = this._drawExtraRounded;
                break;
              default:
                e = this._drawSquare;
            }
            e.call(this, { x: n, y: t, size: o, getNeighbor: i });
          }
          _rotateFigure({ x: n, y: t, size: o, rotation: i = 0, draw: e }) {
            var r;
            const l = n + o / 2, c = t + o / 2;
            e(), (r = this._element) === null || r === void 0 || r.setAttribute("transform", `rotate(${180 * i / Math.PI},${l},${c})`);
          }
          _basicDot(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "circle"), this._element.setAttribute("cx", String(o + t / 2)), this._element.setAttribute("cy", String(i + t / 2)), this._element.setAttribute("r", String(t / 2));
            } }));
          }
          _basicSquare(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect"), this._element.setAttribute("x", String(o)), this._element.setAttribute("y", String(i)), this._element.setAttribute("width", String(t)), this._element.setAttribute("height", String(t));
            } }));
          }
          _basicSideRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ` + t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, 0 ${-t}`);
            } }));
          }
          _basicCornerRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ${t}v ` + -t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, ${-t / 2} ${-t / 2}`);
            } }));
          }
          _basicCornerExtraRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ${t}a ${t} ${t}, 0, 0, 0, ${-t} ${-t}`);
            } }));
          }
          _basicCornersRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ` + t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, ${t / 2} ${t / 2}h ` + t / 2 + "v " + -t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, ${-t / 2} ${-t / 2}`);
            } }));
          }
          _drawDot({ x: n, y: t, size: o }) {
            this._basicDot({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawSquare({ x: n, y: t, size: o }) {
            this._basicSquare({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawRounded({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, r = i ? +i(1, 0) : 0, l = i ? +i(0, -1) : 0, c = i ? +i(0, 1) : 0, p = e + r + l + c;
            if (p !== 0) if (p > 2 || e && r || l && c) this._basicSquare({ x: n, y: t, size: o, rotation: 0 });
            else {
              if (p === 2) {
                let m = 0;
                return e && l ? m = Math.PI / 2 : l && r ? m = Math.PI : r && c && (m = -Math.PI / 2), void this._basicCornerRounded({ x: n, y: t, size: o, rotation: m });
              }
              if (p === 1) {
                let m = 0;
                return l ? m = Math.PI / 2 : r ? m = Math.PI : c && (m = -Math.PI / 2), void this._basicSideRounded({ x: n, y: t, size: o, rotation: m });
              }
            }
            else this._basicDot({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawExtraRounded({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, r = i ? +i(1, 0) : 0, l = i ? +i(0, -1) : 0, c = i ? +i(0, 1) : 0, p = e + r + l + c;
            if (p !== 0) if (p > 2 || e && r || l && c) this._basicSquare({ x: n, y: t, size: o, rotation: 0 });
            else {
              if (p === 2) {
                let m = 0;
                return e && l ? m = Math.PI / 2 : l && r ? m = Math.PI : r && c && (m = -Math.PI / 2), void this._basicCornerExtraRounded({ x: n, y: t, size: o, rotation: m });
              }
              if (p === 1) {
                let m = 0;
                return l ? m = Math.PI / 2 : r ? m = Math.PI : c && (m = -Math.PI / 2), void this._basicSideRounded({ x: n, y: t, size: o, rotation: m });
              }
            }
            else this._basicDot({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawClassy({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, r = i ? +i(1, 0) : 0, l = i ? +i(0, -1) : 0, c = i ? +i(0, 1) : 0;
            e + r + l + c !== 0 ? e || l ? r || c ? this._basicSquare({ x: n, y: t, size: o, rotation: 0 }) : this._basicCornerRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 }) : this._basicCornerRounded({ x: n, y: t, size: o, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 });
          }
          _drawClassyRounded({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, r = i ? +i(1, 0) : 0, l = i ? +i(0, -1) : 0, c = i ? +i(0, 1) : 0;
            e + r + l + c !== 0 ? e || l ? r || c ? this._basicSquare({ x: n, y: t, size: o, rotation: 0 }) : this._basicCornerExtraRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 }) : this._basicCornerExtraRounded({ x: n, y: t, size: o, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 });
          }
        }
        class Y {
          constructor({ svg: n, type: t, window: o }) {
            this._svg = n, this._type = t, this._window = o;
          }
          draw(n, t, o, i) {
            let e;
            switch (this._type) {
              case "square":
                e = this._drawSquare;
                break;
              case "extra-rounded":
                e = this._drawExtraRounded;
                break;
              default:
                e = this._drawDot;
            }
            e.call(this, { x: n, y: t, size: o, rotation: i });
          }
          _rotateFigure({ x: n, y: t, size: o, rotation: i = 0, draw: e }) {
            var r;
            const l = n + o / 2, c = t + o / 2;
            e(), (r = this._element) === null || r === void 0 || r.setAttribute("transform", `rotate(${180 * i / Math.PI},${l},${c})`);
          }
          _basicDot(n) {
            const { size: t, x: o, y: i } = n, e = t / 7;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${o + t / 2} ${i}a ${t / 2} ${t / 2} 0 1 0 0.1 0zm 0 ${e}a ${t / 2 - e} ${t / 2 - e} 0 1 1 -0.1 0Z`);
            } }));
          }
          _basicSquare(n) {
            const { size: t, x: o, y: i } = n, e = t / 7;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ${t}v ` + -t + `zM ${o + e} ${i + e}h ` + (t - 2 * e) + "v " + (t - 2 * e) + "h " + (2 * e - t) + "z");
            } }));
          }
          _basicExtraRounded(n) {
            const { size: t, x: o, y: i } = n, e = t / 7;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${o} ${i + 2.5 * e}v ` + 2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * e} ${2.5 * e}h ` + 2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * e} ${2.5 * -e}v ` + -2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * -e} ${2.5 * -e}h ` + -2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * -e} ${2.5 * e}M ${o + 2.5 * e} ${i + e}h ` + 2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * e} ${1.5 * e}v ` + 2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * -e} ${1.5 * e}h ` + -2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * -e} ${1.5 * -e}v ` + -2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * e} ${1.5 * -e}`);
            } }));
          }
          _drawDot({ x: n, y: t, size: o, rotation: i }) {
            this._basicDot({ x: n, y: t, size: o, rotation: i });
          }
          _drawSquare({ x: n, y: t, size: o, rotation: i }) {
            this._basicSquare({ x: n, y: t, size: o, rotation: i });
          }
          _drawExtraRounded({ x: n, y: t, size: o, rotation: i }) {
            this._basicExtraRounded({ x: n, y: t, size: o, rotation: i });
          }
        }
        class K {
          constructor({ svg: n, type: t, window: o }) {
            this._svg = n, this._type = t, this._window = o;
          }
          draw(n, t, o, i) {
            let e;
            e = this._type === "square" ? this._drawSquare : this._drawDot, e.call(this, { x: n, y: t, size: o, rotation: i });
          }
          _rotateFigure({ x: n, y: t, size: o, rotation: i = 0, draw: e }) {
            var r;
            const l = n + o / 2, c = t + o / 2;
            e(), (r = this._element) === null || r === void 0 || r.setAttribute("transform", `rotate(${180 * i / Math.PI},${l},${c})`);
          }
          _basicDot(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "circle"), this._element.setAttribute("cx", String(o + t / 2)), this._element.setAttribute("cy", String(i + t / 2)), this._element.setAttribute("r", String(t / 2));
            } }));
          }
          _basicSquare(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect"), this._element.setAttribute("x", String(o)), this._element.setAttribute("y", String(i)), this._element.setAttribute("width", String(t)), this._element.setAttribute("height", String(t));
            } }));
          }
          _drawDot({ x: n, y: t, size: o, rotation: i }) {
            this._basicDot({ x: n, y: t, size: o, rotation: i });
          }
          _drawSquare({ x: n, y: t, size: o, rotation: i }) {
            this._basicSquare({ x: n, y: t, size: o, rotation: i });
          }
        }
        const Z = "circle", I = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]], $ = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        class tt {
          constructor(n, t) {
            this._roundSize = (o) => this._options.dotsOptions.roundSize ? Math.floor(o) : o, this._window = t, this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "svg"), this._element.setAttribute("width", String(n.width)), this._element.setAttribute("height", String(n.height)), this._element.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n.dotsOptions.roundSize || this._element.setAttribute("shape-rendering", "crispEdges"), this._element.setAttribute("viewBox", `0 0 ${n.width} ${n.height}`), this._defs = this._window.document.createElementNS("http://www.w3.org/2000/svg", "defs"), this._element.appendChild(this._defs), this._imageUri = n.image, this._instanceId = tt.instanceCount++, this._options = n;
          }
          get width() {
            return this._options.width;
          }
          get height() {
            return this._options.height;
          }
          getElement() {
            return this._element;
          }
          async drawQR(n) {
            const t = n.getModuleCount(), o = Math.min(this._options.width, this._options.height) - 2 * this._options.margin, i = this._options.shape === Z ? o / Math.sqrt(2) : o, e = this._roundSize(i / t);
            let r = { hideXDots: 0, hideYDots: 0, width: 0, height: 0 };
            if (this._qr = n, this._options.image) {
              if (await this.loadImage(), !this._image) return;
              const { imageOptions: l, qrOptions: c } = this._options, p = l.imageSize * B[c.errorCorrectionLevel], m = Math.floor(p * t * t);
              r = function({ originalHeight: S, originalWidth: _, maxHiddenDots: C, maxHiddenAxisDots: z, dotSize: H }) {
                const M = { x: 0, y: 0 }, F = { x: 0, y: 0 };
                if (S <= 0 || _ <= 0 || C <= 0 || H <= 0) return { height: 0, width: 0, hideYDots: 0, hideXDots: 0 };
                const V = S / _;
                return M.x = Math.floor(Math.sqrt(C / V)), M.x <= 0 && (M.x = 1), z && z < M.x && (M.x = z), M.x % 2 == 0 && M.x--, F.x = M.x * H, M.y = 1 + 2 * Math.ceil((M.x * V - 1) / 2), F.y = Math.round(F.x * V), (M.y * M.x > C || z && z < M.y) && (z && z < M.y ? (M.y = z, M.y % 2 == 0 && M.x--) : M.y -= 2, F.y = M.y * H, M.x = 1 + 2 * Math.ceil((M.y / V - 1) / 2), F.x = Math.round(F.y / V)), { height: F.y, width: F.x, hideYDots: M.y, hideXDots: M.x };
              }({ originalWidth: this._image.width, originalHeight: this._image.height, maxHiddenDots: m, maxHiddenAxisDots: t - 14, dotSize: e });
            }
            this.drawBackground(), this.drawDots((l, c) => {
              var p, m, S, _, C, z;
              return !(this._options.imageOptions.hideBackgroundDots && l >= (t - r.hideYDots) / 2 && l < (t + r.hideYDots) / 2 && c >= (t - r.hideXDots) / 2 && c < (t + r.hideXDots) / 2 || !((p = I[l]) === null || p === void 0) && p[c] || !((m = I[l - t + 7]) === null || m === void 0) && m[c] || !((S = I[l]) === null || S === void 0) && S[c - t + 7] || !((_ = $[l]) === null || _ === void 0) && _[c] || !((C = $[l - t + 7]) === null || C === void 0) && C[c] || !((z = $[l]) === null || z === void 0) && z[c - t + 7]);
            }), this.drawCorners(), this._options.image && await this.drawImage({ width: r.width, height: r.height, count: t, dotSize: e });
          }
          drawBackground() {
            var n, t, o;
            const i = this._element, e = this._options;
            if (i) {
              const r = (n = e.backgroundOptions) === null || n === void 0 ? void 0 : n.gradient, l = (t = e.backgroundOptions) === null || t === void 0 ? void 0 : t.color;
              let c = e.height, p = e.width;
              if (r || l) {
                const m = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
                this._backgroundClipPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._backgroundClipPath.setAttribute("id", `clip-path-background-color-${this._instanceId}`), this._defs.appendChild(this._backgroundClipPath), !((o = e.backgroundOptions) === null || o === void 0) && o.round && (c = p = Math.min(e.width, e.height), m.setAttribute("rx", String(c / 2 * e.backgroundOptions.round))), m.setAttribute("x", String(this._roundSize((e.width - p) / 2))), m.setAttribute("y", String(this._roundSize((e.height - c) / 2))), m.setAttribute("width", String(p)), m.setAttribute("height", String(c)), this._backgroundClipPath.appendChild(m), this._createColor({ options: r, color: l, additionalRotation: 0, x: 0, y: 0, height: e.height, width: e.width, name: `background-color-${this._instanceId}` });
              }
            }
          }
          drawDots(n) {
            var t, o;
            if (!this._qr) throw "QR code is not defined";
            const i = this._options, e = this._qr.getModuleCount();
            if (e > i.width || e > i.height) throw "The canvas is too small.";
            const r = Math.min(i.width, i.height) - 2 * i.margin, l = i.shape === Z ? r / Math.sqrt(2) : r, c = this._roundSize(l / e), p = this._roundSize((i.width - e * c) / 2), m = this._roundSize((i.height - e * c) / 2), S = new U({ svg: this._element, type: i.dotsOptions.type, window: this._window });
            this._dotsClipPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._dotsClipPath.setAttribute("id", `clip-path-dot-color-${this._instanceId}`), this._defs.appendChild(this._dotsClipPath), this._createColor({ options: (t = i.dotsOptions) === null || t === void 0 ? void 0 : t.gradient, color: i.dotsOptions.color, additionalRotation: 0, x: 0, y: 0, height: i.height, width: i.width, name: `dot-color-${this._instanceId}` });
            for (let _ = 0; _ < e; _++) for (let C = 0; C < e; C++) n && !n(_, C) || !((o = this._qr) === null || o === void 0) && o.isDark(_, C) && (S.draw(p + C * c, m + _ * c, c, (z, H) => !(C + z < 0 || _ + H < 0 || C + z >= e || _ + H >= e) && !(n && !n(_ + H, C + z)) && !!this._qr && this._qr.isDark(_ + H, C + z)), S._element && this._dotsClipPath && this._dotsClipPath.appendChild(S._element));
            if (i.shape === Z) {
              const _ = this._roundSize((r / c - e) / 2), C = e + 2 * _, z = p - _ * c, H = m - _ * c, M = [], F = this._roundSize(C / 2);
              for (let V = 0; V < C; V++) {
                M[V] = [];
                for (let q = 0; q < C; q++) V >= _ - 1 && V <= C - _ && q >= _ - 1 && q <= C - _ || Math.sqrt((V - F) * (V - F) + (q - F) * (q - F)) > F ? M[V][q] = 0 : M[V][q] = this._qr.isDark(q - 2 * _ < 0 ? q : q >= e ? q - 2 * _ : q - _, V - 2 * _ < 0 ? V : V >= e ? V - 2 * _ : V - _) ? 1 : 0;
              }
              for (let V = 0; V < C; V++) for (let q = 0; q < C; q++) M[V][q] && (S.draw(z + q * c, H + V * c, c, (h, f) => {
                var u;
                return !!(!((u = M[V + f]) === null || u === void 0) && u[q + h]);
              }), S._element && this._dotsClipPath && this._dotsClipPath.appendChild(S._element));
            }
          }
          drawCorners() {
            if (!this._qr) throw "QR code is not defined";
            const n = this._element, t = this._options;
            if (!n) throw "Element code is not defined";
            const o = this._qr.getModuleCount(), i = Math.min(t.width, t.height) - 2 * t.margin, e = t.shape === Z ? i / Math.sqrt(2) : i, r = this._roundSize(e / o), l = 7 * r, c = 3 * r, p = this._roundSize((t.width - o * r) / 2), m = this._roundSize((t.height - o * r) / 2);
            [[0, 0, 0], [1, 0, Math.PI / 2], [0, 1, -Math.PI / 2]].forEach(([S, _, C]) => {
              var z, H, M, F, V, q, h, f, u, y, b, k;
              const D = p + S * r * (o - 7), E = m + _ * r * (o - 7);
              let T = this._dotsClipPath, j = this._dotsClipPath;
              if ((!((z = t.cornersSquareOptions) === null || z === void 0) && z.gradient || !((H = t.cornersSquareOptions) === null || H === void 0) && H.color) && (T = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), T.setAttribute("id", `clip-path-corners-square-color-${S}-${_}-${this._instanceId}`), this._defs.appendChild(T), this._cornersSquareClipPath = this._cornersDotClipPath = j = T, this._createColor({ options: (M = t.cornersSquareOptions) === null || M === void 0 ? void 0 : M.gradient, color: (F = t.cornersSquareOptions) === null || F === void 0 ? void 0 : F.color, additionalRotation: C, x: D, y: E, height: l, width: l, name: `corners-square-color-${S}-${_}-${this._instanceId}` })), (V = t.cornersSquareOptions) === null || V === void 0 ? void 0 : V.type) {
                const O = new Y({ svg: this._element, type: t.cornersSquareOptions.type, window: this._window });
                O.draw(D, E, l, C), O._element && T && T.appendChild(O._element);
              } else {
                const O = new U({ svg: this._element, type: t.dotsOptions.type, window: this._window });
                for (let X = 0; X < I.length; X++) for (let G = 0; G < I[X].length; G++) !((q = I[X]) === null || q === void 0) && q[G] && (O.draw(D + G * r, E + X * r, r, (W, Q) => {
                  var L;
                  return !!(!((L = I[X + Q]) === null || L === void 0) && L[G + W]);
                }), O._element && T && T.appendChild(O._element));
              }
              if ((!((h = t.cornersDotOptions) === null || h === void 0) && h.gradient || !((f = t.cornersDotOptions) === null || f === void 0) && f.color) && (j = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), j.setAttribute("id", `clip-path-corners-dot-color-${S}-${_}-${this._instanceId}`), this._defs.appendChild(j), this._cornersDotClipPath = j, this._createColor({ options: (u = t.cornersDotOptions) === null || u === void 0 ? void 0 : u.gradient, color: (y = t.cornersDotOptions) === null || y === void 0 ? void 0 : y.color, additionalRotation: C, x: D + 2 * r, y: E + 2 * r, height: c, width: c, name: `corners-dot-color-${S}-${_}-${this._instanceId}` })), (b = t.cornersDotOptions) === null || b === void 0 ? void 0 : b.type) {
                const O = new K({ svg: this._element, type: t.cornersDotOptions.type, window: this._window });
                O.draw(D + 2 * r, E + 2 * r, c, C), O._element && j && j.appendChild(O._element);
              } else {
                const O = new U({ svg: this._element, type: t.dotsOptions.type, window: this._window });
                for (let X = 0; X < $.length; X++) for (let G = 0; G < $[X].length; G++) !((k = $[X]) === null || k === void 0) && k[G] && (O.draw(D + G * r, E + X * r, r, (W, Q) => {
                  var L;
                  return !!(!((L = $[X + Q]) === null || L === void 0) && L[G + W]);
                }), O._element && j && j.appendChild(O._element));
              }
            });
          }
          loadImage() {
            return new Promise((n, t) => {
              var o;
              const i = this._options;
              if (!i.image) return t("Image is not defined");
              if (!((o = i.nodeCanvas) === null || o === void 0) && o.loadImage) i.nodeCanvas.loadImage(i.image).then((e) => {
                var r, l;
                if (this._image = e, this._options.imageOptions.saveAsBlob) {
                  const c = (r = i.nodeCanvas) === null || r === void 0 ? void 0 : r.createCanvas(this._image.width, this._image.height);
                  (l = c == null ? void 0 : c.getContext("2d")) === null || l === void 0 || l.drawImage(e, 0, 0), this._imageUri = c == null ? void 0 : c.toDataURL();
                }
                n();
              }).catch(t);
              else {
                const e = new this._window.Image();
                typeof i.imageOptions.crossOrigin == "string" && (e.crossOrigin = i.imageOptions.crossOrigin), this._image = e, e.onload = async () => {
                  this._options.imageOptions.saveAsBlob && (this._imageUri = await async function(r, l) {
                    return new Promise((c) => {
                      const p = new l.XMLHttpRequest();
                      p.onload = function() {
                        const m = new l.FileReader();
                        m.onloadend = function() {
                          c(m.result);
                        }, m.readAsDataURL(p.response);
                      }, p.open("GET", r), p.responseType = "blob", p.send();
                    });
                  }(i.image || "", this._window)), n();
                }, e.src = i.image;
              }
            });
          }
          async drawImage({ width: n, height: t, count: o, dotSize: i }) {
            const e = this._options, r = this._roundSize((e.width - o * i) / 2), l = this._roundSize((e.height - o * i) / 2), c = r + this._roundSize(e.imageOptions.margin + (o * i - n) / 2), p = l + this._roundSize(e.imageOptions.margin + (o * i - t) / 2), m = n - 2 * e.imageOptions.margin, S = t - 2 * e.imageOptions.margin, _ = this._window.document.createElementNS("http://www.w3.org/2000/svg", "image");
            _.setAttribute("href", this._imageUri || ""), _.setAttribute("x", String(c)), _.setAttribute("y", String(p)), _.setAttribute("width", `${m}px`), _.setAttribute("height", `${S}px`), this._element.appendChild(_);
          }
          _createColor({ options: n, color: t, additionalRotation: o, x: i, y: e, height: r, width: l, name: c }) {
            const p = l > r ? l : r, m = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
            if (m.setAttribute("x", String(i)), m.setAttribute("y", String(e)), m.setAttribute("height", String(r)), m.setAttribute("width", String(l)), m.setAttribute("clip-path", `url('#clip-path-${c}')`), n) {
              let S;
              if (n.type === "radial") S = this._window.document.createElementNS("http://www.w3.org/2000/svg", "radialGradient"), S.setAttribute("id", c), S.setAttribute("gradientUnits", "userSpaceOnUse"), S.setAttribute("fx", String(i + l / 2)), S.setAttribute("fy", String(e + r / 2)), S.setAttribute("cx", String(i + l / 2)), S.setAttribute("cy", String(e + r / 2)), S.setAttribute("r", String(p / 2));
              else {
                const _ = ((n.rotation || 0) + o) % (2 * Math.PI), C = (_ + 2 * Math.PI) % (2 * Math.PI);
                let z = i + l / 2, H = e + r / 2, M = i + l / 2, F = e + r / 2;
                C >= 0 && C <= 0.25 * Math.PI || C > 1.75 * Math.PI && C <= 2 * Math.PI ? (z -= l / 2, H -= r / 2 * Math.tan(_), M += l / 2, F += r / 2 * Math.tan(_)) : C > 0.25 * Math.PI && C <= 0.75 * Math.PI ? (H -= r / 2, z -= l / 2 / Math.tan(_), F += r / 2, M += l / 2 / Math.tan(_)) : C > 0.75 * Math.PI && C <= 1.25 * Math.PI ? (z += l / 2, H += r / 2 * Math.tan(_), M -= l / 2, F -= r / 2 * Math.tan(_)) : C > 1.25 * Math.PI && C <= 1.75 * Math.PI && (H += r / 2, z += l / 2 / Math.tan(_), F -= r / 2, M -= l / 2 / Math.tan(_)), S = this._window.document.createElementNS("http://www.w3.org/2000/svg", "linearGradient"), S.setAttribute("id", c), S.setAttribute("gradientUnits", "userSpaceOnUse"), S.setAttribute("x1", String(Math.round(z))), S.setAttribute("y1", String(Math.round(H))), S.setAttribute("x2", String(Math.round(M))), S.setAttribute("y2", String(Math.round(F)));
              }
              n.colorStops.forEach(({ offset: _, color: C }) => {
                const z = this._window.document.createElementNS("http://www.w3.org/2000/svg", "stop");
                z.setAttribute("offset", 100 * _ + "%"), z.setAttribute("stop-color", C), S.appendChild(z);
              }), m.setAttribute("fill", `url('#${c}')`), this._defs.appendChild(S);
            } else t && m.setAttribute("fill", t);
            this._element.appendChild(m);
          }
        }
        tt.instanceCount = 0;
        const dt = tt, et = "canvas", it = {};
        for (let P = 0; P <= 40; P++) it[P] = P;
        const rt = { type: et, shape: "square", width: 300, height: 300, data: "", margin: 0, qrOptions: { typeNumber: it[0], mode: void 0, errorCorrectionLevel: "Q" }, imageOptions: { saveAsBlob: !0, hideBackgroundDots: !0, imageSize: 0.4, crossOrigin: void 0, margin: 0 }, dotsOptions: { type: "square", color: "#000", roundSize: !0 }, backgroundOptions: { round: 0, color: "#fff" } };
        function ct(P) {
          const n = Object.assign({}, P);
          if (!n.colorStops || !n.colorStops.length) throw "Field 'colorStops' is required in gradient";
          return n.rotation ? n.rotation = Number(n.rotation) : n.rotation = 0, n.colorStops = n.colorStops.map((t) => Object.assign(Object.assign({}, t), { offset: Number(t.offset) })), n;
        }
        function mt(P) {
          const n = Object.assign({}, P);
          return n.width = Number(n.width), n.height = Number(n.height), n.margin = Number(n.margin), n.imageOptions = Object.assign(Object.assign({}, n.imageOptions), { hideBackgroundDots: !!n.imageOptions.hideBackgroundDots, imageSize: Number(n.imageOptions.imageSize), margin: Number(n.imageOptions.margin) }), n.margin > Math.min(n.width, n.height) && (n.margin = Math.min(n.width, n.height)), n.dotsOptions = Object.assign({}, n.dotsOptions), n.dotsOptions.gradient && (n.dotsOptions.gradient = ct(n.dotsOptions.gradient)), n.cornersSquareOptions && (n.cornersSquareOptions = Object.assign({}, n.cornersSquareOptions), n.cornersSquareOptions.gradient && (n.cornersSquareOptions.gradient = ct(n.cornersSquareOptions.gradient))), n.cornersDotOptions && (n.cornersDotOptions = Object.assign({}, n.cornersDotOptions), n.cornersDotOptions.gradient && (n.cornersDotOptions.gradient = ct(n.cornersDotOptions.gradient))), n.backgroundOptions && (n.backgroundOptions = Object.assign({}, n.backgroundOptions), n.backgroundOptions.gradient && (n.backgroundOptions.gradient = ct(n.backgroundOptions.gradient))), n;
        }
        var Mt = w(873), At = w.n(Mt);
        function ut(P) {
          if (!P) throw new Error("Extension must be defined");
          P[0] === "." && (P = P.substring(1));
          const n = { bmp: "image/bmp", gif: "image/gif", ico: "image/vnd.microsoft.icon", jpeg: "image/jpeg", jpg: "image/jpeg", png: "image/png", svg: "image/svg+xml", tif: "image/tiff", tiff: "image/tiff", webp: "image/webp", pdf: "application/pdf" }[P.toLowerCase()];
          if (!n) throw new Error(`Extension "${P}" is not supported`);
          return n;
        }
        class wt {
          constructor(n) {
            n != null && n.jsdom ? this._window = new n.jsdom("", { resources: "usable" }).window : this._window = window, this._options = n ? mt(x(rt, n)) : rt, this.update();
          }
          static _clearContainer(n) {
            n && (n.innerHTML = "");
          }
          _setupSvg() {
            if (!this._qr) return;
            const n = new dt(this._options, this._window);
            this._svg = n.getElement(), this._svgDrawingPromise = n.drawQR(this._qr).then(() => {
              var t;
              this._svg && ((t = this._extension) === null || t === void 0 || t.call(this, n.getElement(), this._options));
            });
          }
          _setupCanvas() {
            var n, t;
            this._qr && (!((n = this._options.nodeCanvas) === null || n === void 0) && n.createCanvas ? (this._nodeCanvas = this._options.nodeCanvas.createCanvas(this._options.width, this._options.height), this._nodeCanvas.width = this._options.width, this._nodeCanvas.height = this._options.height) : (this._domCanvas = document.createElement("canvas"), this._domCanvas.width = this._options.width, this._domCanvas.height = this._options.height), this._setupSvg(), this._canvasDrawingPromise = (t = this._svgDrawingPromise) === null || t === void 0 ? void 0 : t.then(() => {
              var o;
              if (!this._svg) return;
              const i = this._svg, e = new this._window.XMLSerializer().serializeToString(i), r = btoa(e), l = `data:${ut("svg")};base64,${r}`;
              if (!((o = this._options.nodeCanvas) === null || o === void 0) && o.loadImage) return this._options.nodeCanvas.loadImage(l).then((c) => {
                var p, m;
                c.width = this._options.width, c.height = this._options.height, (m = (p = this._nodeCanvas) === null || p === void 0 ? void 0 : p.getContext("2d")) === null || m === void 0 || m.drawImage(c, 0, 0);
              });
              {
                const c = new this._window.Image();
                return new Promise((p) => {
                  c.onload = () => {
                    var m, S;
                    (S = (m = this._domCanvas) === null || m === void 0 ? void 0 : m.getContext("2d")) === null || S === void 0 || S.drawImage(c, 0, 0), p();
                  }, c.src = l;
                });
              }
            }));
          }
          async _getElement(n = "png") {
            if (!this._qr) throw "QR code is empty";
            return n.toLowerCase() === "svg" ? (this._svg && this._svgDrawingPromise || this._setupSvg(), await this._svgDrawingPromise, this._svg) : ((this._domCanvas || this._nodeCanvas) && this._canvasDrawingPromise || this._setupCanvas(), await this._canvasDrawingPromise, this._domCanvas || this._nodeCanvas);
          }
          update(n) {
            wt._clearContainer(this._container), this._options = n ? mt(x(this._options, n)) : this._options, this._options.data && (this._qr = At()(this._options.qrOptions.typeNumber, this._options.qrOptions.errorCorrectionLevel), this._qr.addData(this._options.data, this._options.qrOptions.mode || function(t) {
              switch (!0) {
                case /^[0-9]*$/.test(t):
                  return "Numeric";
                case /^[0-9A-Z $%*+\-./:]*$/.test(t):
                  return "Alphanumeric";
                default:
                  return "Byte";
              }
            }(this._options.data)), this._qr.make(), this._options.type === et ? this._setupCanvas() : this._setupSvg(), this.append(this._container));
          }
          append(n) {
            if (n) {
              if (typeof n.appendChild != "function") throw "Container should be a single DOM node";
              this._options.type === et ? this._domCanvas && n.appendChild(this._domCanvas) : this._svg && n.appendChild(this._svg), this._container = n;
            }
          }
          applyExtension(n) {
            if (!n) throw "Extension function should be defined.";
            this._extension = n, this.update();
          }
          deleteExtension() {
            this._extension = void 0, this.update();
          }
          async getRawData(n = "png") {
            if (!this._qr) throw "QR code is empty";
            const t = await this._getElement(n), o = ut(n);
            if (!t) return null;
            if (n.toLowerCase() === "svg") {
              const i = `<?xml version="1.0" standalone="no"?>\r
${new this._window.XMLSerializer().serializeToString(t)}`;
              return typeof Blob > "u" || this._options.jsdom ? Buffer.from(i) : new Blob([i], { type: o });
            }
            return new Promise((i) => {
              const e = t;
              if ("toBuffer" in e) if (o === "image/png") i(e.toBuffer(o));
              else if (o === "image/jpeg") i(e.toBuffer(o));
              else {
                if (o !== "application/pdf") throw Error("Unsupported extension");
                i(e.toBuffer(o));
              }
              else "toBlob" in e && e.toBlob(i, o, 1);
            });
          }
          async download(n) {
            if (!this._qr) throw "QR code is empty";
            if (typeof Blob > "u") throw "Cannot download in Node.js, call getRawData instead.";
            let t = "png", o = "qr";
            typeof n == "string" ? (t = n, console.warn("Extension is deprecated as argument for 'download' method, please pass object { name: '...', extension: '...' } as argument")) : typeof n == "object" && n !== null && (n.name && (o = n.name), n.extension && (t = n.extension));
            const i = await this._getElement(t);
            if (i) if (t.toLowerCase() === "svg") {
              let e = new XMLSerializer().serializeToString(i);
              e = `<?xml version="1.0" standalone="no"?>\r
` + e, A(`data:${ut(t)};charset=utf-8,${encodeURIComponent(e)}`, `${o}.svg`);
            } else A(i.toDataURL(ut(t)), `${o}.${t}`);
          }
        }
        const xt = wt;
      })(), g.default;
    })());
  }(kt)), kt.exports;
}
var Vt = jt();
const Tt = /* @__PURE__ */ It(Vt), Lt = () => `
        <!-- Template for hotspots -->
        <button data-hotspot slot="hotspot-dot+X-Y+Z" class="dot" data-position="1 -1 1" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dim+X-Y" class="dim" data-position="1 -1 0" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dot+X-Y-Z" class="dot" data-position="1 -1 -1" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dim+X-Z" class="dim" data-position="1 0 -1" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dot+X+Y-Z" class="dot" data-position="1 1 -1" data-normal="0 1 0"></button>
        <button data-hotspot slot="hotspot-dim+Y-Z" class="dim" data-position="0 -1 -1" data-normal="0 1 0"></button>
        <button data-hotspot slot="hotspot-dot-X+Y-Z" class="dot" data-position="-1 1 -1" data-normal="0 1 0"></button>
        <button data-hotspot slot="hotspot-dim-X-Z" class="dim" data-position="-1 0 -1" data-normal="-1 0 0"></button>
        <button data-hotspot slot="hotspot-dot-X-Y-Z" class="dot" data-position="-1 -1 -1" data-normal="-1 0 0"></button>
        <button data-hotspot slot="hotspot-dim-X-Y" class="dim" data-position="-1 -1 0" data-normal="-1 0 0"></button>
        <button data-hotspot slot="hotspot-dot-X-Y+Z" class="dot" data-position="-1 -1 1" data-normal="-1 0 0"></button>
        <svg id="dimLines" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" class="dimensionLineContainer">
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
        </svg>
    `;
function $t(R) {
  let s = "";
  function d(g) {
    return g.trim().startsWith("@media");
  }
  function a(g) {
    return g.replace(/([A-Z])/g, "-$1").toLowerCase();
  }
  function w(g, v) {
    let x = "";
    const A = "  ".repeat(v);
    for (const B in g)
      if (Object.prototype.hasOwnProperty.call(g, B)) {
        const U = g[B];
        if (typeof U == "object" && !Array.isArray(U))
          x += `
${A}${B} {`, x += w(U, v + 1), x += `
${A}}`;
        else {
          const Y = a(B);
          x += `
${A}${Y}: ${U};`;
        }
      }
    return x;
  }
  for (const g in R)
    if (Object.prototype.hasOwnProperty.call(R, g)) {
      const v = R[g];
      typeof v == "object" ? (s += `${g} {`, d(g), s += w(v, 1), s += `
}
`) : typeof v == "string" && (s += `${g} {
  ${v}
}
`);
    }
  return s;
}
const pt = "https://cdn.statically.io/gh/ardisplaycorp/bridge/v1.5.6/build", St = "https://ardisplaybridge.vercel.app", Ht = {
  ".normal-view-container": {
    width: "100%",
    height: "100%",
    display: "block",
    fontFamily: "sans-serif",
    position: "relative"
  },
  ".ardisplay-qr-code-button": {
    all: "unset",
    position: "absolute",
    top: "10px",
    right: "50%",
    transform: "translateX(50%)",
    background: "white",
    cursor: "pointer",
    padding: "10px",
    zIndex: "1000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  }
}, Ft = (R, s, d, a, w, g) => {
  const v = $t(Ht), x = Lt();
  return `
        <!-- Template for modal view -->
        <style>${v}</style>
        <div class="normal-view-container">
            <model-viewer
                ar="${R}"
                shadow-intensity="${g.shadow}"
                ar-placement="${g.placement}"
                ar-modes="webxr scene-viewer quick-look"
                ar-scale="fixed"
                camera-controls="true"
                disable-pan="true"
                disable-tap="true"
                interaction-prompt="none"
                interpolation-decay="40"
                touch-action="none"
                max-field-of-view="auto"
                field-of-view="auto"
                camera-orbit="0deg 75deg 105%"
                ar-status="not-presenting"
            >
                ${x}
                <button class="ardisplay-qr-code-button" style="background-color: ${g.arBtn.btnBgColor};color: ${g.arBtn.btnTextColor};border-radius: ${g.arBtn.cornerRadius}px;font-size: ${g.arBtn.btnSize - 6}px;text-wrap: nowrap;">
                    ${g.arBtn.btnIcon ? `<i data-lucide="${g.arBtn.btnIcon}" style="width: 24px; height: 24px;color: inherit;"></i>` : ""}
                    ${g.arBtn.btnText}
                </button>
            </model-viewer>
        </div>
    `;
}, Nt = {
  ".ardisplay-custom-model-viewer-container": {
    position: "relative",
    width: "100%",
    height: "100%",
    display: "block",
    fontFamily: "sans-serif"
  },
  ".ardisplay-preview-image": {
    width: "100%",
    height: "100%",
    objectFit: "cover",
    display: "block"
  },
  ".ardisplay-view-3d-button": {
    bottom: "10px",
    right: "10px",
    padding: "10px 20px",
    backgroundColor: "rgba(0, 0, 0, 0.75)",
    color: "white",
    border: "none",
    borderRadius: "50px",
    cursor: "pointer",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  },
  ".ardisplay-view-3d-button svg": {
    fill: "white"
  }
}, Ut = (R, s, d, a, w, g) => `
        <!-- Template for modal view -->
        <style>${$t(Nt)}</style>
        <div class="ardisplay-custom-model-viewer-container">
            <button class="ardisplay-view-3d-button" style="background-color: ${g.arBtn.btnBgColor};color: ${g.arBtn.btnTextColor};border-radius: ${g.arBtn.cornerRadius}px;font-size: ${g.arBtn.btnSize - 6}px;">
                <svg viewBox="0 0 24 24" focusable="false" width="24" height="24" aria-hidden="true" class="pip-svg-icon pip-btn__icon"><path d="M11 16.9766c.3294.0154.663.0233 1 .0233 2.2351 0 4.3234-.3458 6-.9495 1.7881-.6438 4-1.8975 4-4.0505 0-1.9568-1.8939-3.1985-3.5147-3.864l-1.5605 1.5606C17.8623 9.9943 20 10.7292 20 11.9999c0 .9329-1.2789 1.5728-2 1.8958-1.8614.8335-3.9768 1.1042-6 1.1042-.3392 0-.6729-.0088-1-.0257v-1.9743l-3 3 3 3v2.0233zm2-9.9532A21.3903 21.3903 0 0 0 12.0001 7c-2.235 0-4.3234.3457-6 .9494-1.7881.6438-4 1.8976-4 4.0506 0 1.9568 1.894 3.1984 3.5146 3.8639l1.5606-1.5605C6.1378 14.0057 4 13.2707 4 12.0001c0-.9329 1.2789-1.5729 2-1.8958 1.8614-.8336 3.9767-1.1042 6-1.1042.3392 0 .6729.0087.9999.0257V11l3-3-3-3v2.0234z"></path></svg>
                View in 3D
            </button>
        </div>
    `, Xt = {
  "model-viewer": {
    top: 0,
    left: 0,
    opacity: 0,
    zIndex: -100,
    position: "absolute"
  },
  ".ardisplay-qr-code-button": {
    all: "unset",
    background: "white",
    cursor: "pointer",
    padding: "10px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  }
}, Bt = (R, s, d, a, w, g) => {
  const v = $t(Xt), x = Lt();
  return `
        <!-- Template for modal view -->
        <style>${v}</style>
        <button class="ardisplay-qr-code-button" style="background-color: ${g.arBtn.btnBgColor};color: ${g.arBtn.btnTextColor};border-radius: ${g.arBtn.cornerRadius}px;font-size: ${g.arBtn.btnSize - 6}px;text-wrap: nowrap;">
            ${g.arBtn.btnIcon ? `<i data-lucide="${g.arBtn.btnIcon}" style="width: 24px; height: 24px;color: inherit;"></i>` : ""}
            ${g.arBtn.btnText}
        </button>
        <model-viewer
            ar="${R}"
            shadow-intensity="${g.shadow}"
            ar-placement="${g.placement}"
            ar-modes="webxr scene-viewer quick-look"
            ar-scale="fixed"
            camera-controls="true"
            disable-pan="true"
            disable-tap="true"
            interaction-prompt="none"
            interpolation-decay="40"
            touch-action="none"
            max-field-of-view="auto"
            field-of-view="auto"
            camera-orbit="0deg 75deg 105%"
            ar-status="not-presenting"
        >
            ${x}
        </model-viewer>
    `;
};
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const gt = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Yt = [
  "svg",
  gt,
  [
    ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1" }],
    [
      "path",
      {
        d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3"
      }
    ]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Zt = [
  "svg",
  gt,
  [
    [
      "path",
      {
        d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"
      }
    ],
    ["path", { d: "m3.3 7 8.7 5 8.7-5" }],
    ["path", { d: "M12 22V12" }]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Gt = [
  "svg",
  gt,
  [
    [
      "path",
      {
        d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
      }
    ],
    ["circle", { cx: "12", cy: "12", r: "3" }]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Qt = [
  "svg",
  gt,
  [
    ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" }],
    ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { d: "m8 18 4-4" }],
    ["path", { d: "M8 10v8h8" }]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Wt = [
  "svg",
  gt,
  [
    [
      "path",
      {
        d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"
      }
    ],
    ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814" }],
    [
      "path",
      {
        d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4"
      }
    ]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Jt = [
  "svg",
  gt,
  [
    ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2" }]
  ]
];
async function bt() {
  if (!window.customElements.get("model-viewer"))
    try {
      return await import("./model-viewer-CciDq4qR.js"), !0;
    } catch (R) {
      return console.error("Failed to load model-viewer:", R), !1;
    }
  return !0;
}
const Kt = (R) => btoa(R), J = (R, s = {}) => {
  const d = document.createElement(R);
  return s.classList && s.classList.forEach((a) => d.classList.add(a)), s.textContent && (d.textContent = s.textContent), s.attributes && Object.entries(s.attributes).forEach(([a, w]) => {
    d.setAttribute(a, w);
  }), d;
};
function Ct(R, s = document.body) {
  return s.appendChild(R), R;
}
const vt = {
  debug: (...R) => {
  },
  error: (...R) => {
  },
  warn: (...R) => {
  }
};
async function qt(R, s) {
  if (s[R])
    return s[R];
  try {
    const d = fetch(R).then((a) => {
      if (!a.ok) throw new Error("Network response was not ok");
      return a.blob();
    }).then((a) => {
      const w = URL.createObjectURL(a);
      return s[R] = w, w;
    });
    return s[R] = d, await d;
  } catch (d) {
    return console.error("Failed to load poster:", d), delete s[R], R;
  }
}
class zt {
  constructor(s, d) {
    this.container = s, this.modelData = d, this.qrCode = null;
  }
  async loadImage(s) {
    return new Promise((d, a) => {
      const w = new Image();
      w.onload = () => d(), w.onerror = w.onabort = () => a(new Error("Image failed to load")), w.src = s;
    });
  }
  async updateQrCode(s) {
    var g;
    this.container.innerHTML = "";
    const d = (g = this.modelData) == null ? void 0 : g.qrCode;
    let a = d == null ? void 0 : d.faviconUrl;
    if (a)
      try {
        await this.loadImage(a);
      } catch {
        a = null;
      }
    const w = {
      width: parseInt(d.QRsize) || 240,
      height: parseInt(d.QRsize) || 240,
      data: s,
      dotsOptions: {
        color: d.dotColor || "#000000",
        type: d.dotStyle || "square"
      },
      cornersSquareOptions: {
        color: d.cornerColor || "#000000",
        type: d.cornerStyle || "square"
      },
      cornersDotOptions: {
        color: d.cornerDotColor || "#000000",
        type: d.cornerDotStyle || "square"
      },
      backgroundOptions: {
        color: d.backgroundColor || "#ffffff"
      }
    };
    a && (w.image = a, w.imageOptions = {
      margin: parseInt(d.faviconMargin) || 0
    }), this.qrCode = new Tt(w), this.qrCode.append(this.container);
  }
}
const Rt = document.createElement("template");
Rt.innerHTML = `
  <div class="ardisplay-progress-modal" id="ardisplayProgressModal" style="display: none;">
    <div class="ardisplay-progress-content">
      <button class="ardisplay-progress-close-button"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg></button>
      <h3 class="ardisplay-progress-text">Loading...</h3>
      <div class="ardisplay-progress-bar">
        <div class="ardisplay-progress-bar-fill" id="ardisplayProgressBarFill"></div>
      </div>
    </div>
  </div>
  <style>
    .ardisplay-progress-modal {
      position: fixed;
      z-index: 9999;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      background: rgba(0,0,0,0.6);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
    }
    .ardisplay-progress-content {
      position: relative;
      text-align: center;
      font-family: sans-serif;
    }
    .ardisplay-progress-text {
      color:white;
    }
    .ardisplay-progress-bar {
      width: 200px;
      background: transparent;
      border: 2px solid white;
      border-radius: 4px;
      margin-top: 16px;
      overflow: hidden;
    }
    .ardisplay-progress-bar-fill {
      width: 0;
      height: 8px;
      background: white;
      transition: width 0.2s linear;
    }
    .ar-button {
      margin-top: 16px;
      padding: 8px 16px;
      background: #0072f5;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      display: none;
    }
    .ar-button:hover {
      background: #0058bc;
    }
    .ardisplay-progress-close-button {
      position: fixed;
      top: 10px;
      right: 10px;
      width: 30px;
      height: 30px;
      background: none;
      border: none;
      font-size: 24px;
      font-weight: bold;
      cursor: pointer;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: color 0.2s;
      z-index: 10000;
    }
    .ardisplay-progress-close-button:hover {
      color: #ccc;
    }
  </style>
`;
const lt = [
  {
    title: "Scanning",
    description: "Stand several feet back. With camera facing wall, make sweeping motion side to side, up and down."
  },
  {
    title: "Basics",
    description: "Wall should be well lit. Crop furnishings from initial view. Step back once picture is mounted."
  },
  {
    title: "Blank wall space",
    description: "Mount picture onto another object on the same wall. Hold finger on picture to move with camera into place."
  },
  {
    title: "Featureless wall",
    description: "Tape a newspaper or other graphical item to wall. Mount picture then slide it over to cover paper."
  },
  {
    title: "Ready to view",
    description: "Get started with AR view"
  }
], Ot = document.createElement("template");
Ot.innerHTML = `
  <div class="ardisplay-multi-steps-overlay" style="display: none;">
    <div class="ardisplay-overlay-bg" style="
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.6);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      z-index: 9998;
    ">
      <div class="ardisplay-steps-close-button" style="
        position: absolute;
        top: 10px;
        right: 10px;
        width: 30px;
        height: 30px;
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        border: none;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
      ">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </div>
    </div>
    <div class="ardisplay-multi-steps-modal" style="
      position: fixed;
      bottom: .5rem;
      left: 50%;
      transform: translateX(-50%);
      width: calc(100% - 1rem);
      height: auto;
      max-height: 90vh;
      background-color: rgba(255, 255, 255, 0.85);
      -webkit-backdrop-filter: blur(15px);
      backdrop-filter: blur(15px);
      z-index: 9999;
      border-radius: 10px;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      padding: 15px;
    ">
      <div class="ardisplay-steps-header" style="padding: 1rem;">
        <div class="ardisplay-step-indicator active"></div>
        <div class="ardisplay-step-indicator"></div>
        <div class="ardisplay-step-indicator"></div>
        <div class="ardisplay-step-indicator"></div>
        <div class="ardisplay-step-indicator"></div>
      </div>
      <div class="ardisplay-steps-content" style="padding: 1rem; flex: 1;">
        <img src="${pt}/wall-art-instructions-1-anim.gif" class="ardisplay-steps-gif" alt="Computer man">
        <h3 class="ardisplay-translate-lang instructions-title">Scanning</h3>
        <div class="ardisplay-instructions-body translate-lang" data-id="space-info">Stand several feet back. With camera facing wall, make sweeping motion side to side, up and down.</div>
      </div>
      <div class="ardisplay-steps-footer" style="
        display: flex; 
        justify-content: flex-end; 
        flex-direction:column;
        gap: 0.5rem; 
        border-top: 1px solid #ccc; 
        font-size: 16px;
        font-weight: bold;
        line-height: 1.5;
        padding: 8px;
        width: 75%;
        max-width: 100%;
        margin: 10px auto;
      ">
        <button class="ardisplay-next-button ardisplay-multi-button">Next</button>
        <button class="ardisplay-skip-button ardisplay-multi-button">Skip</button>
      </div>
    </div>
  </div>
  <style>
    /* You can customize these classes as well */
    .ardisplay-multi-steps-overlay.show {
      display: block;
    }

    .ardisplay-steps-gif{
      width:100%;
      height:auto;
    }

    .ardisplay-view-wall-button{
      width: 100%;
    }

    .ardisplay-view-wall-button svg{
      width: 24px;
      height: 24px;
      margin-right: 8px;
      fill: white;
      stroke: white;
    }

    .ardisplay-instructions-body {
        height:72px;
        display:flex;
        align-items:center;
        font-size: 16px;
        line-height: 1.5;
        color: #272727;
        margin: 10px 0 10px 0;
        text-align: left;
        font-family:sans-serif;
    }

    h3 {
        font-size: 20px;
        font-weight: bold;
        font-family:sans-serif;
        line-height: 1.5;
        margin: 5px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin: 10px 10px 10px 10px;
    }

    .ardisplay-steps-header{
      display:flex;
      flex-direction:row;
      width:80%;
      gap:12px;
      margin:auto;
    }

    .ardisplay-steps-content{
      display:flex;
      flex-direction:column;
      justify-content: center;
      align-items: center;
      overflow:hidden;
    }

    .ardisplay-step-indicator{
      height:6px;
      background:#bbbbbb;
      flex:1;
    }

    .ardisplay-step-indicator.active{
      background:black;
    }

    .ardisplay-multi-button{
      padding-block: .5rem;
      cursor:pointer;
      height:45px;
      border-radius:10px;
      flex-shrink:0;
      font-weight:bold;
    }

    .ardisplay-next-button{
      background:black;
      color:white;
    }

    .ardisplay-skip-button{
      border:none;
      color:gray;
      text-decoration:underline;
    }
  </style>
`;
class te extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.selectedIndex = 0, this.calculatedScale = null, this.modelData = null, this.originalSize = null, this.variants = [], this.variantSizes = [], this.scaleEvent = new Event("scale", { bubbles: !0, composed: !0 }), this.isModelLoaded = !1, this.userClickedAR = !1, this.currentStep = 1, this.totalSteps = 5, this.qrCodeManager = null, this.qrModal = null, this.posters = {}, this.modelViewer = null, this.debouncedRenderSVG = this.animationFrameDebounce(this._renderSVG), this.debouncedUpdateDimensionHotspots = this.animationFrameDebounce(
      this._updateDimensionHotspots
    ), this.GIF_URLS = [
      `${pt}/wall-art-instructions-1-anim.gif`,
      `${pt}/wall-art-instructions-2-anim.gif`,
      `${pt}/wall-art-instructions-3-anim.gif`,
      `${pt}/wall-art-instructions-4-anim.gif`
    ], this.gifCache = {}, this.preloadImage = async (s) => {
      if (this.gifCache[s])
        return this.gifCache[s];
      const d = fetch(s).then((a) => a.blob()).then((a) => {
        const w = URL.createObjectURL(a);
        return this.gifCache[s] = w, w;
      }).catch((a) => (delete this.gifCache[s], s));
      return this.gifCache[s] = d, d;
    }, this.setupPreloaderForStep = (s, d) => {
      if (s + 1 < this.GIF_URLS.length && !this.gifCache[this.GIF_URLS[s + 1]]) {
        const a = this.GIF_URLS[s + 1], w = d.querySelector(".ardisplay-steps-gif");
        if (!w) return;
        const g = w.getBoundingClientRect();
        if (g.top >= 0 && g.bottom <= window.innerHeight) {
          this.preloadImage(a);
          return;
        }
        new IntersectionObserver(
          (A, B) => {
            A.forEach((U) => {
              U.isIntersecting && (this.preloadImage(a), B.disconnect());
            });
          },
          {
            threshold: 0.5
          }
        ).observe(w);
      }
    };
  }
  // Debounce using requestAnimationFrame
  animationFrameDebounce(s) {
    let d = !1;
    return (...a) => {
      d || (d = !0, requestAnimationFrame(() => {
        s.apply(this, a), d = !1;
      }));
    };
  }
  debounce(s, d) {
    let a;
    return function(...w) {
      const g = this;
      clearTimeout(a), a = setTimeout(() => s.apply(g, w), d);
    };
  }
  _sendShortStatsEvent(s, d = "") {
    var w;
    vt.debug(this.modelData);
    const a = {
      dmodelId: ((w = this.modelData) == null ? void 0 : w.modelId) || "no-model-id",
      action: s,
      browser: navigator.userAgent,
      message: d || void 0
    };
    fetch("https://v2.ardisplay.io/api/stats", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(a)
    }).then((g) => {
      g.ok || vt.error("Error sending stats:", g.status);
    }).catch((g) => {
    });
  }
  async connectedCallback() {
    this._getAttributes(), await this._getModelData(), this.styles = this._consolidateStyles(), this.modelData.mode !== "popup" ? this.shadowRoot.appendChild(this.styles) : document.body.appendChild(this.styles);
    const s = document.createElement("template");
    s.innerHTML = `
      <!-- QR Code Modal -->
      <style>
        #qrModal {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background: rgba(0, 0, 0, 0.5);
          display: none;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }
        .qr-modal-content {
          background: white;
          border-radius: 8px;
          position: relative;
          background-color: #fefefe;
          border: 1px solid #888;
          width: 820px;
          height: 418px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .qr-close-button {
          position: absolute;
          top: 10px;
          right: 10px;
          width: 30px;
          height: 30px;
          background-color: rgba(0, 0, 0, 0.5);
          color: white;
          font-size: 28px;
          font-weight: bold;
          cursor: pointer;
          border: none;
          border-radius: 50%;
          display: flex;
          justify-content: center;
          align-items: center;
        }
        .qr-modal-content h2 {
          margin-top: 0;
          color: #333;
          text-align: center;
        }
        .qr-code-container {
          display: flex;
          justify-content: center;
          align-items: center;
          margin: 20px 0;
        }
        #qr-code {
          margin: 20px auto;
        }
      </style>
      <div id="qrModal" class="qr-modal">
          <div class="qr-modal-content" style="display: flex; flex-direction: row;text-align: center;overflow: hidden;">
          <button class="qr-close-button">×</button>
          <div style="width: 50%; height:100%;flex-grow: 0; flex-shrink: 0;display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px;">
              <h2>
                  <p id="btn-text" style="margin: 0">${this.modelData.title}</p>
              </h2>
              <p data-id="qrcode-info" class="translate-lang" style="margin:0">${this.modelData.description}</p>
              <div class="qr-code-container">
                  <div id="qr-code"></div>
              </div>
          </div>
          <div style="width: 50%; height:100%; flex-grow: 0; flex-shrink: 0;">
              <img src="${pt}/1.webp" alt="Artwork" style="width: 100%; height: 100%; object-fit: cover; object-position: center;">
          </div>
          </div>
      </div>
    `;
    const d = Lt(), a = document.createElement("template");
    a.innerHTML = `
      <style>
      .model-viewer-container{
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: calc(100% - 96px);
        height: calc(100% - 96px);
        display: none;
        background-color: white;
        flex-direction: row;
        z-index: 999;
      }

      /* Consolidated Styles */
      model-viewer {
        width: 100%;
        height: 100%;
        --min-hotspot-opacity: 0;
        position: relative;
      }
        
      .ardisplay-close-button{
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
      }
      .ardisplay-close-button svg{
        width: 24px;
        height: 24px;
        fill: black;
      }
      .ardisplay-model-viewer-overlay{
        content: '';
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1;
        display: none;
      }
      .ardisplay-details-panel{
        width: 400px;
        height: 100%;
        background-color: white;
        display: flex;
        flex-direction: column;
        padding-block: 1rem;
      }
      @media only screen and (max-width: 900px){
        .model-viewer-container{
          width: 100%;
          height: calc(100% - 48px);
          transform: translate(-50%, 0);
          top: 48px;
        }
        .ardisplay-details-panel{
          display: none!important;
        }

        .ardisplay-model-viewer-overlay{
          top: -48px;
        }

        .ardisplay-qr-code-button{
          display:flex!important;
        }
      }
      .ardisplay-details-panel{
        display:flex;
      }
      .ardisplay-qr-code-button{
        all: unset;
        position: absolute;
        display:none;
        top: 10px;
        right: 50%;
        transform: translateX(50%);
        background: white;
        cursor: pointer;
        padding: 10px;
        z-index: 1000;
        align-items: center;
        justify-content: center;
        gap: 10px;
        white-space: nowrap;
      }
      .ardisplay-show{
        display:flex!important;
      }
      </style>
      <div class="model-viewer-container">
                <model-viewer  
                    ar
                    shadow-intensity="${this.modelData.shadow}"
                    ar-placement="${this.modelData.placement}"
                    ar-modes="webxr scene-viewer quick-look"
                    ar-scale="fixed"
                    camera-controls="true"
                    disable-pan="true"
                    disable-tap="true"
                    interaction-prompt="none"
                    interpolation-decay="40"
                    touch-action="none"
                    max-field-of-view="auto"
                    field-of-view="auto"
                    camera-orbit="0deg 75deg 105%"
                    ar-status="not-presenting"
                >
                    ${d}
                    <button class="ardisplay-qr-code-button" style="background-color: ${this.modelData.arBtn.btnBgColor};color: ${this.modelData.arBtn.btnTextColor};border-radius: ${this.modelData.arBtn.cornerRadius}px;font-size: ${this.modelData.arBtn.btnSize - 6}px;text-wrap: nowrap;">
                        ${this.modelData.arBtn.btnIcon ? `<i data-lucide="${this.modelData.arBtn.btnIcon}" style="width: 24px; height: 24px;color: inherit;"></i>` : ""}
                        ${this.modelData.arBtn.btnText}
                    </button>
                </model-viewer>
                <button class="ardisplay-close-button">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                </button>
                <div class="ardisplay-details-panel" style="flex-direction:column;">
                    <div class="ar-display-custom-panel" style="flex:1;"></div>
                    <button id="showQRButton" style="margin-top: 16px; margin-right: 16px; padding: 8px 16px; color: black; border: none; border-radius: 4px; cursor: pointer;display:flex;flex-direction:row;align-items:center;gap:16px;font-weight:700;">
                      <svg viewBox="0 0 24 24" focusable="false" width="24" height="24" aria-hidden="true" class="rotera-svg-icon"><path d="M2 2h7v2H4v5H2V2zm18 2h-5V2h7v7h-2V4zM4 15H2v7h7v-2H4v-5zm18 0h-2v5h-5v2h7v-7z"></path><path d="M11 6h2v5h5v7h-7v-5H6v-2h5V6z"></path><path d="M9 6H6v3h3V6zm6 0h3v3h-3V6zm-6 9H6v3h3v-3z"></path></svg>
                      Try it in your home
                    </button>
                    <div id="inline-qr-container" style="display: none; margin-top: 16px;justify-content:center;align-items:center;"></div>
                </div>
            </div>
            <div class="ardisplay-model-viewer-overlay"></div>
        </div>
    `, this.styles = this._consolidateStyles(), this.shadowRoot.appendChild(this.styles), await this._loadTemplate(this.modelData.mode), this._moveSlottedContent(), Ct(Rt.content.cloneNode(!0)), Ct(Ot.content.cloneNode(!0)), this.modelData.mode !== "popup" && Ct(s.content.cloneNode(!0)), this.modelData.mode === "popup" && Ct(a.content.cloneNode(!0)), this.modelViewer = this.modelData.mode === "popup" ? document.querySelector("model-viewer") : this.shadowRoot.querySelector("model-viewer");
    const w = document.querySelector("#showQRButton");
    w && w.addEventListener("click", () => {
      const I = document.querySelector("#inline-qr-container");
      if (I) {
        I.classList.toggle("ardisplay-show");
        const $ = `${St}/${this.modelData.modelId}`;
        this.qrCodeManager && this.qrCodeManager.updateQrCode($);
      }
    }), this.modelData.mode === "popup" && this._processLucideIcons(document.querySelector(".ardisplay-qr-code-button"));
    const g = this.shadowRoot.querySelector(".ardisplay-qr-code-button"), v = document.querySelector("#qr-code");
    if (g && v && this.modelData.mode !== "popup" && (this.qrCodeManager = new zt(v, this.modelData), this._setupQRCodeListeners()), this.modelData.mode === "popup") {
      const I = document.querySelector("#inline-qr-container");
      I && (this.qrCodeManager = new zt(I, this.modelData));
    }
    const x = document.querySelector(".ardisplay-skip-button"), A = document.querySelector(".ardisplay-next-button"), B = document.querySelector(".ardisplay-steps-close-button");
    x == null || x.addEventListener("click", () => this._skipToLast()), A == null || A.addEventListener("click", () => this._goToNextStep()), B == null || B.addEventListener("click", () => {
      const I = document.querySelector(
        ".ardisplay-multi-steps-overlay"
      );
      I && (I.style.display = "none");
    });
    const U = document.querySelector("#ardisplayProgressModal"), Y = document.querySelector(".ardisplay-progress-content"), K = document.querySelector(".ardisplay-progress-close-button");
    U && K && (K.addEventListener("click", () => {
      U.style.display = "none";
    }), U.addEventListener("click", (I) => {
      Y.contains(I.target) || (U.style.display = "none");
    })), this._setupEventListeners(), this._sendShortStatsEvent("View");
    const Z = J("div", {
      classList: ["bottom-container"]
    });
    this.modelViewer.appendChild(Z), this._setupCartButton(Z), this._setupBottomNavBar(Z);
  }
  _showStepsModal() {
    const s = document.querySelector(".ardisplay-multi-steps-overlay");
    if (s) {
      s.style.display = "block";
      const d = this.GIF_URLS[0];
      this.preloadImage(d), this.setupPreloaderForStep(0, document), this._setupSwipeListeners();
    }
  }
  _skipToLast() {
    this.currentStep = this.totalSteps;
    const s = document.querySelector(".ardisplay-steps-content"), d = document.querySelector(".ardisplay-next-button"), a = document.querySelector(".ardisplay-skip-button");
    document.querySelectorAll(".ardisplay-step-indicator").forEach((g, v) => {
      g.classList.toggle("active", v < this.currentStep);
    }), s.innerHTML = `
      <img src="${this.GIF_URLS[this.GIF_URLS.length - 1]}"
           class="ardisplay-steps-gif"
           alt="Product preview"
           style="width: 100%;">
      <h3 class="ardisplay-instructions-title">${lt[this.currentStep - 1].title}</h3>
      <div class="ardisplay-instructions-body">${lt[this.currentStep - 1].description}</div>
      <button class="ardisplay-view-wall-button" style="
        background: black;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        margin-top: 16px;
        font-weight: bold;
        cursor: pointer;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        ">
        <svg version="1.1" id="icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
            viewBox="0 0 50 50" enable-background="new 0 0 50 50" xml:space="preserve">
        <g>
          <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
            M33.002,49H44c2.762,0,5-2.239,5-5V32.626"/>
          <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
            M1,33v10.999c0,2.763,2.24,5,5,5h11"/>
          <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
            M17,1H6C3.238,1,1,3.238,1,6v11"/>
          <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
            M49,16.625V6c0-2.762-2.238-5-5-5H33.002"/>
          <g>
            <path d="M39,39c0,1.104-1.116,2-2.22,2L14.89,35C13.785,35,13,34.104,13,33V17c0-1.104,0.676-2,1.78-2l22.11-6
              C37.994,9,39,9.896,39,11V39z M23.686,29.171c-0.59,0.588-0.59,1.541,0,2.129c0.293,0.295,0.678,0.441,1.064,0.441
              c0.385,0,0.77-0.146,1.064-0.441l4.377-4.376l4.199,4.198c0.588,0.59,1.541,0.59,2.129,0c0.588-0.588,0.588-1.541,0-2.129
              l-5.264-5.264c-0.588-0.59-1.541-0.59-2.129,0l-1.697,1.697l-3.76-3.758c-0.586-0.586-1.535-0.586-2.121,0l-6.943,6.943
              c-0.586,0.586-0.586,1.535,0,2.121c0.293,0.293,0.676,0.439,1.061,0.439c0.383,0,0.768-0.146,1.061-0.439l5.883-5.883l2.699,2.697
              L23.686,29.171z M29.119,19.571c0-0.998-0.809-1.807-1.807-1.807c-0.996,0-1.805,0.809-1.805,1.807
              c0,0.996,0.809,1.805,1.805,1.805C28.311,21.376,29.119,20.567,29.119,19.571"/>
          </g>
        </g>
        </svg>
        View on your wall
      </button>
    `, d && requestAnimationFrame(() => {
      d.style.display = "none";
    }), a && requestAnimationFrame(() => {
      a.style.display = "none";
    });
    const w = s.querySelector(".ardisplay-view-wall-button");
    w && w.addEventListener("click", () => {
      this.handleActivateAR();
      const g = document.querySelector(".ardisplay-multi-steps-overlay");
      g && (g.style.display = "none");
    });
  }
  async _goToNextStep() {
    if (this.currentStep < this.totalSteps)
      if (this.currentStep++, document.querySelectorAll(".ardisplay-step-indicator").forEach((s, d) => {
        s.classList.remove("active"), d <= this.currentStep - 1 && s.classList.add("active");
      }), this.currentStep === this.totalSteps) {
        const s = document.querySelector(".ardisplay-steps-content"), d = document.querySelector(".ardisplay-next-button"), a = document.querySelector(".ardisplay-skip-button");
        s.innerHTML = `
          <img src="${this.GIF_URLS[this.GIF_URLS.length - 1]}"
               class="ardisplay-steps-gif"
               alt="Product preview"
               style="object-fit: cover;width: 100%;">
          <h3 class="ardisplay-instructions-title">${lt[this.currentStep - 1].title}</h3>
          <div class="ardisplay-instructions-body">${lt[this.currentStep - 1].description}</div>
          <button class="ardisplay-view-wall-button" style="
            background: black;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            margin-top: 16px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            ">
              <svg version="1.1" id="icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                  viewBox="0 0 50 50" enable-background="new 0 0 50 50" xml:space="preserve">
              <g>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M33.002,49H44c2.762,0,5-2.239,5-5V32.626"/>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M1,33v10.999c0,2.763,2.24,5,5,5h11"/>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M17,1H6C3.238,1,1,3.238,1,6v11"/>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M49,16.625V6c0-2.762-2.238-5-5-5H33.002"/>
                <g>
                  <path d="M39,39c0,1.104-1.116,2-2.22,2L14.89,35C13.785,35,13,34.104,13,33V17c0-1.104,0.676-2,1.78-2l22.11-6
                    C37.994,9,39,9.896,39,11V39z M23.686,29.171c-0.59,0.588-0.59,1.541,0,2.129c0.293,0.295,0.678,0.441,1.064,0.441
                    c0.385,0,0.77-0.146,1.064-0.441l4.377-4.376l4.199,4.198c0.588,0.59,1.541,0.59,2.129,0c0.588-0.588,0.588-1.541,0-2.129
                    l-5.264-5.264c-0.588-0.59-1.541-0.59-2.129,0l-1.697,1.697l-3.76-3.758c-0.586-0.586-1.535-0.586-2.121,0l-6.943,6.943
                    c-0.586,0.586-0.586,1.535,0,2.121c0.293,0.293,0.676,0.439,1.061,0.439c0.383,0,0.768-0.146,1.061-0.439l5.883-5.883l2.699,2.697
                    L23.686,29.171z M29.119,19.571c0-0.998-0.809-1.807-1.807-1.807c-0.996,0-1.805,0.809-1.805,1.807
                    c0,0.996,0.809,1.805,1.805,1.805C28.311,21.376,29.119,20.567,29.119,19.571"/>
                </g>
              </g>
              </svg>
              View on your wall
          </button>
        `;
        const w = s.querySelector(".ardisplay-steps-gif"), g = this.GIF_URLS[this.GIF_URLS.length - 1];
        d && requestAnimationFrame(() => {
          d.style.display = "none";
        }), a && requestAnimationFrame(() => {
          a.style.display = "none";
        });
        try {
          const x = await this.preloadImage(g);
          w.src = x, w.setAttribute("loading", "eager");
        } catch {
          w.src = g;
        }
        const v = s.querySelector(".ardisplay-view-wall-button");
        v && v.addEventListener("click", () => {
          this.handleActivateAR();
          const x = document.querySelector(".ardisplay-multi-steps-overlay");
          x && (x.style.display = "none");
        });
      } else {
        const s = document.querySelector(".ardisplay-steps-gif"), d = this.GIF_URLS[this.currentStep - 1];
        try {
          const a = await this.preloadImage(d);
          s.src = a, s.setAttribute("loading", "eager");
        } catch {
          s.src = d;
        }
        document.querySelector(".ardisplay-instructions-title").innerHTML = lt[this.currentStep - 1].title, document.querySelector(".ardisplay-instructions-body").innerHTML = lt[this.currentStep - 1].description, this.setupPreloaderForStep(this.currentStep - 1, document);
      }
  }
  async _goToPreviousStep() {
    if (this.currentStep > 1) {
      this.currentStep--, document.querySelectorAll(".ardisplay-step-indicator").forEach((g, v) => {
        g.classList.toggle("active", v < this.currentStep);
      });
      const s = document.querySelector(".ardisplay-steps-content");
      document.querySelector(".ardisplay-steps-gif");
      const d = document.querySelector(".ardisplay-next-button"), a = document.querySelector(".ardisplay-skip-button");
      d && (d.style.display = "block"), a && (a.style.display = "block"), s.innerHTML = `
        <img src="${this.GIF_URLS[this.currentStep - 1]}" class="ardisplay-steps-gif" alt="Instructions animation">
        <h3 class="ardisplay-instructions-title">${lt[this.currentStep - 1].title}</h3>
        <div class="ardisplay-instructions-body">${lt[this.currentStep - 1].description}</div>
      `;
      const w = s.querySelector(".ardisplay-steps-gif");
      if (w)
        try {
          const g = await this.preloadImage(
            this.GIF_URLS[this.currentStep - 1]
          );
          w.src = g, w.setAttribute("loading", "eager");
        } catch {
        }
      this.setupPreloaderForStep(this.currentStep - 1, document);
    }
  }
  _setupSwipeListeners() {
    const s = document.querySelector(".ardisplay-steps-content");
    if (!s) return;
    let d = 0, a = 0;
    const w = 50, g = (x) => {
      d = x.changedTouches[0].screenX;
    }, v = (x) => {
      a = x.changedTouches[0].screenX, this._handleSwipeGesture(d, a, w);
    };
    s.addEventListener("touchstart", g), s.addEventListener("touchend", v), this._swipeHandlers = {
      start: g,
      end: v,
      element: s
    };
  }
  _handleSwipeGesture(s, d, a) {
    const w = d - s;
    Math.abs(w) > a && (w < 0 ? this._goToNextStep() : this._goToPreviousStep());
  }
  disconnectedCallback() {
    if (document.removeEventListener(
      "mousedown",
      this.boundHandleDocumentMouseDown
    ), document.removeEventListener("scale", this.boundHandleScale), this.modelViewer && (this.modelViewer.removeEventListener(
      "model-visibility",
      this.boundHandleModelVisibility
    ), this.modelViewer.removeEventListener(
      "ar-status",
      this.boundHandleArStatus
    ), this.modelViewer.removeEventListener(
      "camera-change",
      this.boundHandleCameraChange
    ), this.modelViewer.removeEventListener(
      "scene-graph-ready",
      this.boundHandleSceneGraphReady
    ), this.modelViewer.removeEventListener("load", this.boundHandleLoad)), this.cleanupBlobUrls(), this._swipeHandlers) {
      const { start: s, end: d, element: a } = this._swipeHandlers;
      a.removeEventListener("touchstart", s), a.removeEventListener("touchend", d), this._swipeHandlers = null;
    }
  }
  async _getModelData() {
    var d;
    let s = window.location.href;
    try {
      let a;
      if (this.getAttribute("src") ? a = await fetch(
        `https://v2.ardisplay.io/api/3d-model?id=${this.getAttribute("src")}`
      ) : (s && s.endsWith("preview") && (s = s.replace("preview", "")), s && s.endsWith("/") && (s = s.slice(0, -1)), a = await fetch(
        `https://v2.ardisplay.io/api/3d-model?url=${Kt(s)}`
      )), !a.ok)
        throw new Error(`Response status: ${a.status}`);
      const w = await a.json();
      this.modelData = w, this.getAttribute("src") && (this.modelData.mode = "none"), (d = this.modelData) != null && d.options || vt.warn("Missing model options. Skipping variant initialization."), this._setupVariantsSizes();
    } catch (a) {
      vt.error(a.message);
    }
  }
  _setupVariantsSizes() {
    var s;
    this.variants = ((s = this.modelData) == null ? void 0 : s.options) || [], this.variantSizes = [], this.variants.forEach((d) => {
      const a = {};
      d.sizes.forEach((w) => {
        const g = w.label.toLowerCase();
        a[g] = {
          width: w.width,
          height: w.height,
          depth: w.depth || ""
        };
      }), this.variantSizes.push(a);
    });
  }
  _getAttributes() {
    return {
      modelSrc: this.getAttribute("src") || "",
      modelPoster: this.getAttribute("poster") || "",
      ar: this.hasAttribute("ar"),
      cameraControls: this.hasAttribute("camera-controls"),
      touchAction: this.getAttribute("touch-action") || "none",
      viewMode: this.getAttribute("view-mode") || "normal",
      arPlacement: this.getAttribute("ar-placement") || "floor"
    };
  }
  _consolidateStyles() {
    const s = document.createElement("style");
    return this.modelData.mode !== "none" && !this.getAttribute("src") && this.modelData.mode !== "popup" ? s.textContent = `
        :host {
          display: block;
          width: 100%;
          height: 600px;
        }
      ` : s.textContent = `
        :host {
          display: block;
          width: fit-content;
          height: fit-content;
        }
      `, s.textContent += ` 
      *,*::before,*::after{
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      /* Consolidated Styles */
      model-viewer {
        width: 100%;
        height: 100%;
        --min-hotspot-opacity: 0;
        position: relative;
      }

      model-viewer[ar-status="session-started"] .ardisplay-qr-code-button,
      model-viewer[ar-status="object-placed"] .ardisplay-qr-code-button {
        display: none;
      }



      model-viewer[ar-status="session-started"] .nav-icon-button:last-child,
      model-viewer[ar-status="object-placed"] .nav-icon-button:last-child {
        display: flex;
      }

      .nav-icon-button:last-child {
        display: none;
      }

      .dimensionLineContainer {
        pointer-events: none;
        display: block;
      }

      .dimensionLine {
        display: none;
        stroke: #16a5e6;
        stroke-width: 2;
      }

      .hide {
        display: none;
      }

      .dot {
        display: none;
      }

      .dim {
        display: none;
        border-radius: 20px;
        color: #1185bb;
        padding: 4px 8px;
        border: 1px solid #1185bb;
      }

      /* Bottom Nav Bar */
      .bottom-container{
        position: absolute;
        width: 100%;
        height: 0px;
        bottom: 64px;
      }

      .bottom-nav-bar {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px;
        z-index: 10;
      }

      .cart-button-wrapper{
        display: none;
      }

      model-viewer[ar-status="session-started"] .cart-button-wrapper,
      model-viewer[ar-status="object-placed"] .cart-button-wrapper{
        display: flex;
      }

      .nav-btn {
        background-color: #f0f0f0;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 8px 12px;
        border-radius: 4px;
        margin-right: 8px;
        font-weight: 500;
        transition: background-color 0.2s ease;
        flex: 1;
      }
      .nav-btn:hover {
        background-color: #ddd;
      }

      /* Sub-panels */
      .sub-panel {
        position: absolute;
        bottom: 0; /* ensure it sits over the nav bar */
        left: 0;
        width: 100%;
        background-color: transparent;
        box-shadow: 0 -2px 8px rgba(0,0,0,0.15);
        padding: 16px 0;
      }
      .hidden {
        display: none;
      }

      /* Color Slider */
      .slider {
        width: 100%;
        text-align: center;
        overflow: hidden;
        margin: 0 auto;
      }
      .slides {
        display: flex;
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
        padding: 0 10px;
        gap: 10px; /* spacing between slides */
      }
      .slide {
        scroll-snap-align: start;
        flex-shrink: 0;
        width: 80px;
        height: 80px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        cursor: pointer;
        background-position: center;
        background-size: contain;
        background-repeat: no-repeat;
        outline: none;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      .slide:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      }
      .slide.selected {
        border-color: #4285f4;
        box-shadow: 0 0 0 2px rgba(66,133,244,0.3);
      }

      .size-panel {
      /* Similar to 'flex flex-wrap gap-2' in Tailwind */
      display: flex;
      flex-wrap: wrap;
      gap: 8px; /* ~ Tailwind gap-2 */
      margin-top: 8px;
      padding: 16px; /* for some breathing room */
      background-color: transparent;
      z-index: 100;
    }

    .size-buttons-wrapper {
      /* If you need an extra wrapper, adjust accordingly */
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      padding: 0;
    }

    .size-button {
      /* Mimicking "border-2 border-gray-300 rounded-lg px-4 py-2" */
      border: 2px solid #ccc;
      border-radius: 8px; /* ~ Tailwind rounded-lg */
      padding: 8px 16px; /* ~ px-4 py-2 in Tailwind */
      background-color: rgba(255, 255, 255, 0.8); /* ~ bg-white/80 */
      font-weight: 500;
      cursor: pointer;
      color: black;

      /* Tailwind “transition-colors” is basically short for smooth border/color transitions */
      transition: border-color 0.2s ease, color 0.2s ease, background-color 0.2s ease;
    }

    /* Hover effect: "hover:border-blue-600 hover:text-blue-600" */
    .size-button:hover:not(:disabled) {
      border-color: #2563EB;
      color: #2563EB;
    }

    /* Active/selected state similar to your existing .selected logic */
    .size-button.selected {
      color: #4285f4;
      border-color: #4285f4;
      opacity: 1;
    }

      /* Floating Add to Cart button */
      .cart-button-wrapper {
        position: absolute;
        top: -64px; /* similar to -top-16 from Tailwind */
        left: 0;
        right: 0;
        justify-content: center;
      }
      .cart-btn {
        background-color: #2563EB; /* Tailwind blue-600 */
        color: #fff;
        border: none;
        border-radius: 9999px; /* fully rounded */
        padding: 12px 32px; /* ~py-3 px-8 */
        font-weight: 600;
        font-family: sans-serif;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: background-color 0.2s ease;
      }
      .cart-btn:hover {
        background-color: #1D4ED8; /* Tailwind blue-700 */
      }
      .cart-btn svg {
        height: 20px; /* h-5 in Tailwind ~ 20px */
        width: 20px;
      }

      /* Bottom Nav Bar (matching the React code style) */
      .bottom-nav {
        height: fit-content; /* h-16 in Tailwind */
        background-color: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: space-around;
        position: relative;
        z-index: 100;
      }
      .nav-icon-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 8px 16px;
        color: black; /* text-gray-600 */
        background: transparent;
        border: none;
        cursor: pointer;
        transition: color 0.2s ease;
      }
      .nav-icon-button.active {
        color: #2563EB; /* text-blue-600 */
      }
      .nav-icon-button svg {
        height: 24px; /* h-6 */
        width: 24px;
      }
      .nav-icon-button span {
        font-size: 12px; /* text-xs ~12px */
        margin-top: 4px;
      }

      /* Sub-panels (size panel, variant panel) that appear above the nav */
      .sub-panel {
        position: absolute;
        bottom: 0; /* sits just above nav (which is 64px tall) */
        left: 0;
        right: 0;
        background-color: rgba(255,255,255,0.95);
        backdrop-filter: blur(8px);
        border-top: 1px solid #E5E7EB;
        padding: 16px;
        box-shadow: 0 -2px 8px rgba(0,0,0,0.15);
        z-index: 100;
      }
      /* ------------------------------------------------------------------ */
    `, s;
  }
  async checkWebXRSupport() {
    try {
      return "xr" in navigator ? await navigator.xr.isSessionSupported("immersive-ar") : !1;
    } catch {
      return !1;
    }
  }
  async _loadTemplate(s) {
    let d = s === "popup" ? Ut : s === "inpage" ? Ft : Bt;
    this.getAttribute("src") && (d = Bt);
    const a = this._getAttributes(), w = d(
      a.ar,
      a.cameraControls,
      a.touchAction,
      a.modelPoster,
      a.arPlacement,
      this.modelData
    ), g = document.createRange().createContextualFragment(w);
    if (this._processLucideIcons(g), this.shadowRoot.appendChild(g), s === "inpage" && !this.getAttribute("src")) {
      const v = document.createElement("img");
      v.src = await qt(this.modelData.options[0].posterFileUrl, this.posters), v.style.position = "absolute", v.style.top = "0", v.style.left = "0", v.style.width = "100%", v.style.height = "100%", v.style.objectFit = "contain", v.style.zIndex = "10", this.shadowRoot.querySelector("model-viewer").appendChild(v), console.log(this), this.addEventListener("click", async () => {
        const x = this.shadowRoot.querySelector("model-viewer img");
        x && this.shadowRoot.querySelector("model-viewer").removeChild(x), await bt();
        const A = document.createElement("style");
        A.textContent = ".container { direction: ltr; }", this.modelViewer.shadowRoot.appendChild(A);
      }), this.addEventListener("mouseenter", async () => {
        const x = this.shadowRoot.querySelector("model-viewer img");
        x && this.shadowRoot.querySelector("model-viewer").removeChild(x), await bt();
        const A = document.createElement("style");
        A.textContent = ".container { direction: ltr; }", this.modelViewer.shadowRoot.appendChild(A);
      });
    }
  }
  _updateSizePanel(s) {
    const d = this.modelData.mode !== "popup" ? this.shadowRoot.querySelector(".size-panel") : document.querySelector(".size-panel");
    if (!d) return;
    d.innerHTML = "";
    const a = J("div", {
      classList: ["size-buttons-wrapper"]
    }), w = this.variantSizes[s];
    w && Object.entries(w).forEach(([g, v]) => {
      const x = J("button", {
        classList: ["size-button"],
        textContent: g,
        attributes: {
          "data-size-key": g
        },
        disabled: !1
      });
      x.addEventListener("click", (A) => {
        if (this.modelViewer && s === 0) {
          this.modelData.mode === "popup" ? document.querySelectorAll(".size-button").forEach((U) => U.classList.remove("selected")) : this.shadowRoot.querySelectorAll(".size-button").forEach((U) => U.classList.remove("selected")), A.target.classList.add("selected");
          const B = this.variantSizes[s][g];
          this.calculateAndApplyScale(B);
        }
      }), a.appendChild(x);
    }), d.appendChild(a);
  }
  _processLucideIcons(s) {
    const d = {
      eye: Gt,
      blocks: Yt,
      rotate3d: Wt,
      box: Zt,
      fileaxis3d: Qt,
      scan: Jt
    };
    s.querySelectorAll("[data-lucide]").forEach((w) => {
      const g = w.getAttribute("data-lucide").toLowerCase(), v = d[g];
      if (v) {
        const x = w.getAttribute("width") || 24, A = w.getAttribute("color") || "currentColor", B = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "svg"
        );
        B.setAttribute("width", x), B.setAttribute("height", x), B.setAttribute("viewBox", "0 0 24 24"), B.setAttribute("fill", "none"), B.setAttribute("stroke", A), B.setAttribute("stroke-width", "2"), B.setAttribute("stroke-linecap", "round"), B.setAttribute("stroke-linejoin", "round"), v[2].forEach((U) => {
          const [Y, K] = U, Z = document.createElementNS(
            "http://www.w3.org/2000/svg",
            Y
          );
          Object.entries(K).forEach(([I, $]) => {
            Z.setAttribute(I, $);
          }), B.appendChild(Z);
        }), w.parentNode.replaceChild(B, w);
      }
    });
  }
  _moveSlottedContent() {
    const s = this.shadowRoot.querySelector(
      ".ar-display-custom-panel"
    ), d = this.querySelector('slot[name="custom-panel"]');
    s && d && s.appendChild(d);
  }
  _setupEventListeners() {
    console.log(this.modelData.mode), this.modelData.mode === "popup" ? this._setupModalEventListeners() : this.modelData.mode === "inpage" && this._setupNormalEventListeners(), this.boundHandleScale = () => this._setupDimensions(this.modelViewer), this.boundHandleModelVisibility = () => this._setupDimensions(this.modelViewer), this.boundHandleArStatus = (s) => this._handleArStatusChange(s), this.boundHandleCameraChange = () => {
      this.debouncedRenderSVG(), this.debouncedUpdateDimensionHotspots();
    }, this.boundHandleSceneGraphReady = () => {
      this.debouncedRenderSVG(), this.debouncedUpdateDimensionHotspots();
    }, this.boundHandleLoad = () => {
      this.isModelLoaded = !0, this.qrCodeButton && (this.qrCodeButton.disabled = !1);
      const s = this.modelViewer.getDimensions(), d = this.modelViewer.scale.toString().split(" ").map(Number);
      if (this.originalSize = { x: 0, y: 0, z: 0 }, this.originalSize.x = s.x / d[0], this.originalSize.y = s.y / d[1], this.originalSize.z = s.z / d[2], this.variantSizes && this.variantSizes[this.selectedIndex]) {
        const g = this.variantSizes[this.selectedIndex], v = Object.keys(g)[0];
        if (v) {
          const x = g[v];
          this.calculateAndApplyScale(x), requestAnimationFrame(() => {
            (this.modelData.mode !== "popup" ? this.shadowRoot.querySelectorAll(".size-button") : document.querySelectorAll(".size-button")).forEach((B) => {
              B.classList.toggle(
                "selected",
                B.textContent === v
              );
            });
          });
        }
      }
      this.shadowRoot.querySelector(".size-panel button") || this._updateSizePanel(0);
      const a = this.modelViewer.shadowRoot.querySelector(".slot.ar-button");
      a && (a.style.display = "none");
      const w = document.querySelector("#ardisplayProgressModal");
      w && w.style.display !== "none" && (w.style.display = "none", this._showStepsModal());
    }, document.addEventListener("scale", this.boundHandleScale), this.modelViewer.addEventListener(
      "model-visibility",
      this.boundHandleModelVisibility
    ), this.modelViewer.addEventListener("ar-status", this.boundHandleArStatus), this.modelViewer.addEventListener(
      "camera-change",
      this.boundHandleCameraChange
    ), this.modelViewer.addEventListener(
      "scene-graph-ready",
      this.boundHandleSceneGraphReady
    ), this.modelViewer.addEventListener("load", this.boundHandleLoad), this.modelViewer.addEventListener("progress", (s) => {
      const d = Math.round(s.detail.totalProgress * 100), a = document.querySelector("#ardisplayProgressBarFill");
      a && (a.style.width = `${d}%`, a.style.display = "block");
    }), this.modelViewer.addEventListener("load", () => {
      this.isModelLoaded = !0, this.modelData.mode === "popup" ? document.querySelectorAll(".dim").forEach((d) => {
        d.style.display = "block";
      }) : this.shadowRoot.querySelectorAll(".dim").forEach((d) => {
        d.style.display = "block";
      });
      const s = document.querySelector("#activateAR");
      s && (s.addEventListener("click", async (d) => {
        if (d instanceof MouseEvent)
          try {
            await this.modelViewer.activateAR();
            const a = document.querySelector("#ardisplayProgressModal");
            a && (a.style.display = "none");
          } catch {
          }
      }), s.style.display = "block");
    });
  }
  _isIOSDevice() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  }
  _isMobileDevice() {
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );
  }
  async _setupQRCodeListeners() {
    const s = document.querySelector("#qrModal"), d = document.querySelector("#qr-code"), a = this.modelData.mode !== "popup" ? this.shadowRoot.querySelector(".ardisplay-qr-code-button") : document.querySelector(".ardisplay-qr-code-button");
    console.log(a);
    const w = document.querySelector(".qr-close-button");
    console.log(a), this.qrCodeManager || (this.qrCodeManager = new zt(d, this.modelData)), a.addEventListener("click", async () => {
      if (this.GIF_URLS.push(await qt(this.modelData.options[0].posterFileUrl, this.posters)), this.modelData.mode === "none" && this._isMobileDevice()) {
        const g = document.querySelector("#ardisplayProgressModal");
        if (g) {
          const x = document.querySelector("#ardisplayProgressBarFill");
          x && (x.style.width = "0%", x.style.display = "block"), g.style.display = "flex", this.userClickedAR = !0;
        }
        await bt();
        const v = document.createElement("style");
        if (v.textContent = ".container { direction: ltr; }", this.modelViewer.shadowRoot.appendChild(v), this.modelViewer && this.modelViewer.addEventListener("progress", (x) => {
          const A = Math.round(x.detail.totalProgress * 100), B = document.querySelector("#ardisplayProgressBarFill");
          B && (B.style.width = `${A}%`, B.style.display = "block");
        }), this.isModelLoaded) {
          this._resetSteps(), this._showStepsModal();
          return;
        }
      } else if (this._isMobileDevice()) {
        if (console.log("else"), await this.checkWebXRSupport(), this.isModelLoaded) {
          this._resetSteps(), this._showStepsModal();
          return;
        }
        const g = document.querySelector("#ardisplayProgressModal");
        if (console.log(g), g) {
          const x = document.querySelector("#ardisplayProgressBarFill");
          x && (x.style.width = "0%", x.style.display = "block"), g.style.display = "flex", this.userClickedAR = !0;
        }
        await bt();
        const v = document.createElement("style");
        v.textContent = ".container { direction: ltr; }", this.modelViewer.shadowRoot.appendChild(v);
      } else {
        const g = `${St}/${this.modelData.modelId}`;
        this.qrCodeManager.updateQrCode(g), s.style.display = "flex";
        return;
      }
    }), w.addEventListener("click", () => {
      s.style.display = "none";
    }), s.addEventListener("click", (g) => {
      g.target === s && (s.style.display = "none");
    });
  }
  _resetSteps() {
    this.currentStep = 1, document.querySelectorAll(".ardisplay-step-indicator").forEach((w, g) => {
      w.classList.toggle("active", g === 0);
    });
    const s = document.querySelector(".ardisplay-steps-content");
    s && (s.innerHTML = `
        <img src="${this.GIF_URLS[0]}" class="ardisplay-steps-gif" alt="Computer man">
        <h3 class="ardisplay-instructions-title">Scanning</h3>
        <div class="ardisplay-instructions-body">Stand several feet back. With camera facing wall, make sweeping motion side to side, up and down.</div>
      `);
    const d = document.querySelector(".ardisplay-next-button"), a = document.querySelector(".ardisplay-skip-button");
    d && (d.style.display = "block"), a && (a.style.display = "block");
  }
  handleActivateAR() {
    if (this._sendShortStatsEvent("Click"), !this._isMobileDevice()) {
      const s = `${St}/${this.modelData.modelId}`;
      this.qrCodeManager && this.qrModal && (this.qrCodeManager.updateQrCode(s), this.qrModal.style.display = "flex");
      return;
    }
    if (this.modelViewer.canActivateAR)
      try {
        this._sendShortStatsEvent("Try"), this.modelViewer.activateAR();
      } catch (s) {
        this._sendShortStatsEvent("Failed", s.message);
        const d = `${St}/${this.modelData.modelId}`;
        this.qrCodeManager && this.qrModal && (this.qrCodeManager.updateQrCode(d), this.qrModal.style.display = "flex");
      }
  }
  _setupVariantsColors() {
    if (!this.variants || this.variants.length === 0) return null;
    const s = J("div", { classList: ["slider"] }), d = J("div", { classList: ["slides"] });
    return this.variants.forEach(async (a, w) => {
      const g = J("button", { classList: ["slide"] });
      if (w === 0 && (g.classList.add("selected"), this.modelViewer && a.url)) {
        let v = new URL(a.url);
        this.modelViewer.src = v.href, a.posterFileUrl ? this.modelViewer.poster = await qt(a.posterFileUrl, this.posters) : this.modelViewer.removeAttribute("poster");
      }
      a.image ? g.style.backgroundImage = `url('${a.image}')` : g.style.backgroundColor = a.color || "#ccc", g.onclick = () => {
        if (this.modelViewer) {
          if (a.url) {
            let v = new URL(a.url);
            this.modelViewer.src = v.href;
          }
          this._updateSizePanel(w), a.posterFileUrl ? this.modelViewer.poster = a.posterFileUrl : this.modelViewer.removeAttribute("poster"), this.shadowRoot.querySelectorAll(".slide").forEach((v) => v.classList.remove("selected")), g.classList.add("selected"), this.selectedIndex = w;
        }
      }, d.appendChild(g);
    }), s.appendChild(d), s;
  }
  // ---------- UI updates for bottom nav and floating cart ----------
  _setupCartButton(s) {
    const d = J("div", {
      classList: ["cart-button-wrapper"]
    }), a = J("button", { classList: ["cart-btn"] });
    a.innerHTML = `
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293
               2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0
               100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
          />
        </svg>
        Add to Cart
      `, d.appendChild(a), s.appendChild(d), d.addEventListener("click", async () => {
      await this._sendShortStatsEvent("Cart"), window.location.href = this.modelData.addToCartUrl;
    });
  }
  _setupBottomNavBar(s) {
    const d = J("div", {
      classList: ["sub-panel", "hidden"]
    }), a = this._createSizeControls();
    a && d.appendChild(a);
    const w = J("div", {
      classList: ["sub-panel", "hidden"]
    }), g = this._setupVariantsColors();
    g && w.appendChild(g);
    const v = J("div", { classList: ["bottom-nav"] }), x = (I) => {
      const $ = I.classList.contains("hidden");
      d.classList.add("hidden"), w.classList.add("hidden"), $ && I.classList.remove("hidden");
    }, A = J("button", {
      classList: ["nav-icon-button"]
    }), B = this.variants[this.selectedIndex] || {};
    B.sizes && B.sizes.length > 1 ? (A.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                 stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16m-7 6h7"
              />
            </svg>
            <span>Size</span>
          `, A.addEventListener("click", () => {
      x(d), A.classList.toggle(
        "active",
        !d.classList.contains("hidden")
      ), Y.classList.remove("active");
    })) : A.style.display = "none";
    const Y = J("button", {
      classList: ["nav-icon-button"]
    });
    this.variants && this.variants.length > 1 ? (Y.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                 stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M7 21a4 4 0 01-4-4V5a2 2 0
                   012-2h4a2 2 0 012 2v12a4 4 0
                   01-4 4zm0 0h12a2 2 0 002-2v-4a2
                   2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2
                   2 0 012.828 0l2.829 2.829a2 2 0 010
                   2.828l-8.486 8.485M7 17h.01"
              />
            </svg>
            <span>Variant</span>
          `, Y.addEventListener("click", () => {
      x(w), Y.classList.toggle(
        "active",
        !w.classList.contains("hidden")
      ), A.classList.remove("active");
    })) : Y.style.display = "none";
    const Z = J("button", {
      classList: ["nav-icon-button"]
    });
    Z.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                 stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8.684 13.342C8.886 12.938
                   9 12.482 9 12c0-.482-.114-.938-.316-1.342m0
                   2.684a3 3 0 110-2.684m0 2.684l6.632
                   3.316m-6.632-6l6.632-3.316m0 0a3 3 0
                   105.367-2.684 3 3 0
                   00-5.367 2.684zm0
                   9.316a3 3 0 105.368 2.684 3 3 0
                   00-5.368-2.684z"
              />
            </svg>
            <span>Share</span>
          `, Z.addEventListener("click", async () => {
      this._sendShortStatsEvent("Share");
      const I = {
        title: document.title,
        text: "Check out this AR model!",
        url: window.location.href
      };
      try {
        await navigator.share(I), vt.debug("Content shared successfully");
      } catch {
      }
    }), v.appendChild(A), v.appendChild(Y), v.appendChild(Z), this.boundHandleDocumentMouseDown = (I) => {
      const $ = I.composedPath();
      !$.includes(v) && !$.includes(d) && !$.includes(w) && (d.classList.add("hidden"), w.classList.add("hidden"), A.classList.remove("active"), Y.classList.remove("active"));
    }, document.addEventListener("mousedown", this.boundHandleDocumentMouseDown), s.appendChild(d), s.appendChild(w), s.appendChild(v);
  }
  // ------------------------------------------------------------------
  async _setupModalEventListeners() {
    const s = this.shadowRoot.querySelector(".ardisplay-view-3d-button");
    this.shadowRoot.querySelector(".ardisplay-preview-image");
    const d = document.querySelector(
      ".model-viewer-container"
    ), a = document.querySelector(".ardisplay-close-button"), w = document.querySelector(".ardisplay-model-viewer-overlay");
    s && d && s.addEventListener("click", async () => {
      await bt();
      const g = document.createElement("style");
      g.textContent = ".container { direction: ltr; }", this.modelViewer.shadowRoot.appendChild(g), d.style.display = "flex", w.style.display = "block";
    }), a && w && (a.addEventListener("click", () => {
      d.style.display = "none", w.style.display = "none";
    }), w.addEventListener("click", () => {
      d.style.display = "none", w.style.display = "none";
    }));
  }
  _setupNormalEventListeners() {
  }
  _handleArStatusChange(s) {
    const d = s.detail.status === "session-started", a = [
      ...this.modelViewer.querySelectorAll("[data-hotspot]"),
      this.modelViewer.querySelector("#dimLines")
    ].filter(Boolean);
    ((g) => {
      a.forEach((v) => {
        v.classList.toggle("hide", !g);
      });
    })(!d);
  }
  _drawLine(s, d, a, w) {
    !s || !d || !a || (s.setAttribute("x1", d.canvasPosition.x), s.setAttribute("y1", d.canvasPosition.y), s.setAttribute("x2", a.canvasPosition.x), s.setAttribute("y2", a.canvasPosition.y), w && s.classList.toggle("hide", !w.facingCamera));
  }
  _renderSVG() {
    const s = this.modelViewer.querySelectorAll("line");
    if (s.length === 0) return;
    [
      {
        line: s[0],
        start: "hotspot-dot+X-Y+Z",
        end: "hotspot-dot+X-Y+Z",
        dimension: "hotspot-dim+X-Y"
      },
      {
        line: s[1],
        start: "hotspot-dot+X-Y-Z",
        end: "hotspot-dot+X+Y-Z",
        dimension: "hotspot-dim+X-Z"
      },
      {
        line: s[2],
        start: "hotspot-dot+X+Y-Z",
        end: "hotspot-dot-X+Y-Z"
      },
      {
        line: s[3],
        start: "hotspot-dot-X+Y-Z",
        end: "hotspot-dot-X-Y-Z",
        dimension: "hotspot-dim-X-Z"
      },
      {
        line: s[4],
        start: "hotspot-dot-X-Y-Z",
        end: "hotspot-dot-X-Y+Z",
        dimension: "hotspot-dim-X-Y"
      }
    ].forEach(({ line: a, start: w, end: g, dimension: v }) => {
      this._drawLine(
        a,
        this.modelViewer.queryHotspot(w),
        this.modelViewer.queryHotspot(g),
        v ? this.modelViewer.queryHotspot(v) : null
      );
    });
  }
  _updateDimensionHotspots() {
    const s = this.modelViewer.getBoundingBoxCenter(), d = this.modelViewer.getDimensions(), a = {
      x: d.x / 2,
      y: d.y / 2,
      z: d.z / 2
    };
    [
      {
        name: "hotspot-dot+X-Y+Z",
        position: [
          s.x + a.x,
          s.y - a.y,
          s.z + a.z
        ]
      },
      {
        name: "hotspot-dim+X-Y",
        position: [
          s.x + a.x * 1.2,
          s.y - a.y * 1.1,
          s.z
        ],
        label: `${(d.z * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim+X-Y"]'
      },
      {
        name: "hotspot-dot+X-Y-Z",
        position: [
          s.x + a.x,
          s.y - a.y,
          s.z - a.z
        ]
      },
      {
        name: "hotspot-dim+X-Z",
        position: [
          s.x + a.x * 1.2,
          s.y,
          s.z - a.z * 1.2
        ],
        label: `${(d.y * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim+X-Z"]'
      },
      {
        name: "hotspot-dot+X+Y-Z",
        position: [
          s.x + a.x,
          s.y + a.y,
          s.z - a.z
        ]
      },
      {
        name: "hotspot-dim+Y-Z",
        position: [
          s.x,
          s.y + a.y * 1.1,
          s.z - a.z * 1.1
        ],
        label: `${(d.x * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim+Y-Z"]'
      },
      {
        name: "hotspot-dot-X+Y-Z",
        position: [
          s.x - a.x,
          s.y + a.y,
          s.z - a.z
        ]
      },
      {
        name: "hotspot-dim-X-Z",
        position: [
          s.x - a.x * 1.2,
          s.y,
          s.z - a.z * 1.2
        ],
        label: `${(d.y * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim-X-Z"]'
      },
      {
        name: "hotspot-dot-X-Y-Z",
        position: [
          s.x - a.x,
          s.y - a.y,
          s.z - a.z
        ]
      },
      {
        name: "hotspot-dim-X-Y",
        position: [
          s.x - a.x * 1.2,
          s.y - a.y * 1.1,
          s.z
        ],
        label: `${(d.z * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim-X-Y"]'
      },
      {
        name: "hotspot-dot-X-Y+Z",
        position: [
          s.x - a.x,
          s.y - a.y,
          s.z + a.z
        ]
      }
    ].forEach(({ name: g, position: v, label: x, labelSelector: A }) => {
      if (this.modelViewer.updateHotspot({
        name: g,
        position: v.join(" ")
      }), x && A) {
        const B = this.modelViewer.querySelector(A);
        B && (B.textContent = x);
      }
    });
  }
  _setupDimensions() {
    this.modelData.mode === "popup" ? document.querySelectorAll(".dimensionLine").forEach((s) => {
      s.style.display = "block";
    }) : this.shadowRoot.querySelectorAll(".dimensionLine").forEach((s) => {
      s.style.display = "block";
    }), this.debouncedRenderSVG(), this.debouncedUpdateDimensionHotspots();
  }
  _createSizeControls() {
    const s = J("div", { classList: ["size-panel"] }), d = J("div", {
      classList: ["size-buttons-wrapper"]
    });
    return s.appendChild(d), s;
  }
  _handleSizeChange(s) {
    if (s.target.classList.contains("size-button")) {
      const d = s.target.getAttribute("data-size-key");
      if (this.variantSizes[this.selectedIndex][d]) {
        this.shadowRoot.querySelectorAll(".size-button").forEach((w) => w.classList.remove("selected")), s.target.classList.add("selected");
        const a = this.variantSizes[this.selectedIndex][d];
        this.calculateAndApplyScale(a);
      }
    }
  }
  applyScale() {
    this.calculatedScale && this.modelViewer && (this.modelViewer.scale = `${this.calculatedScale.scaleX} ${this.calculatedScale.scaleY} ${this.calculatedScale.scaleZ}`, typeof this.modelViewer.updateFraming == "function" && requestAnimationFrame(() => {
      this.modelViewer.updateFraming(), document.dispatchEvent(this.scaleEvent);
    }));
  }
  async calculateAndApplyScale(s) {
    if (s)
      try {
        const d = await this.calculateModelScale(s);
        this.calculatedScale = d, this.applyScale();
      } catch {
      }
  }
  cmToMeters(s) {
    return parseFloat(s.replace("cm", "")) / 100;
  }
  calculateModelScale(s) {
    const d = this.originalSize || { x: 1, y: 1, z: 1 }, a = d.x, w = d.y, g = d.z, v = this.cmToMeters(s.width), x = this.cmToMeters(s.height), A = s.depth ? this.cmToMeters(s.depth) : 0.05, B = v / a, U = x / w, Y = A / g;
    return { scaleX: B, scaleY: U, scaleZ: Y };
  }
  cleanupBlobUrls() {
    Object.values(this.gifCache).forEach((s) => {
      URL.revokeObjectURL(s);
    }), this.gifCache = {};
  }
}
customElements.define("ardisplay-viewer", te);
document.addEventListener("DOMContentLoaded", () => {
  window.customElements.get("ardisplay-viewer") ? Dt() : window.customElements.whenDefined("ardisplay-viewer").then(Dt);
});
function Dt() {
  document.querySelectorAll("div.ardisplay-viewer").forEach((s) => {
    const d = document.createElement("ardisplay-viewer");
    for (Array.from(s.attributes).forEach((a) => {
      d.setAttribute(a.name, a.value);
    }); s.firstChild; )
      d.appendChild(s.firstChild);
    s.replaceWith(d);
  });
}
