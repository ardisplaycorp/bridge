function Bt(N) {
  return N && N.__esModule && Object.prototype.hasOwnProperty.call(N, "default") ? N.default : N;
}
var St = { exports: {} }, Rt = St.exports, $t;
function Dt() {
  return $t || ($t = 1, function(N, r) {
    (function(h, d) {
      N.exports = d();
    })(Rt, () => (() => {
      var h = { 873: (x, C) => {
        var L, R, W = function() {
          var U = function(t, o) {
            var i = t, e = dt[o], s = null, a = 0, l = null, p = [], g = {}, _ = function(c, w) {
              s = function(u) {
                for (var f = new Array(u), v = 0; v < u; v += 1) {
                  f[v] = new Array(u);
                  for (var k = 0; k < u; k += 1) f[v][k] = null;
                }
                return f;
              }(a = 4 * i + 17), y(0, 0), y(a - 7, 0), y(0, a - 7), z(), S(), M(c, w), i >= 7 && V(c), l == null && (l = I(i, e, p)), T(l, w);
            }, y = function(c, w) {
              for (var u = -1; u <= 7; u += 1) if (!(c + u <= -1 || a <= c + u)) for (var f = -1; f <= 7; f += 1) w + f <= -1 || a <= w + f || (s[c + u][w + f] = 0 <= u && u <= 6 && (f == 0 || f == 6) || 0 <= f && f <= 6 && (u == 0 || u == 6) || 2 <= u && u <= 4 && 2 <= f && f <= 4);
            }, S = function() {
              for (var c = 8; c < a - 8; c += 1) s[c][6] == null && (s[c][6] = c % 2 == 0);
              for (var w = 8; w < a - 8; w += 1) s[6][w] == null && (s[6][w] = w % 2 == 0);
            }, z = function() {
              for (var c = et.getPatternPosition(i), w = 0; w < c.length; w += 1) for (var u = 0; u < c.length; u += 1) {
                var f = c[w], v = c[u];
                if (s[f][v] == null) for (var k = -2; k <= 2; k += 1) for (var E = -2; E <= 2; E += 1) s[f + k][v + E] = k == -2 || k == 2 || E == -2 || E == 2 || k == 0 && E == 0;
              }
            }, V = function(c) {
              for (var w = et.getBCHTypeNumber(i), u = 0; u < 18; u += 1) {
                var f = !c && (w >> u & 1) == 1;
                s[Math.floor(u / 3)][u % 3 + a - 8 - 3] = f;
              }
              for (u = 0; u < 18; u += 1) f = !c && (w >> u & 1) == 1, s[u % 3 + a - 8 - 3][Math.floor(u / 3)] = f;
            }, M = function(c, w) {
              for (var u = e << 3 | w, f = et.getBCHTypeInfo(u), v = 0; v < 15; v += 1) {
                var k = !c && (f >> v & 1) == 1;
                v < 6 ? s[v][8] = k : v < 8 ? s[v + 1][8] = k : s[a - 15 + v][8] = k;
              }
              for (v = 0; v < 15; v += 1) k = !c && (f >> v & 1) == 1, v < 8 ? s[8][a - v - 1] = k : v < 9 ? s[8][15 - v - 1 + 1] = k : s[8][15 - v - 1] = k;
              s[a - 8][8] = !c;
            }, T = function(c, w) {
              for (var u = -1, f = a - 1, v = 7, k = 0, E = et.getMaskFunction(w), q = a - 1; q > 0; q -= 2) for (q == 6 && (q -= 1); ; ) {
                for (var P = 0; P < 2; P += 1) if (s[f][q - P] == null) {
                  var O = !1;
                  k < c.length && (O = (c[k] >>> v & 1) == 1), E(f, q - P) && (O = !O), s[f][q - P] = O, (v -= 1) == -1 && (k += 1, v = 7);
                }
                if ((f += u) < 0 || a <= f) {
                  f -= u, u = -u;
                  break;
                }
              }
            }, I = function(c, w, u) {
              for (var f = lt.getRSBlocks(c, w), v = gt(), k = 0; k < u.length; k += 1) {
                var E = u[k];
                v.put(E.getMode(), 4), v.put(E.getLength(), et.getLengthInBits(E.getMode(), c)), E.write(v);
              }
              var q = 0;
              for (k = 0; k < f.length; k += 1) q += f[k].dataCount;
              if (v.getLengthInBits() > 8 * q) throw "code length overflow. (" + v.getLengthInBits() + ">" + 8 * q + ")";
              for (v.getLengthInBits() + 4 <= 8 * q && v.put(0, 4); v.getLengthInBits() % 8 != 0; ) v.putBit(!1);
              for (; !(v.getLengthInBits() >= 8 * q || (v.put(236, 8), v.getLengthInBits() >= 8 * q)); ) v.put(17, 8);
              return function(P, O) {
                for (var B = 0, X = 0, F = 0, Z = new Array(O.length), Y = new Array(O.length), $ = 0; $ < O.length; $ += 1) {
                  var ct = O[$].dataCount, ft = O[$].totalCount - ct;
                  X = Math.max(X, ct), F = Math.max(F, ft), Z[$] = new Array(ct);
                  for (var H = 0; H < Z[$].length; H += 1) Z[$][H] = 255 & P.getBuffer()[H + B];
                  B += ct;
                  var st = et.getErrorCorrectPolynomial(ft), ot = rt(Z[$], st.getLength() - 1).mod(st);
                  for (Y[$] = new Array(st.getLength() - 1), H = 0; H < Y[$].length; H += 1) {
                    var at = H + ot.getLength() - Y[$].length;
                    Y[$][H] = at >= 0 ? ot.getAt(at) : 0;
                  }
                }
                var yt = 0;
                for (H = 0; H < O.length; H += 1) yt += O[H].totalCount;
                var mt = new Array(yt), nt = 0;
                for (H = 0; H < X; H += 1) for ($ = 0; $ < O.length; $ += 1) H < Z[$].length && (mt[nt] = Z[$][H], nt += 1);
                for (H = 0; H < F; H += 1) for ($ = 0; $ < O.length; $ += 1) H < Y[$].length && (mt[nt] = Y[$][H], nt += 1);
                return mt;
              }(v, f);
            };
            g.addData = function(c, w) {
              var u = null;
              switch (w = w || "Byte") {
                case "Numeric":
                  u = kt(c);
                  break;
                case "Alphanumeric":
                  u = Mt(c);
                  break;
                case "Byte":
                  u = ht(c);
                  break;
                case "Kanji":
                  u = wt(c);
                  break;
                default:
                  throw "mode:" + w;
              }
              p.push(u), l = null;
            }, g.isDark = function(c, w) {
              if (c < 0 || a <= c || w < 0 || a <= w) throw c + "," + w;
              return s[c][w];
            }, g.getModuleCount = function() {
              return a;
            }, g.make = function() {
              if (i < 1) {
                for (var c = 1; c < 40; c++) {
                  for (var w = lt.getRSBlocks(c, e), u = gt(), f = 0; f < p.length; f++) {
                    var v = p[f];
                    u.put(v.getMode(), 4), u.put(v.getLength(), et.getLengthInBits(v.getMode(), c)), v.write(u);
                  }
                  var k = 0;
                  for (f = 0; f < w.length; f++) k += w[f].dataCount;
                  if (u.getLengthInBits() <= 8 * k) break;
                }
                i = c;
              }
              _(!1, function() {
                for (var E = 0, q = 0, P = 0; P < 8; P += 1) {
                  _(!0, P);
                  var O = et.getLostPoint(g);
                  (P == 0 || E > O) && (E = O, q = P);
                }
                return q;
              }());
            }, g.createTableTag = function(c, w) {
              c = c || 2;
              var u = "";
              u += '<table style="', u += " border-width: 0px; border-style: none;", u += " border-collapse: collapse;", u += " padding: 0px; margin: " + (w = w === void 0 ? 4 * c : w) + "px;", u += '">', u += "<tbody>";
              for (var f = 0; f < g.getModuleCount(); f += 1) {
                u += "<tr>";
                for (var v = 0; v < g.getModuleCount(); v += 1) u += '<td style="', u += " border-width: 0px; border-style: none;", u += " border-collapse: collapse;", u += " padding: 0px; margin: 0px;", u += " width: " + c + "px;", u += " height: " + c + "px;", u += " background-color: ", u += g.isDark(f, v) ? "#000000" : "#ffffff", u += ";", u += '"/>';
                u += "</tr>";
              }
              return (u += "</tbody>") + "</table>";
            }, g.createSvgTag = function(c, w, u, f) {
              var v = {};
              typeof arguments[0] == "object" && (c = (v = arguments[0]).cellSize, w = v.margin, u = v.alt, f = v.title), c = c || 2, w = w === void 0 ? 4 * c : w, (u = typeof u == "string" ? { text: u } : u || {}).text = u.text || null, u.id = u.text ? u.id || "qrcode-description" : null, (f = typeof f == "string" ? { text: f } : f || {}).text = f.text || null, f.id = f.text ? f.id || "qrcode-title" : null;
              var k, E, q, P, O = g.getModuleCount() * c + 2 * w, B = "";
              for (P = "l" + c + ",0 0," + c + " -" + c + ",0 0,-" + c + "z ", B += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"', B += v.scalable ? "" : ' width="' + O + 'px" height="' + O + 'px"', B += ' viewBox="0 0 ' + O + " " + O + '" ', B += ' preserveAspectRatio="xMinYMin meet"', B += f.text || u.text ? ' role="img" aria-labelledby="' + A([f.id, u.id].join(" ").trim()) + '"' : "", B += ">", B += f.text ? '<title id="' + A(f.id) + '">' + A(f.text) + "</title>" : "", B += u.text ? '<description id="' + A(u.id) + '">' + A(u.text) + "</description>" : "", B += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>', B += '<path d="', E = 0; E < g.getModuleCount(); E += 1) for (q = E * c + w, k = 0; k < g.getModuleCount(); k += 1) g.isDark(E, k) && (B += "M" + (k * c + w) + "," + q + P);
              return (B += '" stroke="transparent" fill="black"/>') + "</svg>";
            }, g.createDataURL = function(c, w) {
              c = c || 2, w = w === void 0 ? 4 * c : w;
              var u = g.getModuleCount() * c + 2 * w, f = w, v = u - w;
              return n(u, u, function(k, E) {
                if (f <= k && k < v && f <= E && E < v) {
                  var q = Math.floor((k - f) / c), P = Math.floor((E - f) / c);
                  return g.isDark(P, q) ? 0 : 1;
                }
                return 1;
              });
            }, g.createImgTag = function(c, w, u) {
              c = c || 2, w = w === void 0 ? 4 * c : w;
              var f = g.getModuleCount() * c + 2 * w, v = "";
              return v += "<img", v += ' src="', v += g.createDataURL(c, w), v += '"', v += ' width="', v += f, v += '"', v += ' height="', v += f, v += '"', u && (v += ' alt="', v += A(u), v += '"'), v + "/>";
            };
            var A = function(c) {
              for (var w = "", u = 0; u < c.length; u += 1) {
                var f = c.charAt(u);
                switch (f) {
                  case "<":
                    w += "&lt;";
                    break;
                  case ">":
                    w += "&gt;";
                    break;
                  case "&":
                    w += "&amp;";
                    break;
                  case '"':
                    w += "&quot;";
                    break;
                  default:
                    w += f;
                }
              }
              return w;
            };
            return g.createASCII = function(c, w) {
              if ((c = c || 1) < 2) return function(Z) {
                Z = Z === void 0 ? 2 : Z;
                var Y, $, ct, ft, H, st = 1 * g.getModuleCount() + 2 * Z, ot = Z, at = st - Z, yt = { "██": "█", "█ ": "▀", " █": "▄", "  ": " " }, mt = { "██": "▀", "█ ": "▀", " █": " ", "  ": " " }, nt = "";
                for (Y = 0; Y < st; Y += 2) {
                  for (ct = Math.floor((Y - ot) / 1), ft = Math.floor((Y + 1 - ot) / 1), $ = 0; $ < st; $ += 1) H = "█", ot <= $ && $ < at && ot <= Y && Y < at && g.isDark(ct, Math.floor(($ - ot) / 1)) && (H = " "), ot <= $ && $ < at && ot <= Y + 1 && Y + 1 < at && g.isDark(ft, Math.floor(($ - ot) / 1)) ? H += " " : H += "█", nt += Z < 1 && Y + 1 >= at ? mt[H] : yt[H];
                  nt += `
`;
                }
                return st % 2 && Z > 0 ? nt.substring(0, nt.length - st - 1) + Array(st + 1).join("▀") : nt.substring(0, nt.length - 1);
              }(w);
              c -= 1, w = w === void 0 ? 2 * c : w;
              var u, f, v, k, E = g.getModuleCount() * c + 2 * w, q = w, P = E - w, O = Array(c + 1).join("██"), B = Array(c + 1).join("  "), X = "", F = "";
              for (u = 0; u < E; u += 1) {
                for (v = Math.floor((u - q) / c), F = "", f = 0; f < E; f += 1) k = 1, q <= f && f < P && q <= u && u < P && g.isDark(v, Math.floor((f - q) / c)) && (k = 0), F += k ? O : B;
                for (v = 0; v < c; v += 1) X += F + `
`;
              }
              return X.substring(0, X.length - 1);
            }, g.renderTo2dContext = function(c, w) {
              w = w || 2;
              for (var u = g.getModuleCount(), f = 0; f < u; f++) for (var v = 0; v < u; v++) c.fillStyle = g.isDark(f, v) ? "black" : "white", c.fillRect(f * w, v * w, w, w);
            }, g;
          };
          U.stringToBytes = (U.stringToBytesFuncs = { default: function(t) {
            for (var o = [], i = 0; i < t.length; i += 1) {
              var e = t.charCodeAt(i);
              o.push(255 & e);
            }
            return o;
          } }).default, U.createStringToBytes = function(t, o) {
            var i = function() {
              for (var s = D(t), a = function() {
                var S = s.read();
                if (S == -1) throw "eof";
                return S;
              }, l = 0, p = {}; ; ) {
                var g = s.read();
                if (g == -1) break;
                var _ = a(), y = a() << 8 | a();
                p[String.fromCharCode(g << 8 | _)] = y, l += 1;
              }
              if (l != o) throw l + " != " + o;
              return p;
            }(), e = 63;
            return function(s) {
              for (var a = [], l = 0; l < s.length; l += 1) {
                var p = s.charCodeAt(l);
                if (p < 128) a.push(p);
                else {
                  var g = i[s.charAt(l)];
                  typeof g == "number" ? (255 & g) == g ? a.push(g) : (a.push(g >>> 8), a.push(255 & g)) : a.push(e);
                }
              }
              return a;
            };
          };
          var K, G, Q, j, tt, dt = { L: 1, M: 0, Q: 3, H: 2 }, et = (K = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]], G = 1335, Q = 7973, tt = function(t) {
            for (var o = 0; t != 0; ) o += 1, t >>>= 1;
            return o;
          }, (j = {}).getBCHTypeInfo = function(t) {
            for (var o = t << 10; tt(o) - tt(G) >= 0; ) o ^= G << tt(o) - tt(G);
            return 21522 ^ (t << 10 | o);
          }, j.getBCHTypeNumber = function(t) {
            for (var o = t << 12; tt(o) - tt(Q) >= 0; ) o ^= Q << tt(o) - tt(Q);
            return t << 12 | o;
          }, j.getPatternPosition = function(t) {
            return K[t - 1];
          }, j.getMaskFunction = function(t) {
            switch (t) {
              case 0:
                return function(o, i) {
                  return (o + i) % 2 == 0;
                };
              case 1:
                return function(o, i) {
                  return o % 2 == 0;
                };
              case 2:
                return function(o, i) {
                  return i % 3 == 0;
                };
              case 3:
                return function(o, i) {
                  return (o + i) % 3 == 0;
                };
              case 4:
                return function(o, i) {
                  return (Math.floor(o / 2) + Math.floor(i / 3)) % 2 == 0;
                };
              case 5:
                return function(o, i) {
                  return o * i % 2 + o * i % 3 == 0;
                };
              case 6:
                return function(o, i) {
                  return (o * i % 2 + o * i % 3) % 2 == 0;
                };
              case 7:
                return function(o, i) {
                  return (o * i % 3 + (o + i) % 2) % 2 == 0;
                };
              default:
                throw "bad maskPattern:" + t;
            }
          }, j.getErrorCorrectPolynomial = function(t) {
            for (var o = rt([1], 0), i = 0; i < t; i += 1) o = o.multiply(rt([1, it.gexp(i)], 0));
            return o;
          }, j.getLengthInBits = function(t, o) {
            if (1 <= o && o < 10) switch (t) {
              case 1:
                return 10;
              case 2:
                return 9;
              case 4:
              case 8:
                return 8;
              default:
                throw "mode:" + t;
            }
            else if (o < 27) switch (t) {
              case 1:
                return 12;
              case 2:
                return 11;
              case 4:
                return 16;
              case 8:
                return 10;
              default:
                throw "mode:" + t;
            }
            else {
              if (!(o < 41)) throw "type:" + o;
              switch (t) {
                case 1:
                  return 14;
                case 2:
                  return 13;
                case 4:
                  return 16;
                case 8:
                  return 12;
                default:
                  throw "mode:" + t;
              }
            }
          }, j.getLostPoint = function(t) {
            for (var o = t.getModuleCount(), i = 0, e = 0; e < o; e += 1) for (var s = 0; s < o; s += 1) {
              for (var a = 0, l = t.isDark(e, s), p = -1; p <= 1; p += 1) if (!(e + p < 0 || o <= e + p)) for (var g = -1; g <= 1; g += 1) s + g < 0 || o <= s + g || p == 0 && g == 0 || l == t.isDark(e + p, s + g) && (a += 1);
              a > 5 && (i += 3 + a - 5);
            }
            for (e = 0; e < o - 1; e += 1) for (s = 0; s < o - 1; s += 1) {
              var _ = 0;
              t.isDark(e, s) && (_ += 1), t.isDark(e + 1, s) && (_ += 1), t.isDark(e, s + 1) && (_ += 1), t.isDark(e + 1, s + 1) && (_ += 1), _ != 0 && _ != 4 || (i += 3);
            }
            for (e = 0; e < o; e += 1) for (s = 0; s < o - 6; s += 1) t.isDark(e, s) && !t.isDark(e, s + 1) && t.isDark(e, s + 2) && t.isDark(e, s + 3) && t.isDark(e, s + 4) && !t.isDark(e, s + 5) && t.isDark(e, s + 6) && (i += 40);
            for (s = 0; s < o; s += 1) for (e = 0; e < o - 6; e += 1) t.isDark(e, s) && !t.isDark(e + 1, s) && t.isDark(e + 2, s) && t.isDark(e + 3, s) && t.isDark(e + 4, s) && !t.isDark(e + 5, s) && t.isDark(e + 6, s) && (i += 40);
            var y = 0;
            for (s = 0; s < o; s += 1) for (e = 0; e < o; e += 1) t.isDark(e, s) && (y += 1);
            return i + Math.abs(100 * y / o / o - 50) / 5 * 10;
          }, j), it = function() {
            for (var t = new Array(256), o = new Array(256), i = 0; i < 8; i += 1) t[i] = 1 << i;
            for (i = 8; i < 256; i += 1) t[i] = t[i - 4] ^ t[i - 5] ^ t[i - 6] ^ t[i - 8];
            for (i = 0; i < 255; i += 1) o[t[i]] = i;
            return { glog: function(e) {
              if (e < 1) throw "glog(" + e + ")";
              return o[e];
            }, gexp: function(e) {
              for (; e < 0; ) e += 255;
              for (; e >= 256; ) e -= 255;
              return t[e];
            } };
          }();
          function rt(t, o) {
            if (t.length === void 0) throw t.length + "/" + o;
            var i = function() {
              for (var s = 0; s < t.length && t[s] == 0; ) s += 1;
              for (var a = new Array(t.length - s + o), l = 0; l < t.length - s; l += 1) a[l] = t[l + s];
              return a;
            }(), e = { getAt: function(s) {
              return i[s];
            }, getLength: function() {
              return i.length;
            }, multiply: function(s) {
              for (var a = new Array(e.getLength() + s.getLength() - 1), l = 0; l < e.getLength(); l += 1) for (var p = 0; p < s.getLength(); p += 1) a[l + p] ^= it.gexp(it.glog(e.getAt(l)) + it.glog(s.getAt(p)));
              return rt(a, 0);
            }, mod: function(s) {
              if (e.getLength() - s.getLength() < 0) return e;
              for (var a = it.glog(e.getAt(0)) - it.glog(s.getAt(0)), l = new Array(e.getLength()), p = 0; p < e.getLength(); p += 1) l[p] = e.getAt(p);
              for (p = 0; p < s.getLength(); p += 1) l[p] ^= it.gexp(it.glog(s.getAt(p)) + a);
              return rt(l, 0).mod(s);
            } };
            return e;
          }
          var lt = /* @__PURE__ */ function() {
            var t = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], o = function(e, s) {
              var a = {};
              return a.totalCount = e, a.dataCount = s, a;
            }, i = { getRSBlocks: function(e, s) {
              var a = function(V, M) {
                switch (M) {
                  case dt.L:
                    return t[4 * (V - 1) + 0];
                  case dt.M:
                    return t[4 * (V - 1) + 1];
                  case dt.Q:
                    return t[4 * (V - 1) + 2];
                  case dt.H:
                    return t[4 * (V - 1) + 3];
                  default:
                    return;
                }
              }(e, s);
              if (a === void 0) throw "bad rs block @ typeNumber:" + e + "/errorCorrectionLevel:" + s;
              for (var l = a.length / 3, p = [], g = 0; g < l; g += 1) for (var _ = a[3 * g + 0], y = a[3 * g + 1], S = a[3 * g + 2], z = 0; z < _; z += 1) p.push(o(y, S));
              return p;
            } };
            return i;
          }(), gt = function() {
            var t = [], o = 0, i = { getBuffer: function() {
              return t;
            }, getAt: function(e) {
              var s = Math.floor(e / 8);
              return (t[s] >>> 7 - e % 8 & 1) == 1;
            }, put: function(e, s) {
              for (var a = 0; a < s; a += 1) i.putBit((e >>> s - a - 1 & 1) == 1);
            }, getLengthInBits: function() {
              return o;
            }, putBit: function(e) {
              var s = Math.floor(o / 8);
              t.length <= s && t.push(0), e && (t[s] |= 128 >>> o % 8), o += 1;
            } };
            return i;
          }, kt = function(t) {
            var o = t, i = { getMode: function() {
              return 1;
            }, getLength: function(a) {
              return o.length;
            }, write: function(a) {
              for (var l = o, p = 0; p + 2 < l.length; ) a.put(e(l.substring(p, p + 3)), 10), p += 3;
              p < l.length && (l.length - p == 1 ? a.put(e(l.substring(p, p + 1)), 4) : l.length - p == 2 && a.put(e(l.substring(p, p + 2)), 7));
            } }, e = function(a) {
              for (var l = 0, p = 0; p < a.length; p += 1) l = 10 * l + s(a.charAt(p));
              return l;
            }, s = function(a) {
              if ("0" <= a && a <= "9") return a.charCodeAt(0) - 48;
              throw "illegal char :" + a;
            };
            return i;
          }, Mt = function(t) {
            var o = t, i = { getMode: function() {
              return 2;
            }, getLength: function(s) {
              return o.length;
            }, write: function(s) {
              for (var a = o, l = 0; l + 1 < a.length; ) s.put(45 * e(a.charAt(l)) + e(a.charAt(l + 1)), 11), l += 2;
              l < a.length && s.put(e(a.charAt(l)), 6);
            } }, e = function(s) {
              if ("0" <= s && s <= "9") return s.charCodeAt(0) - 48;
              if ("A" <= s && s <= "Z") return s.charCodeAt(0) - 65 + 10;
              switch (s) {
                case " ":
                  return 36;
                case "$":
                  return 37;
                case "%":
                  return 38;
                case "*":
                  return 39;
                case "+":
                  return 40;
                case "-":
                  return 41;
                case ".":
                  return 42;
                case "/":
                  return 43;
                case ":":
                  return 44;
                default:
                  throw "illegal char :" + s;
              }
            };
            return i;
          }, ht = function(t) {
            var o = U.stringToBytes(t);
            return { getMode: function() {
              return 4;
            }, getLength: function(i) {
              return o.length;
            }, write: function(i) {
              for (var e = 0; e < o.length; e += 1) i.put(o[e], 8);
            } };
          }, wt = function(t) {
            var o = U.stringToBytesFuncs.SJIS;
            if (!o) throw "sjis not supported.";
            (function() {
              var s = o("友");
              if (s.length != 2 || (s[0] << 8 | s[1]) != 38726) throw "sjis not supported.";
            })();
            var i = o(t), e = { getMode: function() {
              return 8;
            }, getLength: function(s) {
              return ~~(i.length / 2);
            }, write: function(s) {
              for (var a = i, l = 0; l + 1 < a.length; ) {
                var p = (255 & a[l]) << 8 | 255 & a[l + 1];
                if (33088 <= p && p <= 40956) p -= 33088;
                else {
                  if (!(57408 <= p && p <= 60351)) throw "illegal char at " + (l + 1) + "/" + p;
                  p -= 49472;
                }
                p = 192 * (p >>> 8 & 255) + (255 & p), s.put(p, 13), l += 2;
              }
              if (l < a.length) throw "illegal char at " + (l + 1);
            } };
            return e;
          }, bt = function() {
            var t = [], o = { writeByte: function(i) {
              t.push(255 & i);
            }, writeShort: function(i) {
              o.writeByte(i), o.writeByte(i >>> 8);
            }, writeBytes: function(i, e, s) {
              e = e || 0, s = s || i.length;
              for (var a = 0; a < s; a += 1) o.writeByte(i[a + e]);
            }, writeString: function(i) {
              for (var e = 0; e < i.length; e += 1) o.writeByte(i.charCodeAt(e));
            }, toByteArray: function() {
              return t;
            }, toString: function() {
              var i = "";
              i += "[";
              for (var e = 0; e < t.length; e += 1) e > 0 && (i += ","), i += t[e];
              return i + "]";
            } };
            return o;
          }, D = function(t) {
            var o = t, i = 0, e = 0, s = 0, a = { read: function() {
              for (; s < 8; ) {
                if (i >= o.length) {
                  if (s == 0) return -1;
                  throw "unexpected end of file./" + s;
                }
                var p = o.charAt(i);
                if (i += 1, p == "=") return s = 0, -1;
                p.match(/^\s$/) || (e = e << 6 | l(p.charCodeAt(0)), s += 6);
              }
              var g = e >>> s - 8 & 255;
              return s -= 8, g;
            } }, l = function(p) {
              if (65 <= p && p <= 90) return p - 65;
              if (97 <= p && p <= 122) return p - 97 + 26;
              if (48 <= p && p <= 57) return p - 48 + 52;
              if (p == 43) return 62;
              if (p == 47) return 63;
              throw "c:" + p;
            };
            return a;
          }, n = function(t, o, i) {
            for (var e = function(y, S) {
              var z = y, V = S, M = new Array(y * S), T = { setPixel: function(c, w, u) {
                M[w * z + c] = u;
              }, write: function(c) {
                c.writeString("GIF87a"), c.writeShort(z), c.writeShort(V), c.writeByte(128), c.writeByte(0), c.writeByte(0), c.writeByte(0), c.writeByte(0), c.writeByte(0), c.writeByte(255), c.writeByte(255), c.writeByte(255), c.writeString(","), c.writeShort(0), c.writeShort(0), c.writeShort(z), c.writeShort(V), c.writeByte(0);
                var w = I(2);
                c.writeByte(2);
                for (var u = 0; w.length - u > 255; ) c.writeByte(255), c.writeBytes(w, u, 255), u += 255;
                c.writeByte(w.length - u), c.writeBytes(w, u, w.length - u), c.writeByte(0), c.writeString(";");
              } }, I = function(c) {
                for (var w = 1 << c, u = 1 + (1 << c), f = c + 1, v = A(), k = 0; k < w; k += 1) v.add(String.fromCharCode(k));
                v.add(String.fromCharCode(w)), v.add(String.fromCharCode(u));
                var E, q, P, O = bt(), B = (E = O, q = 0, P = 0, { write: function(Y, $) {
                  if (Y >>> $) throw "length over";
                  for (; q + $ >= 8; ) E.writeByte(255 & (Y << q | P)), $ -= 8 - q, Y >>>= 8 - q, P = 0, q = 0;
                  P |= Y << q, q += $;
                }, flush: function() {
                  q > 0 && E.writeByte(P);
                } });
                B.write(w, f);
                var X = 0, F = String.fromCharCode(M[X]);
                for (X += 1; X < M.length; ) {
                  var Z = String.fromCharCode(M[X]);
                  X += 1, v.contains(F + Z) ? F += Z : (B.write(v.indexOf(F), f), v.size() < 4095 && (v.size() == 1 << f && (f += 1), v.add(F + Z)), F = Z);
                }
                return B.write(v.indexOf(F), f), B.write(u, f), B.flush(), O.toByteArray();
              }, A = function() {
                var c = {}, w = 0, u = { add: function(f) {
                  if (u.contains(f)) throw "dup key:" + f;
                  c[f] = w, w += 1;
                }, size: function() {
                  return w;
                }, indexOf: function(f) {
                  return c[f];
                }, contains: function(f) {
                  return c[f] !== void 0;
                } };
                return u;
              };
              return T;
            }(t, o), s = 0; s < o; s += 1) for (var a = 0; a < t; a += 1) e.setPixel(a, s, i(a, s));
            var l = bt();
            e.write(l);
            for (var p = function() {
              var y = 0, S = 0, z = 0, V = "", M = {}, T = function(A) {
                V += String.fromCharCode(I(63 & A));
              }, I = function(A) {
                if (!(A < 0)) {
                  if (A < 26) return 65 + A;
                  if (A < 52) return A - 26 + 97;
                  if (A < 62) return A - 52 + 48;
                  if (A == 62) return 43;
                  if (A == 63) return 47;
                }
                throw "n:" + A;
              };
              return M.writeByte = function(A) {
                for (y = y << 8 | 255 & A, S += 8, z += 1; S >= 6; ) T(y >>> S - 6), S -= 6;
              }, M.flush = function() {
                if (S > 0 && (T(y << 6 - S), y = 0, S = 0), z % 3 != 0) for (var A = 3 - z % 3, c = 0; c < A; c += 1) V += "=";
              }, M.toString = function() {
                return V;
              }, M;
            }(), g = l.toByteArray(), _ = 0; _ < g.length; _ += 1) p.writeByte(g[_]);
            return p.flush(), "data:image/gif;base64," + p;
          };
          return U;
        }();
        W.stringToBytesFuncs["UTF-8"] = function(U) {
          return function(K) {
            for (var G = [], Q = 0; Q < K.length; Q++) {
              var j = K.charCodeAt(Q);
              j < 128 ? G.push(j) : j < 2048 ? G.push(192 | j >> 6, 128 | 63 & j) : j < 55296 || j >= 57344 ? G.push(224 | j >> 12, 128 | j >> 6 & 63, 128 | 63 & j) : (Q++, j = 65536 + ((1023 & j) << 10 | 1023 & K.charCodeAt(Q)), G.push(240 | j >> 18, 128 | j >> 12 & 63, 128 | j >> 6 & 63, 128 | 63 & j));
            }
            return G;
          }(U);
        }, (R = typeof (L = function() {
          return W;
        }) == "function" ? L.apply(C, []) : L) === void 0 || (x.exports = R);
      } }, d = {};
      function b(x) {
        var C = d[x];
        if (C !== void 0) return C.exports;
        var L = d[x] = { exports: {} };
        return h[x](L, L.exports, b), L.exports;
      }
      b.n = (x) => {
        var C = x && x.__esModule ? () => x.default : () => x;
        return b.d(C, { a: C }), C;
      }, b.d = (x, C) => {
        for (var L in C) b.o(C, L) && !b.o(x, L) && Object.defineProperty(x, L, { enumerable: !0, get: C[L] });
      }, b.o = (x, C) => Object.prototype.hasOwnProperty.call(x, C);
      var m = {};
      return (() => {
        b.d(m, { default: () => bt });
        const x = (D) => !!D && typeof D == "object" && !Array.isArray(D);
        function C(D, ...n) {
          if (!n.length) return D;
          const t = n.shift();
          return t !== void 0 && x(D) && x(t) ? (D = Object.assign({}, D), Object.keys(t).forEach((o) => {
            const i = D[o], e = t[o];
            Array.isArray(i) && Array.isArray(e) ? D[o] = e : x(i) && x(e) ? D[o] = C(Object.assign({}, i), e) : D[o] = e;
          }), C(D, ...n)) : D;
        }
        function L(D, n) {
          const t = document.createElement("a");
          t.download = n, t.href = D, document.body.appendChild(t), t.click(), document.body.removeChild(t);
        }
        const R = { L: 0.07, M: 0.15, Q: 0.25, H: 0.3 };
        class W {
          constructor({ svg: n, type: t, window: o }) {
            this._svg = n, this._type = t, this._window = o;
          }
          draw(n, t, o, i) {
            let e;
            switch (this._type) {
              case "dots":
                e = this._drawDot;
                break;
              case "classy":
                e = this._drawClassy;
                break;
              case "classy-rounded":
                e = this._drawClassyRounded;
                break;
              case "rounded":
                e = this._drawRounded;
                break;
              case "extra-rounded":
                e = this._drawExtraRounded;
                break;
              default:
                e = this._drawSquare;
            }
            e.call(this, { x: n, y: t, size: o, getNeighbor: i });
          }
          _rotateFigure({ x: n, y: t, size: o, rotation: i = 0, draw: e }) {
            var s;
            const a = n + o / 2, l = t + o / 2;
            e(), (s = this._element) === null || s === void 0 || s.setAttribute("transform", `rotate(${180 * i / Math.PI},${a},${l})`);
          }
          _basicDot(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "circle"), this._element.setAttribute("cx", String(o + t / 2)), this._element.setAttribute("cy", String(i + t / 2)), this._element.setAttribute("r", String(t / 2));
            } }));
          }
          _basicSquare(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect"), this._element.setAttribute("x", String(o)), this._element.setAttribute("y", String(i)), this._element.setAttribute("width", String(t)), this._element.setAttribute("height", String(t));
            } }));
          }
          _basicSideRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ` + t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, 0 ${-t}`);
            } }));
          }
          _basicCornerRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ${t}v ` + -t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, ${-t / 2} ${-t / 2}`);
            } }));
          }
          _basicCornerExtraRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ${t}a ${t} ${t}, 0, 0, 0, ${-t} ${-t}`);
            } }));
          }
          _basicCornersRounded(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${o} ${i}v ` + t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, ${t / 2} ${t / 2}h ` + t / 2 + "v " + -t / 2 + `a ${t / 2} ${t / 2}, 0, 0, 0, ${-t / 2} ${-t / 2}`);
            } }));
          }
          _drawDot({ x: n, y: t, size: o }) {
            this._basicDot({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawSquare({ x: n, y: t, size: o }) {
            this._basicSquare({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawRounded({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, s = i ? +i(1, 0) : 0, a = i ? +i(0, -1) : 0, l = i ? +i(0, 1) : 0, p = e + s + a + l;
            if (p !== 0) if (p > 2 || e && s || a && l) this._basicSquare({ x: n, y: t, size: o, rotation: 0 });
            else {
              if (p === 2) {
                let g = 0;
                return e && a ? g = Math.PI / 2 : a && s ? g = Math.PI : s && l && (g = -Math.PI / 2), void this._basicCornerRounded({ x: n, y: t, size: o, rotation: g });
              }
              if (p === 1) {
                let g = 0;
                return a ? g = Math.PI / 2 : s ? g = Math.PI : l && (g = -Math.PI / 2), void this._basicSideRounded({ x: n, y: t, size: o, rotation: g });
              }
            }
            else this._basicDot({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawExtraRounded({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, s = i ? +i(1, 0) : 0, a = i ? +i(0, -1) : 0, l = i ? +i(0, 1) : 0, p = e + s + a + l;
            if (p !== 0) if (p > 2 || e && s || a && l) this._basicSquare({ x: n, y: t, size: o, rotation: 0 });
            else {
              if (p === 2) {
                let g = 0;
                return e && a ? g = Math.PI / 2 : a && s ? g = Math.PI : s && l && (g = -Math.PI / 2), void this._basicCornerExtraRounded({ x: n, y: t, size: o, rotation: g });
              }
              if (p === 1) {
                let g = 0;
                return a ? g = Math.PI / 2 : s ? g = Math.PI : l && (g = -Math.PI / 2), void this._basicSideRounded({ x: n, y: t, size: o, rotation: g });
              }
            }
            else this._basicDot({ x: n, y: t, size: o, rotation: 0 });
          }
          _drawClassy({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, s = i ? +i(1, 0) : 0, a = i ? +i(0, -1) : 0, l = i ? +i(0, 1) : 0;
            e + s + a + l !== 0 ? e || a ? s || l ? this._basicSquare({ x: n, y: t, size: o, rotation: 0 }) : this._basicCornerRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 }) : this._basicCornerRounded({ x: n, y: t, size: o, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 });
          }
          _drawClassyRounded({ x: n, y: t, size: o, getNeighbor: i }) {
            const e = i ? +i(-1, 0) : 0, s = i ? +i(1, 0) : 0, a = i ? +i(0, -1) : 0, l = i ? +i(0, 1) : 0;
            e + s + a + l !== 0 ? e || a ? s || l ? this._basicSquare({ x: n, y: t, size: o, rotation: 0 }) : this._basicCornerExtraRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 }) : this._basicCornerExtraRounded({ x: n, y: t, size: o, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: n, y: t, size: o, rotation: Math.PI / 2 });
          }
        }
        class U {
          constructor({ svg: n, type: t, window: o }) {
            this._svg = n, this._type = t, this._window = o;
          }
          draw(n, t, o, i) {
            let e;
            switch (this._type) {
              case "square":
                e = this._drawSquare;
                break;
              case "extra-rounded":
                e = this._drawExtraRounded;
                break;
              default:
                e = this._drawDot;
            }
            e.call(this, { x: n, y: t, size: o, rotation: i });
          }
          _rotateFigure({ x: n, y: t, size: o, rotation: i = 0, draw: e }) {
            var s;
            const a = n + o / 2, l = t + o / 2;
            e(), (s = this._element) === null || s === void 0 || s.setAttribute("transform", `rotate(${180 * i / Math.PI},${a},${l})`);
          }
          _basicDot(n) {
            const { size: t, x: o, y: i } = n, e = t / 7;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${o + t / 2} ${i}a ${t / 2} ${t / 2} 0 1 0 0.1 0zm 0 ${e}a ${t / 2 - e} ${t / 2 - e} 0 1 1 -0.1 0Z`);
            } }));
          }
          _basicSquare(n) {
            const { size: t, x: o, y: i } = n, e = t / 7;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${o} ${i}v ${t}h ${t}v ` + -t + `zM ${o + e} ${i + e}h ` + (t - 2 * e) + "v " + (t - 2 * e) + "h " + (2 * e - t) + "z");
            } }));
          }
          _basicExtraRounded(n) {
            const { size: t, x: o, y: i } = n, e = t / 7;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${o} ${i + 2.5 * e}v ` + 2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * e} ${2.5 * e}h ` + 2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * e} ${2.5 * -e}v ` + -2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * -e} ${2.5 * -e}h ` + -2 * e + `a ${2.5 * e} ${2.5 * e}, 0, 0, 0, ${2.5 * -e} ${2.5 * e}M ${o + 2.5 * e} ${i + e}h ` + 2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * e} ${1.5 * e}v ` + 2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * -e} ${1.5 * e}h ` + -2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * -e} ${1.5 * -e}v ` + -2 * e + `a ${1.5 * e} ${1.5 * e}, 0, 0, 1, ${1.5 * e} ${1.5 * -e}`);
            } }));
          }
          _drawDot({ x: n, y: t, size: o, rotation: i }) {
            this._basicDot({ x: n, y: t, size: o, rotation: i });
          }
          _drawSquare({ x: n, y: t, size: o, rotation: i }) {
            this._basicSquare({ x: n, y: t, size: o, rotation: i });
          }
          _drawExtraRounded({ x: n, y: t, size: o, rotation: i }) {
            this._basicExtraRounded({ x: n, y: t, size: o, rotation: i });
          }
        }
        class K {
          constructor({ svg: n, type: t, window: o }) {
            this._svg = n, this._type = t, this._window = o;
          }
          draw(n, t, o, i) {
            let e;
            e = this._type === "square" ? this._drawSquare : this._drawDot, e.call(this, { x: n, y: t, size: o, rotation: i });
          }
          _rotateFigure({ x: n, y: t, size: o, rotation: i = 0, draw: e }) {
            var s;
            const a = n + o / 2, l = t + o / 2;
            e(), (s = this._element) === null || s === void 0 || s.setAttribute("transform", `rotate(${180 * i / Math.PI},${a},${l})`);
          }
          _basicDot(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "circle"), this._element.setAttribute("cx", String(o + t / 2)), this._element.setAttribute("cy", String(i + t / 2)), this._element.setAttribute("r", String(t / 2));
            } }));
          }
          _basicSquare(n) {
            const { size: t, x: o, y: i } = n;
            this._rotateFigure(Object.assign(Object.assign({}, n), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect"), this._element.setAttribute("x", String(o)), this._element.setAttribute("y", String(i)), this._element.setAttribute("width", String(t)), this._element.setAttribute("height", String(t));
            } }));
          }
          _drawDot({ x: n, y: t, size: o, rotation: i }) {
            this._basicDot({ x: n, y: t, size: o, rotation: i });
          }
          _drawSquare({ x: n, y: t, size: o, rotation: i }) {
            this._basicSquare({ x: n, y: t, size: o, rotation: i });
          }
        }
        const G = "circle", Q = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]], j = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        class tt {
          constructor(n, t) {
            this._roundSize = (o) => this._options.dotsOptions.roundSize ? Math.floor(o) : o, this._window = t, this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "svg"), this._element.setAttribute("width", String(n.width)), this._element.setAttribute("height", String(n.height)), this._element.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), n.dotsOptions.roundSize || this._element.setAttribute("shape-rendering", "crispEdges"), this._element.setAttribute("viewBox", `0 0 ${n.width} ${n.height}`), this._defs = this._window.document.createElementNS("http://www.w3.org/2000/svg", "defs"), this._element.appendChild(this._defs), this._imageUri = n.image, this._instanceId = tt.instanceCount++, this._options = n;
          }
          get width() {
            return this._options.width;
          }
          get height() {
            return this._options.height;
          }
          getElement() {
            return this._element;
          }
          async drawQR(n) {
            const t = n.getModuleCount(), o = Math.min(this._options.width, this._options.height) - 2 * this._options.margin, i = this._options.shape === G ? o / Math.sqrt(2) : o, e = this._roundSize(i / t);
            let s = { hideXDots: 0, hideYDots: 0, width: 0, height: 0 };
            if (this._qr = n, this._options.image) {
              if (await this.loadImage(), !this._image) return;
              const { imageOptions: a, qrOptions: l } = this._options, p = a.imageSize * R[l.errorCorrectionLevel], g = Math.floor(p * t * t);
              s = function({ originalHeight: _, originalWidth: y, maxHiddenDots: S, maxHiddenAxisDots: z, dotSize: V }) {
                const M = { x: 0, y: 0 }, T = { x: 0, y: 0 };
                if (_ <= 0 || y <= 0 || S <= 0 || V <= 0) return { height: 0, width: 0, hideYDots: 0, hideXDots: 0 };
                const I = _ / y;
                return M.x = Math.floor(Math.sqrt(S / I)), M.x <= 0 && (M.x = 1), z && z < M.x && (M.x = z), M.x % 2 == 0 && M.x--, T.x = M.x * V, M.y = 1 + 2 * Math.ceil((M.x * I - 1) / 2), T.y = Math.round(T.x * I), (M.y * M.x > S || z && z < M.y) && (z && z < M.y ? (M.y = z, M.y % 2 == 0 && M.x--) : M.y -= 2, T.y = M.y * V, M.x = 1 + 2 * Math.ceil((M.y / I - 1) / 2), T.x = Math.round(T.y / I)), { height: T.y, width: T.x, hideYDots: M.y, hideXDots: M.x };
              }({ originalWidth: this._image.width, originalHeight: this._image.height, maxHiddenDots: g, maxHiddenAxisDots: t - 14, dotSize: e });
            }
            this.drawBackground(), this.drawDots((a, l) => {
              var p, g, _, y, S, z;
              return !(this._options.imageOptions.hideBackgroundDots && a >= (t - s.hideYDots) / 2 && a < (t + s.hideYDots) / 2 && l >= (t - s.hideXDots) / 2 && l < (t + s.hideXDots) / 2 || !((p = Q[a]) === null || p === void 0) && p[l] || !((g = Q[a - t + 7]) === null || g === void 0) && g[l] || !((_ = Q[a]) === null || _ === void 0) && _[l - t + 7] || !((y = j[a]) === null || y === void 0) && y[l] || !((S = j[a - t + 7]) === null || S === void 0) && S[l] || !((z = j[a]) === null || z === void 0) && z[l - t + 7]);
            }), this.drawCorners(), this._options.image && await this.drawImage({ width: s.width, height: s.height, count: t, dotSize: e });
          }
          drawBackground() {
            var n, t, o;
            const i = this._element, e = this._options;
            if (i) {
              const s = (n = e.backgroundOptions) === null || n === void 0 ? void 0 : n.gradient, a = (t = e.backgroundOptions) === null || t === void 0 ? void 0 : t.color;
              let l = e.height, p = e.width;
              if (s || a) {
                const g = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
                this._backgroundClipPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._backgroundClipPath.setAttribute("id", `clip-path-background-color-${this._instanceId}`), this._defs.appendChild(this._backgroundClipPath), !((o = e.backgroundOptions) === null || o === void 0) && o.round && (l = p = Math.min(e.width, e.height), g.setAttribute("rx", String(l / 2 * e.backgroundOptions.round))), g.setAttribute("x", String(this._roundSize((e.width - p) / 2))), g.setAttribute("y", String(this._roundSize((e.height - l) / 2))), g.setAttribute("width", String(p)), g.setAttribute("height", String(l)), this._backgroundClipPath.appendChild(g), this._createColor({ options: s, color: a, additionalRotation: 0, x: 0, y: 0, height: e.height, width: e.width, name: `background-color-${this._instanceId}` });
              }
            }
          }
          drawDots(n) {
            var t, o;
            if (!this._qr) throw "QR code is not defined";
            const i = this._options, e = this._qr.getModuleCount();
            if (e > i.width || e > i.height) throw "The canvas is too small.";
            const s = Math.min(i.width, i.height) - 2 * i.margin, a = i.shape === G ? s / Math.sqrt(2) : s, l = this._roundSize(a / e), p = this._roundSize((i.width - e * l) / 2), g = this._roundSize((i.height - e * l) / 2), _ = new W({ svg: this._element, type: i.dotsOptions.type, window: this._window });
            this._dotsClipPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._dotsClipPath.setAttribute("id", `clip-path-dot-color-${this._instanceId}`), this._defs.appendChild(this._dotsClipPath), this._createColor({ options: (t = i.dotsOptions) === null || t === void 0 ? void 0 : t.gradient, color: i.dotsOptions.color, additionalRotation: 0, x: 0, y: 0, height: i.height, width: i.width, name: `dot-color-${this._instanceId}` });
            for (let y = 0; y < e; y++) for (let S = 0; S < e; S++) n && !n(y, S) || !((o = this._qr) === null || o === void 0) && o.isDark(y, S) && (_.draw(p + S * l, g + y * l, l, (z, V) => !(S + z < 0 || y + V < 0 || S + z >= e || y + V >= e) && !(n && !n(y + V, S + z)) && !!this._qr && this._qr.isDark(y + V, S + z)), _._element && this._dotsClipPath && this._dotsClipPath.appendChild(_._element));
            if (i.shape === G) {
              const y = this._roundSize((s / l - e) / 2), S = e + 2 * y, z = p - y * l, V = g - y * l, M = [], T = this._roundSize(S / 2);
              for (let I = 0; I < S; I++) {
                M[I] = [];
                for (let A = 0; A < S; A++) I >= y - 1 && I <= S - y && A >= y - 1 && A <= S - y || Math.sqrt((I - T) * (I - T) + (A - T) * (A - T)) > T ? M[I][A] = 0 : M[I][A] = this._qr.isDark(A - 2 * y < 0 ? A : A >= e ? A - 2 * y : A - y, I - 2 * y < 0 ? I : I >= e ? I - 2 * y : I - y) ? 1 : 0;
              }
              for (let I = 0; I < S; I++) for (let A = 0; A < S; A++) M[I][A] && (_.draw(z + A * l, V + I * l, l, (c, w) => {
                var u;
                return !!(!((u = M[I + w]) === null || u === void 0) && u[A + c]);
              }), _._element && this._dotsClipPath && this._dotsClipPath.appendChild(_._element));
            }
          }
          drawCorners() {
            if (!this._qr) throw "QR code is not defined";
            const n = this._element, t = this._options;
            if (!n) throw "Element code is not defined";
            const o = this._qr.getModuleCount(), i = Math.min(t.width, t.height) - 2 * t.margin, e = t.shape === G ? i / Math.sqrt(2) : i, s = this._roundSize(e / o), a = 7 * s, l = 3 * s, p = this._roundSize((t.width - o * s) / 2), g = this._roundSize((t.height - o * s) / 2);
            [[0, 0, 0], [1, 0, Math.PI / 2], [0, 1, -Math.PI / 2]].forEach(([_, y, S]) => {
              var z, V, M, T, I, A, c, w, u, f, v, k;
              const E = p + _ * s * (o - 7), q = g + y * s * (o - 7);
              let P = this._dotsClipPath, O = this._dotsClipPath;
              if ((!((z = t.cornersSquareOptions) === null || z === void 0) && z.gradient || !((V = t.cornersSquareOptions) === null || V === void 0) && V.color) && (P = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), P.setAttribute("id", `clip-path-corners-square-color-${_}-${y}-${this._instanceId}`), this._defs.appendChild(P), this._cornersSquareClipPath = this._cornersDotClipPath = O = P, this._createColor({ options: (M = t.cornersSquareOptions) === null || M === void 0 ? void 0 : M.gradient, color: (T = t.cornersSquareOptions) === null || T === void 0 ? void 0 : T.color, additionalRotation: S, x: E, y: q, height: a, width: a, name: `corners-square-color-${_}-${y}-${this._instanceId}` })), (I = t.cornersSquareOptions) === null || I === void 0 ? void 0 : I.type) {
                const B = new U({ svg: this._element, type: t.cornersSquareOptions.type, window: this._window });
                B.draw(E, q, a, S), B._element && P && P.appendChild(B._element);
              } else {
                const B = new W({ svg: this._element, type: t.dotsOptions.type, window: this._window });
                for (let X = 0; X < Q.length; X++) for (let F = 0; F < Q[X].length; F++) !((A = Q[X]) === null || A === void 0) && A[F] && (B.draw(E + F * s, q + X * s, s, (Z, Y) => {
                  var $;
                  return !!(!(($ = Q[X + Y]) === null || $ === void 0) && $[F + Z]);
                }), B._element && P && P.appendChild(B._element));
              }
              if ((!((c = t.cornersDotOptions) === null || c === void 0) && c.gradient || !((w = t.cornersDotOptions) === null || w === void 0) && w.color) && (O = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), O.setAttribute("id", `clip-path-corners-dot-color-${_}-${y}-${this._instanceId}`), this._defs.appendChild(O), this._cornersDotClipPath = O, this._createColor({ options: (u = t.cornersDotOptions) === null || u === void 0 ? void 0 : u.gradient, color: (f = t.cornersDotOptions) === null || f === void 0 ? void 0 : f.color, additionalRotation: S, x: E + 2 * s, y: q + 2 * s, height: l, width: l, name: `corners-dot-color-${_}-${y}-${this._instanceId}` })), (v = t.cornersDotOptions) === null || v === void 0 ? void 0 : v.type) {
                const B = new K({ svg: this._element, type: t.cornersDotOptions.type, window: this._window });
                B.draw(E + 2 * s, q + 2 * s, l, S), B._element && O && O.appendChild(B._element);
              } else {
                const B = new W({ svg: this._element, type: t.dotsOptions.type, window: this._window });
                for (let X = 0; X < j.length; X++) for (let F = 0; F < j[X].length; F++) !((k = j[X]) === null || k === void 0) && k[F] && (B.draw(E + F * s, q + X * s, s, (Z, Y) => {
                  var $;
                  return !!(!(($ = j[X + Y]) === null || $ === void 0) && $[F + Z]);
                }), B._element && O && O.appendChild(B._element));
              }
            });
          }
          loadImage() {
            return new Promise((n, t) => {
              var o;
              const i = this._options;
              if (!i.image) return t("Image is not defined");
              if (!((o = i.nodeCanvas) === null || o === void 0) && o.loadImage) i.nodeCanvas.loadImage(i.image).then((e) => {
                var s, a;
                if (this._image = e, this._options.imageOptions.saveAsBlob) {
                  const l = (s = i.nodeCanvas) === null || s === void 0 ? void 0 : s.createCanvas(this._image.width, this._image.height);
                  (a = l == null ? void 0 : l.getContext("2d")) === null || a === void 0 || a.drawImage(e, 0, 0), this._imageUri = l == null ? void 0 : l.toDataURL();
                }
                n();
              }).catch(t);
              else {
                const e = new this._window.Image();
                typeof i.imageOptions.crossOrigin == "string" && (e.crossOrigin = i.imageOptions.crossOrigin), this._image = e, e.onload = async () => {
                  this._options.imageOptions.saveAsBlob && (this._imageUri = await async function(s, a) {
                    return new Promise((l) => {
                      const p = new a.XMLHttpRequest();
                      p.onload = function() {
                        const g = new a.FileReader();
                        g.onloadend = function() {
                          l(g.result);
                        }, g.readAsDataURL(p.response);
                      }, p.open("GET", s), p.responseType = "blob", p.send();
                    });
                  }(i.image || "", this._window)), n();
                }, e.src = i.image;
              }
            });
          }
          async drawImage({ width: n, height: t, count: o, dotSize: i }) {
            const e = this._options, s = this._roundSize((e.width - o * i) / 2), a = this._roundSize((e.height - o * i) / 2), l = s + this._roundSize(e.imageOptions.margin + (o * i - n) / 2), p = a + this._roundSize(e.imageOptions.margin + (o * i - t) / 2), g = n - 2 * e.imageOptions.margin, _ = t - 2 * e.imageOptions.margin, y = this._window.document.createElementNS("http://www.w3.org/2000/svg", "image");
            y.setAttribute("href", this._imageUri || ""), y.setAttribute("x", String(l)), y.setAttribute("y", String(p)), y.setAttribute("width", `${g}px`), y.setAttribute("height", `${_}px`), this._element.appendChild(y);
          }
          _createColor({ options: n, color: t, additionalRotation: o, x: i, y: e, height: s, width: a, name: l }) {
            const p = a > s ? a : s, g = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
            if (g.setAttribute("x", String(i)), g.setAttribute("y", String(e)), g.setAttribute("height", String(s)), g.setAttribute("width", String(a)), g.setAttribute("clip-path", `url('#clip-path-${l}')`), n) {
              let _;
              if (n.type === "radial") _ = this._window.document.createElementNS("http://www.w3.org/2000/svg", "radialGradient"), _.setAttribute("id", l), _.setAttribute("gradientUnits", "userSpaceOnUse"), _.setAttribute("fx", String(i + a / 2)), _.setAttribute("fy", String(e + s / 2)), _.setAttribute("cx", String(i + a / 2)), _.setAttribute("cy", String(e + s / 2)), _.setAttribute("r", String(p / 2));
              else {
                const y = ((n.rotation || 0) + o) % (2 * Math.PI), S = (y + 2 * Math.PI) % (2 * Math.PI);
                let z = i + a / 2, V = e + s / 2, M = i + a / 2, T = e + s / 2;
                S >= 0 && S <= 0.25 * Math.PI || S > 1.75 * Math.PI && S <= 2 * Math.PI ? (z -= a / 2, V -= s / 2 * Math.tan(y), M += a / 2, T += s / 2 * Math.tan(y)) : S > 0.25 * Math.PI && S <= 0.75 * Math.PI ? (V -= s / 2, z -= a / 2 / Math.tan(y), T += s / 2, M += a / 2 / Math.tan(y)) : S > 0.75 * Math.PI && S <= 1.25 * Math.PI ? (z += a / 2, V += s / 2 * Math.tan(y), M -= a / 2, T -= s / 2 * Math.tan(y)) : S > 1.25 * Math.PI && S <= 1.75 * Math.PI && (V += s / 2, z += a / 2 / Math.tan(y), T -= s / 2, M -= a / 2 / Math.tan(y)), _ = this._window.document.createElementNS("http://www.w3.org/2000/svg", "linearGradient"), _.setAttribute("id", l), _.setAttribute("gradientUnits", "userSpaceOnUse"), _.setAttribute("x1", String(Math.round(z))), _.setAttribute("y1", String(Math.round(V))), _.setAttribute("x2", String(Math.round(M))), _.setAttribute("y2", String(Math.round(T)));
              }
              n.colorStops.forEach(({ offset: y, color: S }) => {
                const z = this._window.document.createElementNS("http://www.w3.org/2000/svg", "stop");
                z.setAttribute("offset", 100 * y + "%"), z.setAttribute("stop-color", S), _.appendChild(z);
              }), g.setAttribute("fill", `url('#${l}')`), this._defs.appendChild(_);
            } else t && g.setAttribute("fill", t);
            this._element.appendChild(g);
          }
        }
        tt.instanceCount = 0;
        const dt = tt, et = "canvas", it = {};
        for (let D = 0; D <= 40; D++) it[D] = D;
        const rt = { type: et, shape: "square", width: 300, height: 300, data: "", margin: 0, qrOptions: { typeNumber: it[0], mode: void 0, errorCorrectionLevel: "Q" }, imageOptions: { saveAsBlob: !0, hideBackgroundDots: !0, imageSize: 0.4, crossOrigin: void 0, margin: 0 }, dotsOptions: { type: "square", color: "#000", roundSize: !0 }, backgroundOptions: { round: 0, color: "#fff" } };
        function lt(D) {
          const n = Object.assign({}, D);
          if (!n.colorStops || !n.colorStops.length) throw "Field 'colorStops' is required in gradient";
          return n.rotation ? n.rotation = Number(n.rotation) : n.rotation = 0, n.colorStops = n.colorStops.map((t) => Object.assign(Object.assign({}, t), { offset: Number(t.offset) })), n;
        }
        function gt(D) {
          const n = Object.assign({}, D);
          return n.width = Number(n.width), n.height = Number(n.height), n.margin = Number(n.margin), n.imageOptions = Object.assign(Object.assign({}, n.imageOptions), { hideBackgroundDots: !!n.imageOptions.hideBackgroundDots, imageSize: Number(n.imageOptions.imageSize), margin: Number(n.imageOptions.margin) }), n.margin > Math.min(n.width, n.height) && (n.margin = Math.min(n.width, n.height)), n.dotsOptions = Object.assign({}, n.dotsOptions), n.dotsOptions.gradient && (n.dotsOptions.gradient = lt(n.dotsOptions.gradient)), n.cornersSquareOptions && (n.cornersSquareOptions = Object.assign({}, n.cornersSquareOptions), n.cornersSquareOptions.gradient && (n.cornersSquareOptions.gradient = lt(n.cornersSquareOptions.gradient))), n.cornersDotOptions && (n.cornersDotOptions = Object.assign({}, n.cornersDotOptions), n.cornersDotOptions.gradient && (n.cornersDotOptions.gradient = lt(n.cornersDotOptions.gradient))), n.backgroundOptions && (n.backgroundOptions = Object.assign({}, n.backgroundOptions), n.backgroundOptions.gradient && (n.backgroundOptions.gradient = lt(n.backgroundOptions.gradient))), n;
        }
        var kt = b(873), Mt = b.n(kt);
        function ht(D) {
          if (!D) throw new Error("Extension must be defined");
          D[0] === "." && (D = D.substring(1));
          const n = { bmp: "image/bmp", gif: "image/gif", ico: "image/vnd.microsoft.icon", jpeg: "image/jpeg", jpg: "image/jpeg", png: "image/png", svg: "image/svg+xml", tif: "image/tiff", tiff: "image/tiff", webp: "image/webp", pdf: "application/pdf" }[D.toLowerCase()];
          if (!n) throw new Error(`Extension "${D}" is not supported`);
          return n;
        }
        class wt {
          constructor(n) {
            n != null && n.jsdom ? this._window = new n.jsdom("", { resources: "usable" }).window : this._window = window, this._options = n ? gt(C(rt, n)) : rt, this.update();
          }
          static _clearContainer(n) {
            n && (n.innerHTML = "");
          }
          _setupSvg() {
            if (!this._qr) return;
            const n = new dt(this._options, this._window);
            this._svg = n.getElement(), this._svgDrawingPromise = n.drawQR(this._qr).then(() => {
              var t;
              this._svg && ((t = this._extension) === null || t === void 0 || t.call(this, n.getElement(), this._options));
            });
          }
          _setupCanvas() {
            var n, t;
            this._qr && (!((n = this._options.nodeCanvas) === null || n === void 0) && n.createCanvas ? (this._nodeCanvas = this._options.nodeCanvas.createCanvas(this._options.width, this._options.height), this._nodeCanvas.width = this._options.width, this._nodeCanvas.height = this._options.height) : (this._domCanvas = document.createElement("canvas"), this._domCanvas.width = this._options.width, this._domCanvas.height = this._options.height), this._setupSvg(), this._canvasDrawingPromise = (t = this._svgDrawingPromise) === null || t === void 0 ? void 0 : t.then(() => {
              var o;
              if (!this._svg) return;
              const i = this._svg, e = new this._window.XMLSerializer().serializeToString(i), s = btoa(e), a = `data:${ht("svg")};base64,${s}`;
              if (!((o = this._options.nodeCanvas) === null || o === void 0) && o.loadImage) return this._options.nodeCanvas.loadImage(a).then((l) => {
                var p, g;
                l.width = this._options.width, l.height = this._options.height, (g = (p = this._nodeCanvas) === null || p === void 0 ? void 0 : p.getContext("2d")) === null || g === void 0 || g.drawImage(l, 0, 0);
              });
              {
                const l = new this._window.Image();
                return new Promise((p) => {
                  l.onload = () => {
                    var g, _;
                    (_ = (g = this._domCanvas) === null || g === void 0 ? void 0 : g.getContext("2d")) === null || _ === void 0 || _.drawImage(l, 0, 0), p();
                  }, l.src = a;
                });
              }
            }));
          }
          async _getElement(n = "png") {
            if (!this._qr) throw "QR code is empty";
            return n.toLowerCase() === "svg" ? (this._svg && this._svgDrawingPromise || this._setupSvg(), await this._svgDrawingPromise, this._svg) : ((this._domCanvas || this._nodeCanvas) && this._canvasDrawingPromise || this._setupCanvas(), await this._canvasDrawingPromise, this._domCanvas || this._nodeCanvas);
          }
          update(n) {
            wt._clearContainer(this._container), this._options = n ? gt(C(this._options, n)) : this._options, this._options.data && (this._qr = Mt()(this._options.qrOptions.typeNumber, this._options.qrOptions.errorCorrectionLevel), this._qr.addData(this._options.data, this._options.qrOptions.mode || function(t) {
              switch (!0) {
                case /^[0-9]*$/.test(t):
                  return "Numeric";
                case /^[0-9A-Z $%*+\-./:]*$/.test(t):
                  return "Alphanumeric";
                default:
                  return "Byte";
              }
            }(this._options.data)), this._qr.make(), this._options.type === et ? this._setupCanvas() : this._setupSvg(), this.append(this._container));
          }
          append(n) {
            if (n) {
              if (typeof n.appendChild != "function") throw "Container should be a single DOM node";
              this._options.type === et ? this._domCanvas && n.appendChild(this._domCanvas) : this._svg && n.appendChild(this._svg), this._container = n;
            }
          }
          applyExtension(n) {
            if (!n) throw "Extension function should be defined.";
            this._extension = n, this.update();
          }
          deleteExtension() {
            this._extension = void 0, this.update();
          }
          async getRawData(n = "png") {
            if (!this._qr) throw "QR code is empty";
            const t = await this._getElement(n), o = ht(n);
            if (!t) return null;
            if (n.toLowerCase() === "svg") {
              const i = `<?xml version="1.0" standalone="no"?>\r
${new this._window.XMLSerializer().serializeToString(t)}`;
              return typeof Blob > "u" || this._options.jsdom ? Buffer.from(i) : new Blob([i], { type: o });
            }
            return new Promise((i) => {
              const e = t;
              if ("toBuffer" in e) if (o === "image/png") i(e.toBuffer(o));
              else if (o === "image/jpeg") i(e.toBuffer(o));
              else {
                if (o !== "application/pdf") throw Error("Unsupported extension");
                i(e.toBuffer(o));
              }
              else "toBlob" in e && e.toBlob(i, o, 1);
            });
          }
          async download(n) {
            if (!this._qr) throw "QR code is empty";
            if (typeof Blob > "u") throw "Cannot download in Node.js, call getRawData instead.";
            let t = "png", o = "qr";
            typeof n == "string" ? (t = n, console.warn("Extension is deprecated as argument for 'download' method, please pass object { name: '...', extension: '...' } as argument")) : typeof n == "object" && n !== null && (n.name && (o = n.name), n.extension && (t = n.extension));
            const i = await this._getElement(t);
            if (i) if (t.toLowerCase() === "svg") {
              let e = new XMLSerializer().serializeToString(i);
              e = `<?xml version="1.0" standalone="no"?>\r
` + e, L(`data:${ht(t)};charset=utf-8,${encodeURIComponent(e)}`, `${o}.svg`);
            } else L(i.toDataURL(ht(t)), `${o}.${t}`);
          }
        }
        const bt = wt;
      })(), m.default;
    })());
  }(St)), St.exports;
}
var Ot = Dt();
const It = /* @__PURE__ */ Bt(Ot), At = () => `
        <!-- Template for hotspots -->
        <button data-hotspot slot="hotspot-dot+X-Y+Z" class="dot" data-position="1 -1 1" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dim+X-Y" class="dim" data-position="1 -1 0" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dot+X-Y-Z" class="dot" data-position="1 -1 -1" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dim+X-Z" class="dim" data-position="1 0 -1" data-normal="1 0 0"></button>
        <button data-hotspot slot="hotspot-dot+X+Y-Z" class="dot" data-position="1 1 -1" data-normal="0 1 0"></button>
        <button data-hotspot slot="hotspot-dim+Y-Z" class="dim" data-position="0 -1 -1" data-normal="0 1 0"></button>
        <button data-hotspot slot="hotspot-dot-X+Y-Z" class="dot" data-position="-1 1 -1" data-normal="0 1 0"></button>
        <button data-hotspot slot="hotspot-dim-X-Z" class="dim" data-position="-1 0 -1" data-normal="-1 0 0"></button>
        <button data-hotspot slot="hotspot-dot-X-Y-Z" class="dot" data-position="-1 -1 -1" data-normal="-1 0 0"></button>
        <button data-hotspot slot="hotspot-dim-X-Y" class="dim" data-position="-1 -1 0" data-normal="-1 0 0"></button>
        <button data-hotspot slot="hotspot-dot-X-Y+Z" class="dot" data-position="-1 -1 1" data-normal="-1 0 0"></button>
        <svg id="dimLines" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" class="dimensionLineContainer">
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
            <line class="dimensionLine"></line>
        </svg>
    `;
function zt(N) {
  let r = "";
  function h(m) {
    return m.trim().startsWith("@media");
  }
  function d(m) {
    return m.replace(/([A-Z])/g, "-$1").toLowerCase();
  }
  function b(m, x) {
    let C = "";
    const L = "  ".repeat(x);
    for (const R in m)
      if (Object.prototype.hasOwnProperty.call(m, R)) {
        const W = m[R];
        if (typeof W == "object" && !Array.isArray(W))
          C += `
${L}${R} {`, C += b(W, x + 1), C += `
${L}}`;
        else {
          const U = d(R);
          C += `
${L}${U}: ${W};`;
        }
      }
    return C;
  }
  for (const m in N)
    if (Object.prototype.hasOwnProperty.call(N, m)) {
      const x = N[m];
      typeof x == "object" ? (r += `${m} {`, h(m), r += b(x, 1), r += `
}
`) : typeof x == "string" && (r += `${m} {
  ${x}
}
`);
    }
  return r;
}
const Ct = "https://cdn.statically.io/gh/ardisplaycorp/bridge/v1.3.0/build", xt = "https://ardisplaybridge.vercel.app", Pt = {
  ".normal-view-container": {
    width: "100%",
    height: "100%",
    display: "block",
    fontFamily: "sans-serif",
    position: "relative"
  },
  ".qr-code-button": {
    all: "unset",
    position: "absolute",
    top: "0",
    right: "0",
    background: "white",
    cursor: "pointer",
    padding: "10px",
    zIndex: "1000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  }
}, jt = (N, r, h, d, b, m) => {
  const x = zt(Pt), C = At();
  return `
        <!-- Template for modal view -->
        <style>${x}</style>
        <div class="normal-view-container">
            <model-viewer
                ar="${N}"
                shadow-intensity="${m.shadow}"
                ar-placement="${m.placement}"
                ar-modes="webxr scene-viewer quick-look"
                ar-scale="fixed"
                camera-controls="true"
                disable-pan="true"
                disable-tap="true"
                interaction-prompt="none"
                interpolation-decay="40"
                touch-action="none"
                max-field-of-view="auto"
                field-of-view="auto"
                camera-orbit="0deg 75deg 105%"
                ar-status="not-presenting"
            >
                ${C}
                <button class="qr-code-button" style="background-color: ${m.arBtn.btnBgColor};color: ${m.arBtn.btnTextColor};border-radius: ${m.arBtn.cornerRadius}px;font-size: ${m.arBtn.btnSize}px;">
                    ${m.arBtn.btnIcon ? `<i data-lucide="${m.arBtn.btnIcon}" style="width: 24px; height: 24px;color: inherit;"></i>` : ""}
                    ${m.arBtn.btnText}
                </button>
            </model-viewer>
            <!-- QR Code Modal -->
            <div id="qrModal" class="qr-modal">
                <div class="qr-modal-content" style="display: flex; flex-direction: row;text-align: center;overflow: hidden;">
                <button class="qr-close-button">×</button>
                <div style="width: 50%; height:100%;flex-grow: 0; flex-shrink: 0;display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px;">
                    <h2>
                        <p id="btn-text" style="margin: 0">${m.title}</p>
                    </h2>
                    <p data-id="qrcode-info" class="translate-lang" style="margin:0">${m.description}</p>
                    <div class="qr-code-container">
                        <div id="qr-code"></div>
                    </div>
                </div>
                <div style="width: 50%; height:100%; flex-grow: 0; flex-shrink: 0;">
                    <img src="${Ct}/1.webp" alt="Artwork" style="width: 100%; height: 100%; object-fit: cover; object-position: center;">
                </div>
                </div>
            </div>
        </div>
    `;
}, Vt = {
  ".custom-model-viewer-container": {
    position: "relative",
    width: "100%",
    height: "100%",
    display: "block",
    fontFamily: "sans-serif"
  },
  ".preview-image": {
    width: "100%",
    height: "100%",
    objectFit: "contain",
    display: "block"
  },
  ".view-3d-button": {
    position: "absolute",
    bottom: "10px",
    right: "10px",
    padding: "10px 20px",
    backgroundColor: "rgba(0, 0, 0, 0.75)",
    color: "white",
    border: "none",
    borderRadius: "50px",
    cursor: "pointer",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  },
  ".view-3d-button svg": {
    fill: "white"
  },
  ".model-viewer-container": {
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "calc(100% - 96px)",
    height: "calc(100% - 96px)",
    display: "none",
    backgroundColor: "white",
    flexDirection: "row",
    zIndex: "1000"
  },
  ".close-button": {
    position: "absolute",
    top: "10px",
    right: "10px",
    background: "none",
    border: "none",
    cursor: "pointer",
    padding: "0"
  },
  ".close-button svg": {
    width: "24px",
    height: "24px",
    fill: "black"
  },
  ".overlay": {
    content: '""',
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "100vw",
    height: "100vh",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    zIndex: "-1",
    display: "none"
  },
  ".details-panel": {
    width: "400px",
    height: "100%",
    backgroundColor: "white",
    display: "flex",
    flexDirection: "column"
  },
  "@media only screen and (max-width: 900px)": {
    ".model-viewer-container": {
      width: "100%",
      height: "calc(100% - 48px)",
      transform: "translate(-50%, 0)",
      top: "48px"
    },
    ".details-panel": {
      display: "none"
    },
    ".overlay": {
      top: "-48px"
    }
  },
  ".qr-code-button": {
    all: "unset",
    position: "absolute",
    top: "50px",
    right: "50%",
    transform: "translateX(50%)",
    background: "white",
    cursor: "pointer",
    padding: "10px",
    zIndex: "1000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  }
}, Tt = (N, r, h, d, b, m) => {
  const x = zt(Vt), C = At();
  return `
        <!-- Template for modal view -->
        <style>${x}</style>
        <div class="custom-model-viewer-container">
            <img class="preview-image" src="${m.options[0].image}" alt="Model Preview">
            <button class="view-3d-button">
                <svg viewBox="0 0 24 24" focusable="false" width="24" height="24" aria-hidden="true" class="pip-svg-icon pip-btn__icon"><path d="M11 16.9766c.3294.0154.663.0233 1 .0233 2.2351 0 4.3234-.3458 6-.9495 1.7881-.6438 4-1.8975 4-4.0505 0-1.9568-1.8939-3.1985-3.5147-3.864l-1.5605 1.5606C17.8623 9.9943 20 10.7292 20 11.9999c0 .9329-1.2789 1.5728-2 1.8958-1.8614.8335-3.9768 1.1042-6 1.1042-.3392 0-.6729-.0088-1-.0257v-1.9743l-3 3 3 3v2.0233zm2-9.9532A21.3903 21.3903 0 0 0 12.0001 7c-2.235 0-4.3234.3457-6 .9494-1.7881.6438-4 1.8976-4 4.0506 0 1.9568 1.894 3.1984 3.5146 3.8639l1.5606-1.5605C6.1378 14.0057 4 13.2707 4 12.0001c0-.9329 1.2789-1.5729 2-1.8958 1.8614-.8336 3.9767-1.1042 6-1.1042.3392 0 .6729.0087.9999.0257V11l3-3-3-3v2.0234z"></path></svg>
                View in 3D
            </button>
            <div class="model-viewer-container">
                <model-viewer  
                    ar="${N}"
                    shadow-intensity="${m.shadow}"
                    ar-placement="${m.placement}"
                    ar-modes="webxr scene-viewer quick-look"
                    ar-scale="fixed"
                    camera-controls="true"
                    disable-pan="true"
                    disable-tap="true"
                    interaction-prompt="none"
                    interpolation-decay="40"
                    touch-action="none"
                    max-field-of-view="auto"
                    field-of-view="auto"
                    camera-orbit="0deg 75deg 105%"
                    ar-status="not-presenting"
                >
                    ${C}
                    <button class="qr-code-button" style="background-color: ${m.arBtn.btnBgColor};color: ${m.arBtn.btnTextColor};border-radius: ${m.arBtn.cornerRadius}px;font-size: ${m.arBtn.btnSize}px;">
                        ${m.arBtn.btnIcon ? `<i data-lucide="${m.arBtn.btnIcon}" style="width: 24px; height: 24px;color: inherit;"></i>` : ""}
                        ${m.arBtn.btnText}
                    </button>
                </model-viewer>
                <button class="close-button">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                </button>
                <div class="details-panel">
                    <div class="ar-display-custom-panel"></div>
                </div>
            </div>
            <div class="overlay"></div>
        </div>
        <!-- QR Code Modal -->
        <div id="qrModal" class="qr-modal">
            <div class="qr-modal-content" style="display: flex; flex-direction: row;text-align: center;overflow: hidden;">
            <button class="qr-close-button">×</button>
            <div style="width: 50%; height:100%;flex-grow: 0; flex-shrink: 0;display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px;">
                <h2>
                    <p id="btn-text" style="margin: 0">${m.title}</p>
                </h2>
                <p data-id="qrcode-info" class="translate-lang" style="margin:0">${m.description}</p>
                <div class="qr-code-container">
                    <div id="qr-code"></div>
                </div>
            </div>
            <div style="width: 50%; height:100%; flex-grow: 0; flex-shrink: 0;">
                <img src="${Ct}/1.webp" alt="Artwork" style="width: 100%; height: 100%; object-fit: cover; object-position: center;">
            </div>
            </div>
        </div>
    `;
}, Ht = {
  "model-viewer": {
    top: 0,
    left: 0,
    opacity: 0,
    zIndex: -100,
    position: "absolute"
  },
  ".qr-code-button": {
    all: "unset",
    background: "white",
    cursor: "pointer",
    padding: "10px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "10px"
  }
}, Nt = (N, r, h, d, b, m) => {
  const x = zt(Ht), C = At();
  return `
        <!-- Template for modal view -->
        <style>${x}</style>
        <button class="qr-code-button" style="background-color: ${m.arBtn.btnBgColor};color: ${m.arBtn.btnTextColor};border-radius: ${m.arBtn.cornerRadius}px;font-size: ${m.arBtn.btnSize}px;">
            ${m.arBtn.btnIcon ? `<i data-lucide="${m.arBtn.btnIcon}" style="width: 24px; height: 24px;color: inherit;"></i>` : ""}
            ${m.arBtn.btnText}
        </button>
        <model-viewer
            ar="${N}"
            shadow-intensity="${m.shadow}"
            ar-placement="${m.placement}"
            ar-modes="webxr scene-viewer quick-look"
            ar-scale="fixed"
            camera-controls="true"
            disable-pan="true"
            disable-tap="true"
            interaction-prompt="none"
            interpolation-decay="40"
            touch-action="none"
            max-field-of-view="auto"
            field-of-view="auto"
            camera-orbit="0deg 75deg 105%"
            ar-status="not-presenting"
        >
            ${C}
        </model-viewer>
        <!-- QR Code Modal -->
        <div id="qrModal" class="qr-modal">
            <div class="qr-modal-content" style="display: flex; flex-direction: row;text-align: center;overflow: hidden;">
            <button class="qr-close-button">×</button>
            <div style="width: 50%; height:100%;flex-grow: 0; flex-shrink: 0;display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px;">
                <h2>
                    <p id="btn-text" style="margin: 0">${m.title}</p>
                </h2>
                <p data-id="qrcode-info" class="translate-lang" style="margin:0">${m.description}</p>
                <div class="qr-code-container">
                    <div id="qr-code"></div>
                </div>
            </div>
            <div style="width: 50%; height:100%; flex-grow: 0; flex-shrink: 0;">
                <img src="${Ct}/1.webp" alt="Artwork" style="width: 100%; height: 100%; object-fit: cover; object-position: center;">
            </div>
            </div>
        </div>
    `;
};
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const pt = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Xt = [
  "svg",
  pt,
  [
    ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1" }],
    [
      "path",
      {
        d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3"
      }
    ]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ft = [
  "svg",
  pt,
  [
    [
      "path",
      {
        d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"
      }
    ],
    ["path", { d: "m3.3 7 8.7 5 8.7-5" }],
    ["path", { d: "M12 22V12" }]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Yt = [
  "svg",
  pt,
  [
    [
      "path",
      {
        d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
      }
    ],
    ["circle", { cx: "12", cy: "12", r: "3" }]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Zt = [
  "svg",
  pt,
  [
    ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" }],
    ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { d: "m8 18 4-4" }],
    ["path", { d: "M8 10v8h8" }]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ut = [
  "svg",
  pt,
  [
    [
      "path",
      {
        d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"
      }
    ],
    ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814" }],
    [
      "path",
      {
        d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4"
      }
    ]
  ]
];
/**
 * @license lucide v0.469.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Qt = [
  "svg",
  pt,
  [
    ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2" }]
  ]
];
async function _t() {
  if (!window.customElements.get("model-viewer"))
    try {
      return await import("./model-viewer-CciDq4qR.js"), !0;
    } catch (N) {
      return console.error("Failed to load model-viewer:", N), !1;
    }
  return !0;
}
const Wt = (N) => btoa(N), J = (N, r = {}) => {
  const h = document.createElement(N);
  return r.classList && r.classList.forEach((d) => h.classList.add(d)), r.textContent && (h.textContent = r.textContent), r.attributes && Object.entries(r.attributes).forEach(([d, b]) => {
    h.setAttribute(d, b);
  }), h;
}, vt = {
  debug: (...N) => {
  },
  error: (...N) => {
  },
  warn: (...N) => {
  }
};
class Gt {
  constructor(r, h) {
    this.container = r, this.modelData = h, this.qrCode = null;
  }
  async loadImage(r) {
    return new Promise((h, d) => {
      const b = new Image();
      b.onload = () => h(), b.onerror = b.onabort = () => d(new Error("Image failed to load")), b.src = r;
    });
  }
  async updateQrCode(r) {
    var m;
    this.container.firstChild && this.container.removeChild(this.container.firstChild);
    const h = (m = this.modelData) == null ? void 0 : m.qrCode;
    let d = h == null ? void 0 : h.faviconUrl;
    if (d)
      try {
        await this.loadImage(d);
      } catch {
        d = null;
      }
    const b = {
      width: parseInt(h.QRsize) || 240,
      height: parseInt(h.QRsize) || 240,
      data: r,
      dotsOptions: {
        color: h.dotColor || "#000000",
        type: h.dotStyle || "square"
      },
      cornersSquareOptions: {
        color: h.cornerColor || "#000000",
        type: h.cornerStyle || "square"
      },
      cornersDotOptions: {
        color: h.cornerDotColor || "#000000",
        type: h.cornerDotStyle || "square"
      },
      backgroundOptions: {
        color: h.backgroundColor || "#ffffff"
      }
    };
    d && (b.image = d, b.imageOptions = {
      margin: parseInt(h.faviconMargin) || 0
    }), this.qrCode = new It(b), this.qrCode.append(this.container);
  }
}
const Lt = document.createElement("template");
Lt.innerHTML = `
  <div class="progress-modal" id="progressModal" style="display: none;">
    <div class="progress-content">
      <button class="progress-close-button">&times;</button>
      <h3 class="progress-text">Loading...</h3>
      <div class="progress-bar">
        <div class="progress-bar-fill" id="progressBarFill"></div>
      </div>
    </div>
  </div>
  <style>
    .progress-modal {
      position: fixed;
      z-index: 9999;
      width: 100vw;
      height: 100vh;
      top: 0;
      left: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      background: rgba(0,0,0,0.5);
    }
    .progress-content {
      position: relative;
      text-align: center;
      font-family: sans-serif;
    }
    .progress-text {
      color:white;
    }
    .progress-bar {
      width: 200px;
      background: transparent;
      border: 2px solid white;
      border-radius: 4px;
      margin-top: 16px;
      overflow: hidden;
    }
    .progress-bar-fill {
      width: 0;
      height: 8px;
      background: white;
      transition: width 0.2s linear;
    }
    .ar-button {
      margin-top: 16px;
      padding: 8px 16px;
      background: #0072f5;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      display: none;
    }
    .ar-button:hover {
      background: #0058bc;
    }
    .progress-close-button {
      position: absolute;
      top: 5px;
      right: 5px;
      width: 30px;
      height: 30px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #666;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: color 0.2s;
    }
    .progress-close-button:hover {
      color: #333;
    }
  </style>
`;
const ut = [
  {
    title: "Scanning",
    description: "Stand several feet back. With camera facing wall, make sweeping motion side to side, up and down."
  },
  {
    title: "Basics",
    description: "Wall should be well lit. Crop furnishings from initial view. Step back once picture is mounted."
  },
  {
    title: "Blank wall space",
    description: "Mount picture onto another object on the same wall. Hold finger on picture to move with camera into place."
  },
  {
    title: "Featureless wall",
    description: "Tape a newspaper or other graphical item to wall. Mount picture then slide it over to cover paper."
  },
  {
    title: "Ready to view",
    description: "Get started with AR view"
  }
], Et = document.createElement("template");
Et.innerHTML = `
  <div class="multi-steps-overlay" style="display: none;">
    <div class="overlay-bg" style="
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.6);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      z-index: 9998;
    ">
      <div class="steps-close-button" style="
        position: absolute;
        top: 10px;
        right: 10px;
        width: 30px;
        height: 30px;
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        border: none;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
      ">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </div>
    </div>
    <div class="multi-steps-modal" style="
      position: fixed;
      bottom: .5rem;
      left: 50%;
      transform: translateX(-50%);
      width: calc(100% - 1rem);
      height: fit-content;
      background-color: rgba(255, 255, 255, 0.85);
      -webkit-backdrop-filter: blur(15px);
      backdrop-filter: blur(15px);
      z-index: 9999;
      border-radius: 10px;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      padding: 15px;
    ">
      <div class="steps-header" style="padding: 1rem;">
        <div class="step-indicator active"></div>
        <div class="step-indicator"></div>
        <div class="step-indicator"></div>
        <div class="step-indicator"></div>
        <div class="step-indicator"></div>
      </div>
      <div class="steps-content" style="padding: 1rem; flex: 1;">
        <img src="${Ct}/wall-art-instructions-1-anim.gif" class="steps-gif" alt="Computer man">
        <h3 class="translate-lang instructions-title">Scanning</h3>
        <div class="instructions-body translate-lang" data-id="space-info">Stand several feet back. With camera facing wall, make sweeping motion side to side, up and down.</div>
      </div>
      <div class="steps-footer" style="
        display: flex; 
        justify-content: flex-end; 
        flex-direction:column;
        gap: 0.5rem; 
        border-top: 1px solid #ccc; 
        font-size: 16px;
        font-weight: bold;
        line-height: 1.5;
        padding: 8px;
        width: 75%;
        max-width: 100%;
        margin: 10px auto;
      ">
        <button class="next-button multi-button">Next</button>
        <button class="skip-button multi-button">Skip</button>
      </div>
    </div>
  </div>
  <style>
    /* You can customize these classes as well */
    .multi-steps-overlay.show {
      display: block;
    }

    .steps-gif{
      width:100%;
      height:auto;
    }

    .view-wall-button{
      width: 100%;
    }

    .view-wall-button svg{
      width: 24px;
      height: 24px;
      margin-right: 8px;
      fill: white;
      stroke: white;
    }

    .instructions-body {
        font-size: 16px;
        line-height: 1.5;
        color: #272727;
        margin: 10px 0 10px 0;
        text-align: left;
        font-family:sans-serif;
    }

    h3 {
        font-size: 20px;
        font-weight: bold;
        font-family:sans-serif;
        line-height: 1.5;
        margin: 5px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin: 10px 10px 10px 10px;
    }

    .steps-header{
      display:flex;
      flex-direction:row;
      width:80%;
      gap:12px;
      margin:auto;
    }

    .steps-content{
      display:flex;
      flex-direction:column;
      justify-content: center;
      align-items: center;
      overflow:hidden;
    }

    .step-indicator{
      height:6px;
      background:#bbbbbb;
      flex:1;
    }

    .step-indicator.active{
      background:black;
    }

    .multi-button{
      padding-block: .5rem;
      cursor:pointer;
      height:45px;
      border-radius:10px;
      flex-shrink:0;
      font-weight:bold;
    }

    .next-button{
      background:black;
      color:white;
    }

    .skip-button{
      border:none;
      color:gray;
      text-decoration:underline;
    }
  </style>
`;
class Kt extends HTMLElement {
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.selectedIndex = 0, this.calculatedScale = null, this.modelData = null, this.originalSize = null, this.variants = [], this.variantSizes = [], this.scaleEvent = new Event("scale", { bubbles: !0, composed: !0 }), this.isModelLoaded = !1, this.userClickedAR = !1, this.currentStep = 1, this.totalSteps = 5, this.qrCodeManager = null, this.qrModal = null, this.modelViewer = null, this.debouncedRenderSVG = this.animationFrameDebounce(this._renderSVG), this.debouncedUpdateDimensionHotspots = this.animationFrameDebounce(
      this._updateDimensionHotspots
    );
  }
  // Debounce using requestAnimationFrame
  animationFrameDebounce(r) {
    let h = !1;
    return (...d) => {
      h || (h = !0, requestAnimationFrame(() => {
        r.apply(this, d), h = !1;
      }));
    };
  }
  debounce(r, h) {
    let d;
    return function(...b) {
      const m = this;
      clearTimeout(d), d = setTimeout(() => r.apply(m, b), h);
    };
  }
  _sendShortStatsEvent(r, h = "") {
    var b;
    vt.debug(this.modelData);
    const d = {
      dmodelId: ((b = this.modelData) == null ? void 0 : b.modelId) || "no-model-id",
      action: r,
      browser: navigator.userAgent,
      message: h || void 0
    };
    fetch("https://v2.ardisplay.io/api/stats", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(d)
    }).then((m) => {
      m.ok || vt.error("Error sending stats:", m.status);
    }).catch((m) => {
    });
  }
  async connectedCallback() {
    this._getAttributes(), await this._getModelData(), this.styles = this._consolidateStyles(), this.shadowRoot.appendChild(this.styles), this._loadTemplate(this.modelData.mode), this._moveSlottedContent(), this.shadowRoot.appendChild(Lt.content.cloneNode(!0)), this.shadowRoot.appendChild(Et.content.cloneNode(!0));
    const r = this.shadowRoot.querySelector(".skip-button"), h = this.shadowRoot.querySelector(".next-button"), d = this.shadowRoot.querySelector(".steps-close-button");
    r == null || r.addEventListener("click", () => this._skipToLast()), h == null || h.addEventListener("click", () => this._goToNextStep()), d == null || d.addEventListener("click", () => {
      const L = this.shadowRoot.querySelector(
        ".multi-steps-overlay"
      );
      L && (L.style.display = "none");
    });
    const b = this.shadowRoot.querySelector("#progressModal"), m = this.shadowRoot.querySelector(".progress-content"), x = this.shadowRoot.querySelector(".progress-close-button");
    b && x && (x.addEventListener("click", () => {
      b.style.display = "none";
    }), b.addEventListener("click", (L) => {
      m.contains(L.target) || (b.style.display = "none");
    })), this.modelViewer = this.shadowRoot.querySelector("model-viewer"), this._setupEventListeners(), this._sendShortStatsEvent("View");
    const C = J("div", {
      classList: ["bottom-container"]
    });
    this.modelViewer.appendChild(C), this._setupCartButton(C), this._setupBottomNavBar(C);
  }
  _showStepsModal() {
    const r = this.shadowRoot.querySelector(".multi-steps-overlay");
    r && (r.style.display = "block");
  }
  _skipToLast() {
    this.currentStep = this.totalSteps, this.shadowRoot.querySelectorAll(".step-indicator").forEach((r, h) => {
      h <= this.currentStep - 1 && r.classList.add("active");
    });
  }
  _goToNextStep() {
    if (this.currentStep < this.totalSteps)
      if (this.currentStep++, this.shadowRoot.querySelectorAll(".step-indicator").forEach((r, h) => {
        r.classList.remove("active"), h <= this.currentStep - 1 && r.classList.add("active");
      }), this.currentStep === this.totalSteps) {
        const r = this.shadowRoot.querySelector(".steps-content"), h = this.shadowRoot.querySelector(".next-button"), d = this.shadowRoot.querySelector(".skip-button");
        r.innerHTML = `
          <img src="${this.modelData.options[0].image}" 
               class="steps-gif" 
               alt="Product preview"
               style="width: 100%;">
          <h3 class="instructions-title">${ut[this.currentStep - 1].title}</h3>
          <div class="instructions-body">${ut[this.currentStep - 1].description}</div>
          <button class="view-wall-button" style="
            background: black;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            margin-top: 16px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            ">
              <svg version="1.1" id="icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                  viewBox="0 0 50 50" enable-background="new 0 0 50 50" xml:space="preserve">
              <g>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M33.002,49H44c2.762,0,5-2.239,5-5V32.626"/>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M1,33v10.999c0,2.763,2.24,5,5,5h11"/>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M17,1H6C3.238,1,1,3.238,1,6v11"/>
                <path fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="
                  M49,16.625V6c0-2.762-2.238-5-5-5H33.002"/>
                <g>
                  <path d="M39,39c0,1.104-1.116,2-2.22,2L14.89,35C13.785,35,13,34.104,13,33V17c0-1.104,0.676-2,1.78-2l22.11-6
                    C37.994,9,39,9.896,39,11V39z M23.686,29.171c-0.59,0.588-0.59,1.541,0,2.129c0.293,0.295,0.678,0.441,1.064,0.441
                    c0.385,0,0.77-0.146,1.064-0.441l4.377-4.376l4.199,4.198c0.588,0.59,1.541,0.59,2.129,0c0.588-0.588,0.588-1.541,0-2.129
                    l-5.264-5.264c-0.588-0.59-1.541-0.59-2.129,0l-1.697,1.697l-3.76-3.758c-0.586-0.586-1.535-0.586-2.121,0l-6.943,6.943
                    c-0.586,0.586-0.586,1.535,0,2.121c0.293,0.293,0.676,0.439,1.061,0.439c0.383,0,0.768-0.146,1.061-0.439l5.883-5.883l2.699,2.697
                    L23.686,29.171z M29.119,19.571c0-0.998-0.809-1.807-1.807-1.807c-0.996,0-1.805,0.809-1.805,1.807
                    c0,0.996,0.809,1.805,1.805,1.805C28.311,21.376,29.119,20.567,29.119,19.571"/>
                </g>
              </g>
              </svg>
              View on your wall
          </button>
        `, r.querySelector(".view-wall-button").addEventListener("click", async () => {
          const b = this.shadowRoot.querySelector(
            ".multi-steps-overlay"
          );
          if (b)
            if (b.style.display = "none", this._isMobileDevice())
              try {
                await this.handleActivateAR();
              } catch {
              }
            else
              window.location.href = `${xt}/${this.modelData.modelId}`;
        }), h.style.display = "none", d.style.display = "none";
      } else
        this.shadowRoot.querySelector(
          ".steps-gif"
        ).src = `/wall-art-instructions-${this.currentStep}-anim.gif`, this.shadowRoot.querySelector(".instructions-title").innerHTML = ut[this.currentStep - 1].title, this.shadowRoot.querySelector(".instructions-body").innerHTML = ut[this.currentStep - 1].description;
  }
  disconnectedCallback() {
    document.removeEventListener(
      "mousedown",
      this.boundHandleDocumentMouseDown
    ), document.removeEventListener("scale", this.boundHandleScale), this.modelViewer && (this.modelViewer.removeEventListener(
      "model-visibility",
      this.boundHandleModelVisibility
    ), this.modelViewer.removeEventListener(
      "ar-status",
      this.boundHandleArStatus
    ), this.modelViewer.removeEventListener(
      "camera-change",
      this.boundHandleCameraChange
    ), this.modelViewer.removeEventListener(
      "scene-graph-ready",
      this.boundHandleSceneGraphReady
    ), this.modelViewer.removeEventListener("load", this.boundHandleLoad));
  }
  async _getModelData() {
    var h;
    let r = window.location.href;
    try {
      let d;
      if (this.getAttribute("src") ? d = await fetch(
        `https://v2.ardisplay.io/api/3d-model?id=${this.getAttribute("src")}`
      ) : (r && r.endsWith("/") && (r = r.slice(0, -1)), d = await fetch(
        `https://v2.ardisplay.io/api/3d-model?url=${Wt(r)}`
      )), !d.ok)
        throw new Error(`Response status: ${d.status}`);
      const b = await d.json();
      this.modelData = b, (h = this.modelData) != null && h.options || vt.warn("Missing model options. Skipping variant initialization."), this._setupVariantsSizes(), this.modelData.mode === "inpage" && await _t();
    } catch (d) {
      vt.error(d.message);
    }
  }
  _setupVariantsSizes() {
    var r;
    this.variants = ((r = this.modelData) == null ? void 0 : r.options) || [], this.variantSizes = [], this.variants.forEach((h) => {
      const d = {};
      h.sizes.forEach((b) => {
        const m = b.label.toLowerCase();
        d[m] = {
          width: b.width,
          height: b.height,
          depth: b.depth || ""
        };
      }), this.variantSizes.push(d);
    });
  }
  _getAttributes() {
    return {
      modelSrc: this.getAttribute("src") || "",
      modelPoster: this.getAttribute("poster") || "",
      ar: this.hasAttribute("ar"),
      cameraControls: this.hasAttribute("camera-controls"),
      touchAction: this.getAttribute("touch-action") || "none",
      viewMode: this.getAttribute("view-mode") || "normal",
      arPlacement: this.getAttribute("ar-placement") || "floor"
    };
  }
  _consolidateStyles() {
    const r = document.createElement("style");
    return this.modelData.mode !== "none" ? r.textContent = `
        :host {
          display: block;
          width: 100%;
          height: 100%;
        }
      ` : r.textContent = `
        :host {
          display: block;
          width: fit-content;
          height: fit-content;
        }
      `, r.textContent += ` 
      *,*::before,*::after{
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      #qrModal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .qr-modal-content {
        background: white;
        border-radius: 8px;
        position: relative;
      }
      .qr-close-button {
        position: absolute;
        right: 10px;
        top: 10px;
        font-size: 24px;
        cursor: pointer;
        border: none;
        background: none;
        padding: 5px;
      }
      #qr-code {
        margin: 20px auto;
      }

      /* Consolidated Styles */
      model-viewer {
        width: 100%;
        height: 100%;
        --min-hotspot-opacity: 0;
        position: relative;
      }

      model-viewer[ar-status="session-started"] .qr-code-button,
      model-viewer[ar-status="object-placed"] .qr-code-button {
        display: none;
      }

      .dimensionLineContainer {
        pointer-events: none;
        display: block;
      }

      .dimensionLine {
        display: none;
        stroke: #16a5e6;
        stroke-width: 2;
      }

      .hide {
        display: none;
      }

      .dot {
        display: none;
      }

      .dim {
        display: none;
        border-radius: 20px;
        color: #1185bb;
        padding: 4px 8px;
        border: 1px solid #1185bb;
      }

      /* QR Modal */

      .qr-modal-content {
        background-color: #fefefe;
        border: 1px solid #888;
        width: 820px;
        height: 418px;
        position: relative;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }

      .qr-modal-content h2 {
        margin-top: 0;
        color: #333;
        text-align: center;
      }

      .qr-code-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px 0;
      }

      .qr-close-button {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 30px;
        height: 30px;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        border: none;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      /* Bottom Nav Bar */
      .bottom-container{
        position: absolute;
        width: 100%;
        height: 0px;
        bottom: 64px;
      }

      .bottom-nav-bar {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px;
        z-index: 10;
      }

      .cart-button-wrapper{
        display: none;
      }

      model-viewer[ar-status="session-started"] .cart-button-wrapper,
      model-viewer[ar-status="object-placed"] .cart-button-wrapper{
        display: flex;
      }

      .nav-btn {
        background-color: #f0f0f0;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 8px 12px;
        border-radius: 4px;
        margin-right: 8px;
        font-weight: 500;
        transition: background-color 0.2s ease;
        flex: 1;
      }
      .nav-btn:hover {
        background-color: #ddd;
      }

      /* Sub-panels */
      .sub-panel {
        position: absolute;
        bottom: 0; /* ensure it sits over the nav bar */
        left: 0;
        width: 100%;
        background-color: transparent;
        box-shadow: 0 -2px 8px rgba(0,0,0,0.15);
        padding: 16px 0;
      }
      .hidden {
        display: none;
      }

      /* Color Slider */
      .slider {
        width: 100%;
        text-align: center;
        overflow: hidden;
        margin: 0 auto;
      }
      .slides {
        display: flex;
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
        padding: 0 10px;
        gap: 10px; /* spacing between slides */
      }
      .slide {
        scroll-snap-align: start;
        flex-shrink: 0;
        width: 80px;
        height: 80px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        cursor: pointer;
        background-position: center;
        background-size: contain;
        background-repeat: no-repeat;
        outline: none;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      .slide:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      }
      .slide.selected {
        border-color: #4285f4;
        box-shadow: 0 0 0 2px rgba(66,133,244,0.3);
      }

      .size-panel {
      /* Similar to 'flex flex-wrap gap-2' in Tailwind */
      display: flex;
      flex-wrap: wrap;
      gap: 8px; /* ~ Tailwind gap-2 */
      margin-top: 8px;
      padding: 16px; /* for some breathing room */
      background-color: transparent;
      z-index: 100;
    }

    .size-buttons-wrapper {
      /* If you need an extra wrapper, adjust accordingly */
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      padding: 0;
    }

    .size-button {
      /* Mimicking "border-2 border-gray-300 rounded-lg px-4 py-2" */
      border: 2px solid #ccc;
      border-radius: 8px; /* ~ Tailwind rounded-lg */
      padding: 8px 16px; /* ~ px-4 py-2 in Tailwind */
      background-color: rgba(255, 255, 255, 0.8); /* ~ bg-white/80 */
      font-weight: 500;
      cursor: pointer;
      color: black;

      /* Tailwind “transition-colors” is basically short for smooth border/color transitions */
      transition: border-color 0.2s ease, color 0.2s ease, background-color 0.2s ease;
    }

    /* Hover effect: "hover:border-blue-600 hover:text-blue-600" */
    .size-button:hover:not(:disabled) {
      border-color: #2563EB;
      color: #2563EB;
    }

    /* Active/selected state similar to your existing .selected logic */
    .size-button.selected {
      color: #4285f4;
      border-color: #4285f4;
      opacity: 1;
    }

      /* ---------- New styles for bottom nav and floating cart ---------- */
      /* Container for the bottom region (holds floating cart & bottom nav) */
      .bottom-container {
        position: relative;
        width: 100%;
        height: 0px; /* let content define height; this just serves as a positioning wrapper */
      }

      /* Floating Add to Cart button */
      .cart-button-wrapper {
        position: absolute;
        top: -64px; /* similar to -top-16 from Tailwind */
        left: 0;
        right: 0;
        justify-content: center;
      }
      .cart-btn {
        background-color: #2563EB; /* Tailwind blue-600 */
        color: #fff;
        border: none;
        border-radius: 9999px; /* fully rounded */
        padding: 12px 32px; /* ~py-3 px-8 */
        font-weight: 600;
        font-family: sans-serif;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: background-color 0.2s ease;
      }
      .cart-btn:hover {
        background-color: #1D4ED8; /* Tailwind blue-700 */
      }
      .cart-btn svg {
        height: 20px; /* h-5 in Tailwind ~ 20px */
        width: 20px;
      }

      /* Bottom Nav Bar (matching the React code style) */
      .bottom-nav {
        height: 64px; /* h-16 in Tailwind */
        background-color: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(8px);
        border-top: 1px solid #E5E7EB; /* border-gray-200 */
        display: flex;
        align-items: center;
        justify-content: space-around;
        position: relative;
        z-index: 100;
      }
      .nav-icon-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 8px 16px;
        color: #4B5563; /* text-gray-600 */
        background: transparent;
        border: none;
        cursor: pointer;
        transition: color 0.2s ease;
      }
      .nav-icon-button.active {
        color: #2563EB; /* text-blue-600 */
      }
      .nav-icon-button svg {
        height: 24px; /* h-6 */
        width: 24px;
      }
      .nav-icon-button span {
        font-size: 12px; /* text-xs ~12px */
        margin-top: 4px;
      }

      /* Sub-panels (size panel, variant panel) that appear above the nav */
      .sub-panel {
        position: absolute;
        bottom: 0; /* sits just above nav (which is 64px tall) */
        left: 0;
        right: 0;
        background-color: rgba(255,255,255,0.95);
        backdrop-filter: blur(8px);
        border-top: 1px solid #E5E7EB;
        padding: 16px;
        box-shadow: 0 -2px 8px rgba(0,0,0,0.15);
        z-index: 100;
      }
      /* ------------------------------------------------------------------ */
    `, r;
  }
  async checkWebXRSupport() {
    try {
      return "xr" in navigator ? await navigator.xr.isSessionSupported("immersive-ar") : !1;
    } catch {
      return !1;
    }
  }
  _loadTemplate(r) {
    let h = r === "popup" ? Tt : r === "inpage" ? jt : Nt;
    const d = this._getAttributes(), b = h(
      d.ar,
      d.cameraControls,
      d.touchAction,
      d.modelPoster,
      d.arPlacement,
      this.modelData
    ), m = document.createRange().createContextualFragment(b);
    this._processLucideIcons(m), this.shadowRoot.appendChild(m);
  }
  _updateSizePanel(r) {
    const h = this.shadowRoot.querySelector(".size-panel");
    if (!h) return;
    h.innerHTML = "";
    const d = J("div", {
      classList: ["size-buttons-wrapper"]
    }), b = this.variantSizes[r];
    b && Object.entries(b).forEach(([m, x]) => {
      const C = J("button", {
        classList: ["size-button"],
        textContent: m,
        attributes: {
          "data-size-key": m
        },
        disabled: !1
      });
      C.addEventListener("click", (L) => {
        this.shadowRoot.querySelectorAll(".size-button").forEach((R) => R.classList.remove("selected")), L.target.classList.add("selected"), this.calculateAndApplyScale(x);
      }), d.appendChild(C);
    }), h.appendChild(d);
  }
  _processLucideIcons(r) {
    const h = {
      eye: Yt,
      blocks: Xt,
      rotate3d: Ut,
      box: Ft,
      fileaxis3d: Zt,
      scan: Qt
    };
    r.querySelectorAll("[data-lucide]").forEach((b) => {
      const m = b.getAttribute("data-lucide").toLowerCase(), x = h[m];
      if (x) {
        const C = b.getAttribute("width") || 24, L = b.getAttribute("color") || "currentColor", R = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "svg"
        );
        R.setAttribute("width", C), R.setAttribute("height", C), R.setAttribute("viewBox", "0 0 24 24"), R.setAttribute("fill", "none"), R.setAttribute("stroke", L), R.setAttribute("stroke-width", "2"), R.setAttribute("stroke-linecap", "round"), R.setAttribute("stroke-linejoin", "round"), x[2].forEach((W) => {
          const [U, K] = W, G = document.createElementNS(
            "http://www.w3.org/2000/svg",
            U
          );
          Object.entries(K).forEach(([Q, j]) => {
            G.setAttribute(Q, j);
          }), R.appendChild(G);
        }), b.parentNode.replaceChild(R, b);
      }
    });
  }
  _moveSlottedContent() {
    const r = this.shadowRoot.querySelector(
      ".ar-display-custom-panel"
    ), h = this.querySelector('slot[name="custom-panel"]');
    if (r && h)
      r.appendChild(h);
    else {
      const d = this.shadowRoot.querySelector(".details-panel");
      d && d.remove();
    }
  }
  _setupEventListeners() {
    console.log(this.modelData.mode), this.modelData.mode === "popup" ? this._setupModalEventListeners() : this.modelData.mode === "inpage" && this._setupNormalEventListeners(), this.boundHandleScale = () => this._setupDimensions(this.modelViewer), this.boundHandleModelVisibility = () => this._setupDimensions(this.modelViewer), this.boundHandleArStatus = (r) => this._handleArStatusChange(r), this.boundHandleCameraChange = () => {
      this.debouncedRenderSVG(), this.debouncedUpdateDimensionHotspots();
    }, this.boundHandleSceneGraphReady = () => {
      this.debouncedRenderSVG(), this.debouncedUpdateDimensionHotspots();
    }, this.boundHandleLoad = () => {
      this.isModelLoaded = !0, this.qrCodeButton && (this.qrCodeButton.disabled = !1);
      const r = this.modelViewer.getDimensions(), h = this.modelViewer.scale.toString().split(" ").map(Number);
      if (this.originalSize = { x: 0, y: 0, z: 0 }, this.originalSize.x = r.x / h[0], this.originalSize.y = r.y / h[1], this.originalSize.z = r.z / h[2], this.variantSizes && this.variantSizes[this.selectedIndex]) {
        const m = this.variantSizes[this.selectedIndex], x = Object.keys(m)[0];
        if (x) {
          const C = m[x];
          this.calculateAndApplyScale(C), requestAnimationFrame(() => {
            this.shadowRoot.querySelectorAll(".size-button").forEach((R) => {
              R.classList.toggle(
                "selected",
                R.textContent === x
              );
            });
          });
        }
      }
      this.shadowRoot.querySelector(".size-panel button") || this._updateSizePanel(0);
      const d = this.modelViewer.shadowRoot.querySelector(".slot.ar-button");
      d && (d.style.display = "none");
      const b = this.shadowRoot.querySelector("#progressModal");
      b && b.style.display !== "none" && (b.style.display = "none", this._showStepsModal());
    }, document.addEventListener("scale", this.boundHandleScale), this.modelViewer.addEventListener(
      "model-visibility",
      this.boundHandleModelVisibility
    ), this.modelViewer.addEventListener("ar-status", this.boundHandleArStatus), this.modelViewer.addEventListener(
      "camera-change",
      this.boundHandleCameraChange
    ), this.modelViewer.addEventListener(
      "scene-graph-ready",
      this.boundHandleSceneGraphReady
    ), this.modelViewer.addEventListener("load", this.boundHandleLoad), this.modelViewer.addEventListener("progress", (r) => {
      const h = Math.round(r.detail.totalProgress * 100), d = this.shadowRoot.querySelector("#progressBarFill");
      d && (d.style.width = `${h}%`);
    }), this.modelViewer.addEventListener("load", () => {
      this.isModelLoaded = !0, this.shadowRoot.querySelectorAll(".dim").forEach((h) => {
        h.style.display = "block";
      });
      const r = this.shadowRoot.querySelector("#activateAR");
      r && (r.addEventListener("click", async (h) => {
        if (h instanceof MouseEvent)
          try {
            await this.modelViewer.activateAR();
            const d = this.shadowRoot.querySelector("#progressModal");
            d && (d.style.display = "none");
          } catch {
          }
      }), r.style.display = "block");
    }), this._setupQRCodeListeners();
  }
  _isIOSDevice() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  }
  _isMobileDevice() {
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );
  }
  async _setupQRCodeListeners() {
    const r = this.shadowRoot.querySelector("#qrModal"), h = this.shadowRoot.querySelector("#qr-code"), d = this.shadowRoot.querySelector(".qr-code-button"), b = this.shadowRoot.querySelector(".qr-close-button");
    !r || !h || !d || !b || (this.qrModal = r, this.qrCodeManager = new Gt(h, this.modelData), d.addEventListener("click", async () => {
      if (this.modelData.mode === "none" && this._isMobileDevice() && await _t(), !this._isMobileDevice()) {
        const C = `${xt}/${this.modelData.modelId}`;
        this.qrCodeManager.updateQrCode(C), r.style.display = "flex";
        return;
      }
      if (!await this.checkWebXRSupport()) {
        this._resetSteps(), this._showStepsModal();
        return;
      }
      if (this.isModelLoaded) {
        this._resetSteps(), this._showStepsModal();
        return;
      }
      await _t();
      const x = this.shadowRoot.querySelector("#progressModal");
      if (x) {
        const C = this.shadowRoot.querySelector("#progressBarFill");
        C && (C.style.width = "0%"), x.style.display = "flex", this.userClickedAR = !0;
      }
    }), b.addEventListener("click", () => {
      r.style.display = "none";
    }), r.addEventListener("click", (m) => {
      m.target === r && (r.style.display = "none");
    }));
  }
  _resetSteps() {
    this.currentStep = 1, this.shadowRoot.querySelectorAll(".step-indicator").forEach((b, m) => {
      b.classList.toggle("active", m === 0);
    });
    const r = this.shadowRoot.querySelector(".steps-content");
    r && (r.innerHTML = `
        <img src="/wall-art-instructions-1-anim.gif" class="steps-gif" alt="Computer man">
        <h3 class="instructions-title">${ut[0].title}</h3>
        <div class="instructions-body">${ut[0].description}</div>
      `);
    const h = this.shadowRoot.querySelector(".next-button"), d = this.shadowRoot.querySelector(".skip-button");
    h && (h.style.display = "block"), d && (d.style.display = "block");
  }
  handleActivateAR() {
    if (this._sendShortStatsEvent("Click"), !this._isMobileDevice()) {
      const r = `${xt}/${this.modelData.modelId}`;
      this.qrCodeManager && this.qrModal && (this.qrCodeManager.updateQrCode(r), this.qrModal.style.display = "flex");
      return;
    }
    if (this.modelViewer.canActivateAR)
      try {
        this._sendShortStatsEvent("Try"), this.modelViewer.activateAR();
      } catch (r) {
        this._sendShortStatsEvent("Failed", r.message);
        const h = `${xt}/${this.modelData.modelId}`;
        this.qrCodeManager && this.qrModal && (this.qrCodeManager.updateQrCode(h), this.qrModal.style.display = "flex");
      }
  }
  _setupVariantsColors() {
    if (!this.variants || this.variants.length === 0) return null;
    const r = J("div", { classList: ["slider"] }), h = J("div", { classList: ["slides"] });
    return this.variants.forEach((d, b) => {
      const m = J("button", { classList: ["slide"] });
      if (b === 0 && (m.classList.add("selected"), this.modelViewer && d.url)) {
        let x = new URL(d.url);
        this.modelViewer.src = x.href, d.image ? this.modelViewer.poster = d.image : this.modelViewer.removeAttribute("poster");
      }
      d.image ? m.style.backgroundImage = `url('${d.image}')` : m.style.backgroundColor = d.color || "#ccc", m.onclick = () => {
        if (this.modelViewer) {
          if (d.url) {
            let x = new URL(d.url);
            this.modelViewer.src = x.href;
          }
          this._updateSizePanel(b), d.image ? this.modelViewer.poster = d.image : this.modelViewer.removeAttribute("poster"), h.querySelectorAll(".slide").forEach((x) => x.classList.remove("selected")), m.classList.add("selected"), this.selectedIndex = b;
        }
      }, h.appendChild(m);
    }), r.appendChild(h), r;
  }
  // ---------- UI updates for bottom nav and floating cart ----------
  _setupCartButton(r) {
    const h = J("div", {
      classList: ["cart-button-wrapper"]
    }), d = J("button", { classList: ["cart-btn"] });
    d.innerHTML = `
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293
               2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0
               100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
          />
        </svg>
        Add to Cart
      `, h.appendChild(d), r.appendChild(h), h.addEventListener("click", async () => {
      await this._sendShortStatsEvent("Cart"), window.location.href = this.modelData.addToCartUrl;
    });
  }
  _setupBottomNavBar(r) {
    const h = J("div", {
      classList: ["sub-panel", "hidden"]
    }), d = this._createSizeControls();
    d && h.appendChild(d);
    const b = J("div", {
      classList: ["sub-panel", "hidden"]
    }), m = this._setupVariantsColors();
    m && b.appendChild(m);
    const x = J("div", { classList: ["bottom-nav"] }), C = (U) => {
      const K = U.classList.contains("hidden");
      h.classList.add("hidden"), b.classList.add("hidden"), K && U.classList.remove("hidden");
    }, L = J("button", {
      classList: ["nav-icon-button"]
    });
    L.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                 stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16m-7 6h7"
              />
            </svg>
            <span>Size</span>
          `, L.addEventListener("click", () => {
      C(h), L.classList.toggle(
        "active",
        !h.classList.contains("hidden")
      ), R.classList.remove("active");
    });
    const R = J("button", {
      classList: ["nav-icon-button"]
    });
    R.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                 stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M7 21a4 4 0 01-4-4V5a2 2 0
                   012-2h4a2 2 0 012 2v12a4 4 0
                   01-4 4zm0 0h12a2 2 0 002-2v-4a2
                   2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2
                   2 0 012.828 0l2.829 2.829a2 2 0 010
                   2.828l-8.486 8.485M7 17h.01"
              />
            </svg>
            <span>Variant</span>
          `, R.addEventListener("click", () => {
      C(b), R.classList.toggle(
        "active",
        !b.classList.contains("hidden")
      ), L.classList.remove("active");
    });
    const W = J("button", {
      classList: ["nav-icon-button"]
    });
    W.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                 stroke="currentColor">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8.684 13.342C8.886 12.938
                   9 12.482 9 12c0-.482-.114-.938-.316-1.342m0
                   2.684a3 3 0 110-2.684m0 2.684l6.632
                   3.316m-6.632-6l6.632-3.316m0 0a3 3 0
                   105.367-2.684 3 3 0
                   00-5.367 2.684zm0
                   9.316a3 3 0 105.368 2.684 3 3 0
                   00-5.368-2.684z"
              />
            </svg>
            <span>Share</span>
          `, W.addEventListener("click", async () => {
      this._sendShortStatsEvent("Share");
      const U = {
        title: document.title,
        text: "Check out this AR model!",
        url: window.location.href
      };
      try {
        await navigator.share(U), vt.debug("Content shared successfully");
      } catch {
      }
    }), x.appendChild(L), x.appendChild(R), x.appendChild(W), this.boundHandleDocumentMouseDown = (U) => {
      const K = U.composedPath();
      !K.includes(x) && !K.includes(h) && !K.includes(b) && (h.classList.add("hidden"), b.classList.add("hidden"), L.classList.remove("active"), R.classList.remove("active"));
    }, document.addEventListener("mousedown", this.boundHandleDocumentMouseDown), r.appendChild(h), r.appendChild(b), r.appendChild(x);
  }
  // ------------------------------------------------------------------
  _setupModalEventListeners() {
    const r = this.shadowRoot.querySelector(".view-3d-button"), h = this.shadowRoot.querySelector(".preview-image"), d = this.shadowRoot.querySelector(
      ".model-viewer-container"
    ), b = this.shadowRoot.querySelector(".close-button"), m = this.shadowRoot.querySelector(".overlay");
    r.addEventListener("click", async () => {
      h.style.display = "none", r.style.display = "none", d.style.display = "flex", m.style.display = "block", await _t(), this._setupDimensions(this.modelViewer);
    }), b.addEventListener("click", () => {
      h.style.display = "block", r.style.display = "flex", d.style.display = "none", m.style.display = "none";
    });
  }
  _setupNormalEventListeners() {
  }
  _handleArStatusChange(r) {
    const h = r.detail.status === "session-started", d = [
      ...this.modelViewer.querySelectorAll("[data-hotspot]"),
      this.modelViewer.querySelector("#dimLines")
    ].filter(Boolean);
    ((m) => {
      d.forEach((x) => {
        x.classList.toggle("hide", !m);
      });
    })(!h);
  }
  _drawLine(r, h, d, b) {
    !r || !h || !d || (r.setAttribute("x1", h.canvasPosition.x), r.setAttribute("y1", h.canvasPosition.y), r.setAttribute("x2", d.canvasPosition.x), r.setAttribute("y2", d.canvasPosition.y), b && r.classList.toggle("hide", !b.facingCamera));
  }
  _renderSVG() {
    const r = this.modelViewer.querySelectorAll("line");
    if (r.length === 0) return;
    [
      {
        line: r[0],
        start: "hotspot-dot+X-Y+Z",
        end: "hotspot-dot+X-Y+Z",
        dimension: "hotspot-dim+X-Y"
      },
      {
        line: r[1],
        start: "hotspot-dot+X-Y-Z",
        end: "hotspot-dot+X+Y-Z",
        dimension: "hotspot-dim+X-Z"
      },
      {
        line: r[2],
        start: "hotspot-dot+X+Y-Z",
        end: "hotspot-dot-X+Y-Z"
      },
      {
        line: r[3],
        start: "hotspot-dot-X+Y-Z",
        end: "hotspot-dot-X-Y-Z",
        dimension: "hotspot-dim-X-Z"
      },
      {
        line: r[4],
        start: "hotspot-dot-X-Y-Z",
        end: "hotspot-dot-X-Y+Z",
        dimension: "hotspot-dim-X-Y"
      }
    ].forEach(({ line: d, start: b, end: m, dimension: x }) => {
      this._drawLine(
        d,
        this.modelViewer.queryHotspot(b),
        this.modelViewer.queryHotspot(m),
        x ? this.modelViewer.queryHotspot(x) : null
      );
    });
  }
  _updateDimensionHotspots() {
    const r = this.modelViewer.getBoundingBoxCenter(), h = this.modelViewer.getDimensions(), d = {
      x: h.x / 2,
      y: h.y / 2,
      z: h.z / 2
    };
    [
      {
        name: "hotspot-dot+X-Y+Z",
        position: [
          r.x + d.x,
          r.y - d.y,
          r.z + d.z
        ]
      },
      {
        name: "hotspot-dim+X-Y",
        position: [
          r.x + d.x * 1.2,
          r.y - d.y * 1.1,
          r.z
        ],
        label: `${(h.z * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim+X-Y"]'
      },
      {
        name: "hotspot-dot+X-Y-Z",
        position: [
          r.x + d.x,
          r.y - d.y,
          r.z - d.z
        ]
      },
      {
        name: "hotspot-dim+X-Z",
        position: [
          r.x + d.x * 1.2,
          r.y,
          r.z - d.z * 1.2
        ],
        label: `${(h.y * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim+X-Z"]'
      },
      {
        name: "hotspot-dot+X+Y-Z",
        position: [
          r.x + d.x,
          r.y + d.y,
          r.z - d.z
        ]
      },
      {
        name: "hotspot-dim+Y-Z",
        position: [
          r.x,
          r.y + d.y * 1.1,
          r.z - d.z * 1.1
        ],
        label: `${(h.x * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim+Y-Z"]'
      },
      {
        name: "hotspot-dot-X+Y-Z",
        position: [
          r.x - d.x,
          r.y + d.y,
          r.z - d.z
        ]
      },
      {
        name: "hotspot-dim-X-Z",
        position: [
          r.x - d.x * 1.2,
          r.y,
          r.z - d.z * 1.2
        ],
        label: `${(h.y * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim-X-Z"]'
      },
      {
        name: "hotspot-dot-X-Y-Z",
        position: [
          r.x - d.x,
          r.y - d.y,
          r.z - d.z
        ]
      },
      {
        name: "hotspot-dim-X-Y",
        position: [
          r.x - d.x * 1.2,
          r.y - d.y * 1.1,
          r.z
        ],
        label: `${(h.z * 100).toFixed(0)} cm`,
        labelSelector: '[slot="hotspot-dim-X-Y"]'
      },
      {
        name: "hotspot-dot-X-Y+Z",
        position: [
          r.x - d.x,
          r.y - d.y,
          r.z + d.z
        ]
      }
    ].forEach(({ name: m, position: x, label: C, labelSelector: L }) => {
      if (this.modelViewer.updateHotspot({
        name: m,
        position: x.join(" ")
      }), C && L) {
        const R = this.modelViewer.querySelector(L);
        R && (R.textContent = C);
      }
    });
  }
  _setupDimensions() {
    this.shadowRoot.querySelectorAll(".dimensionLine").forEach((r) => {
      r.style.display = "block";
    }), this.debouncedRenderSVG(), this.debouncedUpdateDimensionHotspots();
  }
  _createSizeControls() {
    const r = J("div", { classList: ["size-panel"] }), h = J("div", {
      classList: ["size-buttons-wrapper"]
    });
    return r.appendChild(h), r;
  }
  _handleSizeChange(r) {
    if (r.target.classList.contains("size-button")) {
      const h = r.target.getAttribute("data-size-key");
      if (this.variantSizes[this.selectedIndex][h]) {
        this.shadowRoot.querySelectorAll(".size-button").forEach((b) => b.classList.remove("selected")), r.target.classList.add("selected");
        const d = this.variantSizes[this.selectedIndex][h];
        this.calculateAndApplyScale(d);
      }
    }
  }
  applyScale() {
    this.calculatedScale && this.modelViewer && (this.modelViewer.scale = `${this.calculatedScale.scaleX} ${this.calculatedScale.scaleY} ${this.calculatedScale.scaleZ}`, typeof this.modelViewer.updateFraming == "function" && requestAnimationFrame(() => {
      this.modelViewer.updateFraming(), document.dispatchEvent(this.scaleEvent);
    }));
  }
  async calculateAndApplyScale(r) {
    if (r)
      try {
        const h = await this.calculateModelScale(r);
        this.calculatedScale = h, this.applyScale();
      } catch {
      }
  }
  cmToMeters(r) {
    return parseFloat(r.replace("cm", "")) / 100;
  }
  calculateModelScale(r) {
    const h = this.originalSize || { x: 1, y: 1, z: 1 }, d = h.x, b = h.y, m = h.z, x = this.cmToMeters(r.width), C = this.cmToMeters(r.height), L = r.depth ? this.cmToMeters(r.depth) : 0.05, R = x / d, W = C / b, U = L / m;
    return { scaleX: R, scaleY: W, scaleZ: U };
  }
}
customElements.define("ardisplay-viewer", Kt);
document.addEventListener("DOMContentLoaded", () => {
  window.customElements.get("ardisplay-viewer") ? qt() : window.customElements.whenDefined("ardisplay-viewer").then(qt);
});
function qt() {
  document.querySelectorAll("div.ardisplay-viewer").forEach((r) => {
    const h = document.createElement("ardisplay-viewer");
    for (Array.from(r.attributes).forEach((d) => {
      h.setAttribute(d.name, d.value);
    }); r.firstChild; )
      h.appendChild(r.firstChild);
    r.replaceWith(h);
  });
}
